{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u4ec0\u4e48\u662f Nocalhost? \u00b6 Nocalhost \u662f\u4e00\u4e2a\u5f00\u6e90 IDE \u63d2\u4ef6\uff0c\u7528\u4e8e\u4e91\u539f\u751f\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1: \u76f4\u63a5\u5728 Kubernetes \u5185\u90e8\u6784\u5efa\u3001\u6d4b\u8bd5\u548c\u8c03\u8bd5\u5e94\u7528\u7a0b\u5e8f IDE \u652f\u6301: \u5373\u4f7f\u5728\u8fdc\u7a0b Kubernetes \u7fa4\u96c6\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u5728 IDE \u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u8c03\u8bd5\u548c\u53d1\u5c55\u7ecf\u9a8c \u4f7f\u7528\u5373\u65f6\u6587\u4ef6\u540c\u6b65\u5f00\u53d1: \u7acb\u5373\u5c06\u4ee3\u7801\u66f4\u6539\u4e3a\u8fdc\u7a0b\u5bb9\u5668\uff0c\u800c\u65e0\u9700\u91cd\u5efa\u955c\u50cf\u6216\u91cd\u65b0\u542f\u52a8\u5bb9\u5668\u3002 \u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f \u00b6 Nocalhost \u7531\u5355\u4e2a\u4e8c\u5143 CLI \u548c IDE \u6269\u5c55\u7ec4\u6210\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u60a8\u5c06\u5176\u76f4\u63a5\u4e0e\u60a8\u559c\u6b22\u7684 IDE \u4e00\u8d77\u4f7f\u7528\u3002 Nocalhost \u4e0d\u9700\u8981\u670d\u52a1\u5668\u7aef\u7ec4\u4ef6\uff0c\u56e0\u4e3a\u5b83\u50cf Kubectl \u4e00\u6837\uff0c\u76f4\u63a5\u4f7f\u7528 Kubeconfig \u901a\u4fe1\u5230 Kubernetes \u7fa4\u96c6\u3002 \u4e3a\u4ec0\u4e48\u8981 Nocalhost\uff1f \u00b6 \u6784\u5efa Kubernetes \u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u5f88\u56f0\u96be\uff0c\u5bf9\u4e8e\u5927\u578b\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u8fd9\u751a\u81f3\u66f4\u96be\u3002Nocalhost \u63d0\u4f9b\u4e86\u6784\u5efa\u4e91\u672c\u5730\u5e94\u7528\u7a0b\u5e8f\u7684\u6700\u6709\u6548\u7684\u65b9\u6cd5\u3002 \u4f7f\u7528 Nocalhost \u76f4\u63a5\u5728 Kubernetes \u5185\u90e8\u5f00\u53d1\u7684\u4f18\u70b9\u662f\uff1a \u751f\u4ea7\u73af\u5883\u76f8\u4f3c\u6027 - Dev environment is very similar to your production environment, giving you much more confidence that everything will work in the production environment when new features are released. \u52a0\u5feb\u53cd\u9988\u5faa\u73af - Via file synchronization, your code changes can take effect immediately in the container without rebuilding the image or redeploying the container. \u7075\u6d3b\u7684\u53ef\u4f38\u7f29\u6027 - Developers do not need to worry about insufficient local resources. \u964d\u4f4e\u6210\u672c - Use resources more efficiently and reduce IT facility costs \u5728 Kubernetes \u7fa4\u96c6\u4e2d\u5f00\u53d1\u53ef\u80fd\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\u5f88\u6709\u7528: \u5f53\u5730\u8d44\u6e90\u7684\u5c40\u9650 \u60f3\u5728\u7c7b\u4f3c\u751f\u4ea7\u7684\u73af\u5883\u4e2d\u6d4b\u8bd5\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f \u60f3\u8c03\u8bd5\u5f88\u96be\u5728\u672c\u5730\u673a\u5668\u4e0a\u590d\u5236\u7684\u95ee\u9898 \u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u8bbf\u95ee\u96c6\u7fa4\u5185\u90e8\u670d\u52a1\uff08\u4f8b\u5982\u7fa4\u96c6 DNS\uff09 \u4e3b\u8981\u7279\u5f81 \u00b6 \u5728 Kubernetes \u4e2d\u8fdb\u884c\u7f16\u7801 \u00b6 Nocalhost is preconfigured to work with your favourite IDEs, you can connect to any Kubernetes cluster with one click, and enjoying the coding in-cluster, get rid of the pesky local environment configurations. \u5373\u65f6\u6587\u4ef6\u540c\u6b65 \u00b6 Nocalhost can automatically synchronize the code to the container every time you make a change. This way, eliminate the submit, building and pushing cycles, greatly speed up the feedback loop of development. So you see updates in under a second. \u4e3a\u534f\u4f5c\u800c\u5efa \u00b6 Nocalhost helps your team to standardize development workflows without requiring everyone on your team to become a Kubernetes expert. Kubernetes and DevOps expert on your team can configure and manager Cluster, Applications, DevSpace and Users by Nocalhost Server, Read more about Nocalhost Server Developers on your team can easily check out the project and start coding and debugging in the Kubernetes cluster without becoming a Kubernetes expert. \u517c\u5bb9\u6027 \u00b6 Nocalhost \u8fdb\u884c\u4e86\u8bb8\u591a Kubernetes \u53d1\u884c\u7684\u6218\u6597\u6d4b\u8bd5: \u5f53\u5730\u7684 Kubernetes \u96c6\u7fa4 like minikube, Microk8s, K3s and Docker Desktop \u6258\u7ba1 Kubernetes \u7fa4\u96c6 like TKE (Tencent), ACK (Alibaba Cloud), GKE (Google), Microsoft Azure \u81ea\u6211\u7ba1\u7406\u7684 Kubernetes \u7fa4\u96c6 (e.g. created with KubeSphere or Rancher)","title":"\u4ecb\u7ecd"},{"location":"#nocalhost","text":"Nocalhost \u662f\u4e00\u4e2a\u5f00\u6e90 IDE \u63d2\u4ef6\uff0c\u7528\u4e8e\u4e91\u539f\u751f\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1: \u76f4\u63a5\u5728 Kubernetes \u5185\u90e8\u6784\u5efa\u3001\u6d4b\u8bd5\u548c\u8c03\u8bd5\u5e94\u7528\u7a0b\u5e8f IDE \u652f\u6301: \u5373\u4f7f\u5728\u8fdc\u7a0b Kubernetes \u7fa4\u96c6\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u5728 IDE \u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u8c03\u8bd5\u548c\u53d1\u5c55\u7ecf\u9a8c \u4f7f\u7528\u5373\u65f6\u6587\u4ef6\u540c\u6b65\u5f00\u53d1: \u7acb\u5373\u5c06\u4ee3\u7801\u66f4\u6539\u4e3a\u8fdc\u7a0b\u5bb9\u5668\uff0c\u800c\u65e0\u9700\u91cd\u5efa\u955c\u50cf\u6216\u91cd\u65b0\u542f\u52a8\u5bb9\u5668\u3002","title":"\u4ec0\u4e48\u662f Nocalhost?"},{"location":"#_1","text":"Nocalhost \u7531\u5355\u4e2a\u4e8c\u5143 CLI \u548c IDE \u6269\u5c55\u7ec4\u6210\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u60a8\u5c06\u5176\u76f4\u63a5\u4e0e\u60a8\u559c\u6b22\u7684 IDE \u4e00\u8d77\u4f7f\u7528\u3002 Nocalhost \u4e0d\u9700\u8981\u670d\u52a1\u5668\u7aef\u7ec4\u4ef6\uff0c\u56e0\u4e3a\u5b83\u50cf Kubectl \u4e00\u6837\uff0c\u76f4\u63a5\u4f7f\u7528 Kubeconfig \u901a\u4fe1\u5230 Kubernetes \u7fa4\u96c6\u3002","title":"\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f"},{"location":"#nocalhost_1","text":"\u6784\u5efa Kubernetes \u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u5f88\u56f0\u96be\uff0c\u5bf9\u4e8e\u5927\u578b\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u8fd9\u751a\u81f3\u66f4\u96be\u3002Nocalhost \u63d0\u4f9b\u4e86\u6784\u5efa\u4e91\u672c\u5730\u5e94\u7528\u7a0b\u5e8f\u7684\u6700\u6709\u6548\u7684\u65b9\u6cd5\u3002 \u4f7f\u7528 Nocalhost \u76f4\u63a5\u5728 Kubernetes \u5185\u90e8\u5f00\u53d1\u7684\u4f18\u70b9\u662f\uff1a \u751f\u4ea7\u73af\u5883\u76f8\u4f3c\u6027 - Dev environment is very similar to your production environment, giving you much more confidence that everything will work in the production environment when new features are released. \u52a0\u5feb\u53cd\u9988\u5faa\u73af - Via file synchronization, your code changes can take effect immediately in the container without rebuilding the image or redeploying the container. \u7075\u6d3b\u7684\u53ef\u4f38\u7f29\u6027 - Developers do not need to worry about insufficient local resources. \u964d\u4f4e\u6210\u672c - Use resources more efficiently and reduce IT facility costs \u5728 Kubernetes \u7fa4\u96c6\u4e2d\u5f00\u53d1\u53ef\u80fd\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\u5f88\u6709\u7528: \u5f53\u5730\u8d44\u6e90\u7684\u5c40\u9650 \u60f3\u5728\u7c7b\u4f3c\u751f\u4ea7\u7684\u73af\u5883\u4e2d\u6d4b\u8bd5\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f \u60f3\u8c03\u8bd5\u5f88\u96be\u5728\u672c\u5730\u673a\u5668\u4e0a\u590d\u5236\u7684\u95ee\u9898 \u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u8bbf\u95ee\u96c6\u7fa4\u5185\u90e8\u670d\u52a1\uff08\u4f8b\u5982\u7fa4\u96c6 DNS\uff09","title":"\u4e3a\u4ec0\u4e48\u8981 Nocalhost\uff1f"},{"location":"#_2","text":"","title":"\u4e3b\u8981\u7279\u5f81"},{"location":"#kubernetes","text":"Nocalhost is preconfigured to work with your favourite IDEs, you can connect to any Kubernetes cluster with one click, and enjoying the coding in-cluster, get rid of the pesky local environment configurations.","title":"\u5728 Kubernetes \u4e2d\u8fdb\u884c\u7f16\u7801"},{"location":"#_3","text":"Nocalhost can automatically synchronize the code to the container every time you make a change. This way, eliminate the submit, building and pushing cycles, greatly speed up the feedback loop of development. So you see updates in under a second.","title":"\u5373\u65f6\u6587\u4ef6\u540c\u6b65"},{"location":"#_4","text":"Nocalhost helps your team to standardize development workflows without requiring everyone on your team to become a Kubernetes expert. Kubernetes and DevOps expert on your team can configure and manager Cluster, Applications, DevSpace and Users by Nocalhost Server, Read more about Nocalhost Server Developers on your team can easily check out the project and start coding and debugging in the Kubernetes cluster without becoming a Kubernetes expert.","title":"\u4e3a\u534f\u4f5c\u800c\u5efa"},{"location":"#_5","text":"Nocalhost \u8fdb\u884c\u4e86\u8bb8\u591a Kubernetes \u53d1\u884c\u7684\u6218\u6597\u6d4b\u8bd5: \u5f53\u5730\u7684 Kubernetes \u96c6\u7fa4 like minikube, Microk8s, K3s and Docker Desktop \u6258\u7ba1 Kubernetes \u7fa4\u96c6 like TKE (Tencent), ACK (Alibaba Cloud), GKE (Google), Microsoft Azure \u81ea\u6211\u7ba1\u7406\u7684 Kubernetes \u7fa4\u96c6 (e.g. created with KubeSphere or Rancher)","title":"\u517c\u5bb9\u6027"},{"location":"installation/","text":"\u5b89\u88c5 Nocalhost \u00b6 nhctl \u5b89\u88c5Nocalhost IDE\u63d2\u4ef6\u65f6\uff0c\u5b83\u5c06\u81ea\u52a8\u4e3a\u60a8\u5b89\u88c5 nhctl \u3002 \u517c\u5bb9\u7684 \u00b6 IDE Version Result VS Code 1.58.2 (Universal) JetBrains 2021.2 - Intel and Apple Silicon 2021.1 - Intel and Apple Silicon 2020.3 - Intel and Apple Silicon \u5b89\u88c5 VS \u4ee3\u7801\u63d2\u4ef6 \u00b6 market manual Open VS Code and go to Extensions by click the icon Input Nocalhost in the search box Select the Nocalhost Extension , and click the Install button. Download the latest version from our Github Repo Open VS Code and go to Extensions by click the icon Click on the top right of the Extension list, select Install from VSIX... , select the VSIX downloaded above Download the latest nhctl from out Github Repo , and put it under ~/.nh/bin/ then named nhctl, you need to give this binary execution permission (chmod +x ./nhctl). (the path is %homepath%/.nh/bin/ in windows, and the binary named 'nhctl.exe', no need to grant additional execution permissions under windows) \u5b89\u88c5 Jetbrains \u63d2\u4ef6 \u00b6 market manual Windows \u00b6 File > Settings > Plugins > Browse repositories... > Search for \"Nocalhost\" > Install Plugin MacOS \u00b6 Preferences > Settings > Plugins > Browse repositories... > Search for \"Nocalhost\" > Install Plugin Download the latest version from our Github Repo Install plugin: Preferences > Plugins > Install from disk... Download the latest nhctl from out Github Repo , and put it under ~/.nh/bin/ then named nhctl, you need to give this binary execution permission (chmod +x ./nhctl). (the path is %homepath%/.nh/bin/ in windows, and the binary named 'nhctl.exe', no need to grant additional execution permissions under windows) \u5347\u7ea7\u63d2\u4ef6 \u00b6 IDE \u542f\u52a8\u65f6\uff0cNocalhost \u5c06\u81ea\u52a8\u68c0\u67e5\u5e76\u5b89\u88c5\u6700\u65b0\u7684\u66f4\u65b0\u3002 \u5378\u8f7d \u00b6 \u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u5185\u5bb9\u5b8c\u5168\u5378\u8f7d nocalhost \u5378\u8f7d IDE \u63d2\u4ef6 \u00b6 \u5378\u8f7d IDE \u4e2d\u7684 Nocalhost IDE \u63d2\u4ef6 \u5220\u9664 nhctl \u00b6 \u5220\u9664\u6839\u76ee\u5f55\u4e2d\u7684 .nh \u6587\u4ef6\u5939 mac windows .nh \u6587\u4ef6\u5939\u5728\u60a8\u7684 ~/ \u76ee\u5f55\u4e2d, \u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u5c06\u5176\u5220\u9664 rm -rf .nh .nh \u6587\u4ef6\u5939\u5728\u60a8\u7684 <ROOT PATH>/User/username/ \u76ee\u5f55\u4e2d, \u60a8\u53ef\u4ee5\u5220\u9664\u5b83.","title":"\u5b89\u88c5"},{"location":"installation/#nocalhost","text":"nhctl \u5b89\u88c5Nocalhost IDE\u63d2\u4ef6\u65f6\uff0c\u5b83\u5c06\u81ea\u52a8\u4e3a\u60a8\u5b89\u88c5 nhctl \u3002","title":"\u5b89\u88c5 Nocalhost"},{"location":"installation/#_1","text":"IDE Version Result VS Code 1.58.2 (Universal) JetBrains 2021.2 - Intel and Apple Silicon 2021.1 - Intel and Apple Silicon 2020.3 - Intel and Apple Silicon","title":"\u517c\u5bb9\u7684"},{"location":"installation/#vs","text":"market manual Open VS Code and go to Extensions by click the icon Input Nocalhost in the search box Select the Nocalhost Extension , and click the Install button. Download the latest version from our Github Repo Open VS Code and go to Extensions by click the icon Click on the top right of the Extension list, select Install from VSIX... , select the VSIX downloaded above Download the latest nhctl from out Github Repo , and put it under ~/.nh/bin/ then named nhctl, you need to give this binary execution permission (chmod +x ./nhctl). (the path is %homepath%/.nh/bin/ in windows, and the binary named 'nhctl.exe', no need to grant additional execution permissions under windows)","title":"\u5b89\u88c5 VS \u4ee3\u7801\u63d2\u4ef6"},{"location":"installation/#jetbrains","text":"market manual","title":"\u5b89\u88c5 Jetbrains \u63d2\u4ef6"},{"location":"installation/#windows","text":"File > Settings > Plugins > Browse repositories... > Search for \"Nocalhost\" > Install Plugin","title":"Windows"},{"location":"installation/#macos","text":"Preferences > Settings > Plugins > Browse repositories... > Search for \"Nocalhost\" > Install Plugin Download the latest version from our Github Repo Install plugin: Preferences > Plugins > Install from disk... Download the latest nhctl from out Github Repo , and put it under ~/.nh/bin/ then named nhctl, you need to give this binary execution permission (chmod +x ./nhctl). (the path is %homepath%/.nh/bin/ in windows, and the binary named 'nhctl.exe', no need to grant additional execution permissions under windows)","title":"MacOS"},{"location":"installation/#_2","text":"IDE \u542f\u52a8\u65f6\uff0cNocalhost \u5c06\u81ea\u52a8\u68c0\u67e5\u5e76\u5b89\u88c5\u6700\u65b0\u7684\u66f4\u65b0\u3002","title":"\u5347\u7ea7\u63d2\u4ef6"},{"location":"installation/#_3","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u5185\u5bb9\u5b8c\u5168\u5378\u8f7d nocalhost","title":"\u5378\u8f7d"},{"location":"installation/#ide","text":"\u5378\u8f7d IDE \u4e2d\u7684 Nocalhost IDE \u63d2\u4ef6","title":"\u5378\u8f7d IDE \u63d2\u4ef6"},{"location":"installation/#nhctl","text":"\u5220\u9664\u6839\u76ee\u5f55\u4e2d\u7684 .nh \u6587\u4ef6\u5939 mac windows .nh \u6587\u4ef6\u5939\u5728\u60a8\u7684 ~/ \u76ee\u5f55\u4e2d, \u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u5c06\u5176\u5220\u9664 rm -rf .nh .nh \u6587\u4ef6\u5939\u5728\u60a8\u7684 <ROOT PATH>/User/username/ \u76ee\u5f55\u4e2d, \u60a8\u53ef\u4ee5\u5220\u9664\u5b83.","title":"\u5220\u9664 nhctl"},{"location":"quick-start/","text":"Quick Start \u00b6 \u5173\u4e8e\u672c\u6307\u5357 Goal: \u5b89\u88c5Nocalhost\uff0c\u8bc4\u4f30\u6838\u5fc3\u529f\u80fd\u5e76\u4f53\u9a8c\u6709\u6548\u7684\u4e91\u672c\u5730\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u3002 \u4f30\u8ba1\u65f6\u95f4: 5\u5206\u949f \u8981\u6c42: Any local or remote Kubernetes cluster (minikube, Docker Desktop, TKE, GKE, EKS, AKS, Rancher, ...). Allocate at least 4 GB of memory for single-node clusters like Docker Desktop and minikube . RBAC must be enabled in the above cluster Socat should installed in the nodes for cluster (Nocalhost file synchronization depends on port-forward) Configured KubeConfig file that has namespace admin privilege Kubernetes api-server can be accessed internal and external Visual Studio Code (1.52+) 1. \u5b89\u88c5 Nocalhost VS \u4ee3\u7801\u6269\u5c55 \u00b6 \u6253\u5f00 VS \u4ee3\u7801\uff0c\u7136\u540e\u5355\u51fb\u56fe\u6807 \u8fdb\u5165\u6269\u5c55 \u5728\u641c\u7d22\u6846\u4e2d\u8f93\u5165 nocalhost \u9009\u62e9 Nocalhost Extension \uff0c\u7136\u540e\u5355\u51fb \u5b89\u88c5 \u6309\u94ae\u3002 JetBrains Plugin Nocalhost\u786e\u5b9e\u5b8c\u5168\u652f\u6301Jetbrains\uff0c\u8bf7\u53c2\u9605 \u5b89\u88c5Jetbrains\u63d2\u4ef6 . 2. \u8fde\u63a5\u5230 Kubernetes \u7fa4\u96c6 \u00b6 \u5355\u51fb\u4fa7\u9762\u9762\u677f\u4e0a\u7684 Nocalhost \u56fe\u6807 \uff0c\u6253\u5f00 Nocalhost \u63d2\u4ef6\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u4e24\u79cd\u65b9\u6cd5\u8fde\u63a5\u5230 Kubernetes \u7fa4\u96c6\uff1a \u901a\u8fc7 KubeConfig \u7c98\u8d34\u4f5c\u4e3a\u6587\u672c \u4ece\u672c\u5730\u76ee\u5f55\u4e2d\u9009\u62e9 KubeConfig \u6587\u4ef6\u3002 \u9ed8\u8ba4 KubeConfig Nocalhost\u5c06\u5c1d\u8bd5\u4ece\u60a8\u7684\u672c\u5730 \u301c/.kube/config \u52a0\u8f7d kubeconfig \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u3002 \u5c06 KubeConfig \u7c98\u8d34\u4e3a\u6587\u672c \u83b7\u53d6 KubeConfig \u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b\u60a8\u7684 KubeConfig \u5e76\u590d\u5236\u5b83\u3002 kubectl config view --raw --flatten \u6210\u529f\u52a0\u8f7d KubeConfig \u540e\uff0c\u9009\u62e9\u8981\u8bbf\u95ee\u7684\u4e0a\u4e0b\u6587\uff0c\u7136\u540e\u8fde\u63a5\u5230\u96c6\u7fa4\u3002 Nocalhost \u5c06\u81ea\u52a8\u663e\u793a\u96c6\u7fa4\u5217\u8868\u3002 3. \u8f93\u5165\u5f00\u53d1\u6a21\u5f0f \u00b6 Application \u6211\u4eec\u5728\u6b64\u5904\u4ee5BookInfo\u5e94\u7528\u7a0b\u5e8f\u4e3a\u4f8b\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u5df2\u7ecf\u90e8\u7f72\u5728Kubernetes\u7fa4\u96c6\u4e2d\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u5173\u6ce8 \u90e8\u7f72\u6f14\u793a\u5e94\u7528\u7a0b\u5e8f \u5728Kubernetes\u7fa4\u96c6\u4e2d\u90e8\u7f72\u6f14\u793a\u5e94\u7528\u7a0b\u5e8f\u3002 \u786e\u4fdd\u60a8\u5728 Kubernetes \u7fa4\u96c6\u4e2d\u6210\u529f\u90e8\u7f72\u4e86\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u7136\u540e\uff1a \u6269\u5c55\u5de5\u4f5c\u8d1f\u8f7d\u6811\uff0c\u627e\u5230\u8981\u5f00\u53d1\u7684\u5de5\u4f5c\u8d1f\u8f7d \u5355\u51fb \u5f00\u59cb Development Mode (DevMode) \u6307\u5b9a\u6e90\u4ee3\u7801\u672c\u5730\u76ee\u5f55\uff0c\u4e5f\u53ef\u4ee5\u4ece\u73b0\u6709\u7684 GIT \u5b58\u50a8\u5e93\u4e2d\u514b\u9686\u3002 Nocalhost \u5c06\u6253\u5f00\u4e00\u4e2a\u65b0\u7684 VS \u4ee3\u7801\u7a97\u53e3\uff0c\u5e76\u81ea\u52a8\u542f\u52a8 devmode \u3002 \u5173\u4e8e\u524d\u63d0 \u5982\u679c\u60a8\u6b63\u5728\u9047\u5230DevMode\u5728\u201c\u524d\u63d0K8S\u7fa4\u96c6\u201d\u4e2d\uff0c\u5219\u9700\u8981 \u914d\u7f6eSideCar\u6620\u50cf\u5730\u5740 \u5e76\u5c06\u955c\u50cf\u63a8\u5230\u60a8\u81ea\u5df1\u7684\u5b58\u50a8\u5e93\u4e2d\u3002 4. \u66f4\u6539\u4ee3\u7801\u5e76\u67e5\u770b\u7ed3\u679c \u00b6 \u5728\u8fdc\u7a0b\u5bb9\u5668\u4e2d\u6267\u884c\u4e3b\u8fdb\u7a0b \u00b6 \u5728\u8fdc\u7a0b\u7ec8\u7aef\u4e2d\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4ee5\u542f\u52a8\u4e3b\u8fdb\u7a0b sh run.sh \u4e3b\u8981\u8fc7\u7a0b \u8f93\u5165DevMode\u65f6\uff0c\u5e94\u7528\u7a0b\u5e8f\u4e3b\u8fdb\u7a0b\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u81ea\u52a8\u542f\u52a8\uff0c\u56e0\u6b64\u8be5\u5e94\u7528\u7a0b\u5e8f\u4e0d\u4f1a\u54cd\u5e94\u4efb\u4f55\u8bf7\u6c42\u3002\u60a8\u9700\u8981\u624b\u52a8\u542f\u52a8\u4e3b\u8fc7\u7a0b\uff0c\u7136\u540e\u624d\u80fd\u8bbf\u95ee\u5b83\u3002 \u5728\u60a8\u7684 Web \u6d4f\u89c8\u5668\u4e2d\u67e5\u770b http://127.0.1:39080 \u4e0a\u7684\u8fd0\u884c\u7ed3\u679c Port-Forwarding \u5728\u6211\u4eec\u7684\u201cBookinfo\u201d\u6f14\u793a\u4e2ddemo, \u6211\u4eec\u5df2\u7ecf\u5c06Port-Forward\u8bbe\u7f6e\u4e3a39080:9080, \u8fd9\u610f\u5473\u7740Nocalhost\u5c06\u81ea\u52a8\u5c06\u6570\u636e\u4ece\u672c\u5730\u7aef\u53e3 39080 \u8f6c\u53d1\u5230\u7aef\u53e3 9080 . \u66f4\u6539\u4ee3\u7801 \u00b6 \u4fee\u6539 productPage.py \u4e2d\u7684\u4ee3\u7801\uff0c\u5e76\u67e5\u770b Web \u6d4f\u89c8\u5668\u4e2d\u7684\u66f4\u6539\u3002 \u4e0d\u8981 \u5fd8\u8bb0\u4fdd\u5b58\u66f4\u6539\u3002 \u5237\u65b0\u7f51\u7edc\u6d4f\u89c8\u5668\u5e76\u67e5\u770b\u4ee3\u7801\u66f4\u6539 \ud83d\udc4d \u606d\u559c! \u4f60\u4eec\u90fd\u51c6\u5907\u53bb \u4e0b\u4e00\u6b65\u662f\u4ec0\u4e48\uff1f \u00b6 \u8bf7\u53c2\u9605 Nocalhost \u7684 \u7b80\u4ecb \u8bbf\u95ee\u6211\u4eec\u7684 github repo \u52a0\u5165\u6211\u4eec\u7684 Slack \u6216\u626b\u63cf\u4ee3\u7801\u4ee5\u52a0\u5165\u6211\u4eec\u7684\u5fae\u4fe1\u7ec4","title":"\u5feb\u901f\u5165\u95e8"},{"location":"quick-start/#quick-start","text":"\u5173\u4e8e\u672c\u6307\u5357 Goal: \u5b89\u88c5Nocalhost\uff0c\u8bc4\u4f30\u6838\u5fc3\u529f\u80fd\u5e76\u4f53\u9a8c\u6709\u6548\u7684\u4e91\u672c\u5730\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u3002 \u4f30\u8ba1\u65f6\u95f4: 5\u5206\u949f \u8981\u6c42: Any local or remote Kubernetes cluster (minikube, Docker Desktop, TKE, GKE, EKS, AKS, Rancher, ...). Allocate at least 4 GB of memory for single-node clusters like Docker Desktop and minikube . RBAC must be enabled in the above cluster Socat should installed in the nodes for cluster (Nocalhost file synchronization depends on port-forward) Configured KubeConfig file that has namespace admin privilege Kubernetes api-server can be accessed internal and external Visual Studio Code (1.52+)","title":"Quick Start"},{"location":"quick-start/#1-nocalhost-vs","text":"\u6253\u5f00 VS \u4ee3\u7801\uff0c\u7136\u540e\u5355\u51fb\u56fe\u6807 \u8fdb\u5165\u6269\u5c55 \u5728\u641c\u7d22\u6846\u4e2d\u8f93\u5165 nocalhost \u9009\u62e9 Nocalhost Extension \uff0c\u7136\u540e\u5355\u51fb \u5b89\u88c5 \u6309\u94ae\u3002 JetBrains Plugin Nocalhost\u786e\u5b9e\u5b8c\u5168\u652f\u6301Jetbrains\uff0c\u8bf7\u53c2\u9605 \u5b89\u88c5Jetbrains\u63d2\u4ef6 .","title":"1. \u5b89\u88c5 Nocalhost VS \u4ee3\u7801\u6269\u5c55"},{"location":"quick-start/#2-kubernetes","text":"\u5355\u51fb\u4fa7\u9762\u9762\u677f\u4e0a\u7684 Nocalhost \u56fe\u6807 \uff0c\u6253\u5f00 Nocalhost \u63d2\u4ef6\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u4e24\u79cd\u65b9\u6cd5\u8fde\u63a5\u5230 Kubernetes \u7fa4\u96c6\uff1a \u901a\u8fc7 KubeConfig \u7c98\u8d34\u4f5c\u4e3a\u6587\u672c \u4ece\u672c\u5730\u76ee\u5f55\u4e2d\u9009\u62e9 KubeConfig \u6587\u4ef6\u3002 \u9ed8\u8ba4 KubeConfig Nocalhost\u5c06\u5c1d\u8bd5\u4ece\u60a8\u7684\u672c\u5730 \u301c/.kube/config \u52a0\u8f7d kubeconfig \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u3002 \u5c06 KubeConfig \u7c98\u8d34\u4e3a\u6587\u672c \u83b7\u53d6 KubeConfig \u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b\u60a8\u7684 KubeConfig \u5e76\u590d\u5236\u5b83\u3002 kubectl config view --raw --flatten \u6210\u529f\u52a0\u8f7d KubeConfig \u540e\uff0c\u9009\u62e9\u8981\u8bbf\u95ee\u7684\u4e0a\u4e0b\u6587\uff0c\u7136\u540e\u8fde\u63a5\u5230\u96c6\u7fa4\u3002 Nocalhost \u5c06\u81ea\u52a8\u663e\u793a\u96c6\u7fa4\u5217\u8868\u3002","title":"2. \u8fde\u63a5\u5230 Kubernetes \u7fa4\u96c6"},{"location":"quick-start/#3","text":"Application \u6211\u4eec\u5728\u6b64\u5904\u4ee5BookInfo\u5e94\u7528\u7a0b\u5e8f\u4e3a\u4f8b\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u5df2\u7ecf\u90e8\u7f72\u5728Kubernetes\u7fa4\u96c6\u4e2d\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u5173\u6ce8 \u90e8\u7f72\u6f14\u793a\u5e94\u7528\u7a0b\u5e8f \u5728Kubernetes\u7fa4\u96c6\u4e2d\u90e8\u7f72\u6f14\u793a\u5e94\u7528\u7a0b\u5e8f\u3002 \u786e\u4fdd\u60a8\u5728 Kubernetes \u7fa4\u96c6\u4e2d\u6210\u529f\u90e8\u7f72\u4e86\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u7136\u540e\uff1a \u6269\u5c55\u5de5\u4f5c\u8d1f\u8f7d\u6811\uff0c\u627e\u5230\u8981\u5f00\u53d1\u7684\u5de5\u4f5c\u8d1f\u8f7d \u5355\u51fb \u5f00\u59cb Development Mode (DevMode) \u6307\u5b9a\u6e90\u4ee3\u7801\u672c\u5730\u76ee\u5f55\uff0c\u4e5f\u53ef\u4ee5\u4ece\u73b0\u6709\u7684 GIT \u5b58\u50a8\u5e93\u4e2d\u514b\u9686\u3002 Nocalhost \u5c06\u6253\u5f00\u4e00\u4e2a\u65b0\u7684 VS \u4ee3\u7801\u7a97\u53e3\uff0c\u5e76\u81ea\u52a8\u542f\u52a8 devmode \u3002 \u5173\u4e8e\u524d\u63d0 \u5982\u679c\u60a8\u6b63\u5728\u9047\u5230DevMode\u5728\u201c\u524d\u63d0K8S\u7fa4\u96c6\u201d\u4e2d\uff0c\u5219\u9700\u8981 \u914d\u7f6eSideCar\u6620\u50cf\u5730\u5740 \u5e76\u5c06\u955c\u50cf\u63a8\u5230\u60a8\u81ea\u5df1\u7684\u5b58\u50a8\u5e93\u4e2d\u3002","title":"3. \u8f93\u5165\u5f00\u53d1\u6a21\u5f0f"},{"location":"quick-start/#4","text":"","title":"4. \u66f4\u6539\u4ee3\u7801\u5e76\u67e5\u770b\u7ed3\u679c"},{"location":"quick-start/#_1","text":"\u5728\u8fdc\u7a0b\u7ec8\u7aef\u4e2d\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4ee5\u542f\u52a8\u4e3b\u8fdb\u7a0b sh run.sh \u4e3b\u8981\u8fc7\u7a0b \u8f93\u5165DevMode\u65f6\uff0c\u5e94\u7528\u7a0b\u5e8f\u4e3b\u8fdb\u7a0b\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u81ea\u52a8\u542f\u52a8\uff0c\u56e0\u6b64\u8be5\u5e94\u7528\u7a0b\u5e8f\u4e0d\u4f1a\u54cd\u5e94\u4efb\u4f55\u8bf7\u6c42\u3002\u60a8\u9700\u8981\u624b\u52a8\u542f\u52a8\u4e3b\u8fc7\u7a0b\uff0c\u7136\u540e\u624d\u80fd\u8bbf\u95ee\u5b83\u3002 \u5728\u60a8\u7684 Web \u6d4f\u89c8\u5668\u4e2d\u67e5\u770b http://127.0.1:39080 \u4e0a\u7684\u8fd0\u884c\u7ed3\u679c Port-Forwarding \u5728\u6211\u4eec\u7684\u201cBookinfo\u201d\u6f14\u793a\u4e2ddemo, \u6211\u4eec\u5df2\u7ecf\u5c06Port-Forward\u8bbe\u7f6e\u4e3a39080:9080, \u8fd9\u610f\u5473\u7740Nocalhost\u5c06\u81ea\u52a8\u5c06\u6570\u636e\u4ece\u672c\u5730\u7aef\u53e3 39080 \u8f6c\u53d1\u5230\u7aef\u53e3 9080 .","title":"\u5728\u8fdc\u7a0b\u5bb9\u5668\u4e2d\u6267\u884c\u4e3b\u8fdb\u7a0b"},{"location":"quick-start/#_2","text":"\u4fee\u6539 productPage.py \u4e2d\u7684\u4ee3\u7801\uff0c\u5e76\u67e5\u770b Web \u6d4f\u89c8\u5668\u4e2d\u7684\u66f4\u6539\u3002 \u4e0d\u8981 \u5fd8\u8bb0\u4fdd\u5b58\u66f4\u6539\u3002 \u5237\u65b0\u7f51\u7edc\u6d4f\u89c8\u5668\u5e76\u67e5\u770b\u4ee3\u7801\u66f4\u6539 \ud83d\udc4d \u606d\u559c! \u4f60\u4eec\u90fd\u51c6\u5907\u53bb","title":"\u66f4\u6539\u4ee3\u7801"},{"location":"quick-start/#_3","text":"\u8bf7\u53c2\u9605 Nocalhost \u7684 \u7b80\u4ecb \u8bbf\u95ee\u6211\u4eec\u7684 github repo \u52a0\u5165\u6211\u4eec\u7684 Slack \u6216\u626b\u63cf\u4ee3\u7801\u4ee5\u52a0\u5165\u6211\u4eec\u7684\u5fae\u4fe1\u7ec4","title":"\u4e0b\u4e00\u6b65\u662f\u4ec0\u4e48\uff1f"},{"location":"changelogs/0.4.x/","text":"0.4.x \u00b6 0.4.19 (2021-08-03) \u00b6 nhctl \u00b6 Built syncthing bin package into nhctl Supports multiple hooks in the application life cycle Supports cluster status checking Supports JetBrains PHP remote debugging VS Code \u00b6 Add icon for syncService Add status for cluster Add guide information when there is no cluster Fixed the ssh trust problem when installing application for the first time Fixed the run command Fixed failing to get config of statefulset Fixed status icon of statefulset displaying incorrectly JetBrains \u00b6 Supports JetBrains IDEs 2021.2 Supports namespace PVC clear Host key checking skip for cloning git repository over SSH A more friendly notification for nhctl command messages Add PHP remote debugging supports Add cluster status display Add guide message NPEs 0.4.18 (2021-07-23) \u00b6 nhctl \u00b6 Fixed the applications list error caused by unstable network connection Fixed the get resource freeze issue 0.4.14 (2021-07-07) \u00b6 nhctl \u00b6 Fixed statefulset port-forward failure issue. Fixed the issue Firewall alert will be triggered when update nhctl or restart Daemon in Windows system Fixed the issue where null pointer caused the daemon to exit Disable the execution of cronjob tasks when cronjob enters DevMode Execute helm repo update command before install helm application Combine all waiting job init_container to one nocalhost config supports complex (any form of yaml) helm values Supports WEB/Plugin status token refresh Add terminal reconnection features, support automatic reconnection after computer sleep and network disconnection VS Code \u00b6 JetBrains \u00b6 0.4.13 (2021-07-07) \u00b6 nhctl \u00b6 Fixed: the issue of missing development status JetBrains \u00b6 Fixed: YAML parse error Fixed: nhctl download on windows Fixed: display cluster account info on tool tip instead of node name Supports add notification after copying terminal 0.4.11 (2021-06-29) \u00b6 nhctl \u00b6 Optimize test case Supports annotations configuration Supports Helm application install/uninstall in Nocalhost VS Code \u00b6 Supports install standalone app Supports Job/CronJob/Pod enter DevMode Supports Application Port-Forward management Supports VSCode Workspace trust JetBrains \u00b6 Fixed: error causes by empty server version Fixed: complete config read only conditions Fixed: filter application config file by parsing file content and checking application name Supports rename standalone cluster Supports install standalone app Supports open multiple consoles for the same container Supports Job/CronJob/Pod enter DevMode Start dev mode without waiting for pods ready 0.4.10 (2021-06-24) \u00b6 nhctl \u00b6 Fixed: When port-froward does not has permission and fails, but displayed successfully issue Fixed: Port-forwarded to api-server of http protocal failure issue Removed yaml plugin dependency, solve the initialization issue in some version VS Code \u00b6 Tree menu is rendering by nhctl now JetBrains \u00b6 Supports install Application in standalone version Supports Job/CronJob/Pod enter DevMode Support PortForwrd management in Application 0.4.9 (2021-06-04) \u00b6 nhctl \u00b6 nhctl supports DaemonSet to enter DevMode VS Code \u00b6 Fixed: the server cluster query log issue Fixed: multiple download boxes issue Fixed: add sudo while starting port forward for port less than 1024 Remove kubectl dependency JetBrains \u00b6 Fixed: replace snakeyaml with nhctl yaml on tree rendering Fixed: fail to start dev mode on windows Fixed: check process termination before sending ctrl+c Fixed: fail to create kubeconfig on windows Supports DaemonSet enter DevMode Supports to check server version when listing applications Supports use application type from server Add open project action for workloads in dev mode 0.4.8 (2021-06-08) \u00b6 nhctl \u00b6 Fixed: failed to clear all PVCs issue Fixed: helmRepo application failed to upgrade issue 0.4.7 (2021-06-04) \u00b6 nhctl \u00b6 Supports to display Helm app in IDEA Supports read nocalhostConfig by cm has the highest priority Supports smooth upgrade of Windows Supports dev parameters of configmap type Supports read configuration file from source code Supports read configuration file from configmap Supports user values file when using helm upgrade VS Code \u00b6 Fixed \"Passing undefined parameters when cleaning up all pvc\" issue JetBrains \u00b6 Optimize performance Fixed: extend sync status update interval Fixed: project settings saving 0.4.6 (2021-06-02) \u00b6 nhctl \u00b6 Fixed the \"ignore pattern\" issue Cluster config supports preview on the web Sorted the context of kubeconfig returned by the API Optimized the tree display and features VS Code \u00b6 Support clearing the pvc of DevSpace Fixed \"lock downloading nhctl file\" issue Fixed \"statefulSet state display error\" issue Fixed \"keep configuration notes\" issue Fixed \"statefulSet file sync\" issue JetBrains \u00b6 Fixed \"mute application not found error while refreshing tree\" issue Fixed \"add controller type to nhctl command while starting run/debug\" issue Fixed \"make resume and override sync status asynchronously\" issue Fixed \"NPE while nhctl getting resources\" issue Fixed \"lock downloading nhctl file\" issue Fixed: \"frozen after dev start\" issue Reactor: Replace kubectl with nhctl 0.4.5 (2021-05-27) \u00b6 nhctl \u00b6 dev start supports full path Add Sidecar fixed resource limitation (CPU: 200, MEM: 200) Fixed ths issue that the special typing of syncthing ignore cannot be recognized VS Code \u00b6 Supports nhctl automatic upgrade Supports multi-user collaboration mode Supports to enter DevMode in StatefulSets Fixed the apply failure issues Fixed the unsync issue of statefulSet in DevMode JetBrains \u00b6 Supports nhctl automatic upgrade Supports multi-user collaboration mode Supports to enter DevMode in StatefulSets 0.4.4 (2021-05-25) \u00b6 \ud83d\udc1b Bug Fixed Fixed minor issues in 0.4.3 release 0.4.3 (2021-05-24) \u00b6 \ud83d\ude80 New Feature Release \u201cstandalone version\u201d. Now can start application development by just add KubeConfig for existing Kubernetes clusters and workloads IDE plugin now will install nhctl automatically Supports to enter DevMode in StatefulSets (VSCode only) \ud83d\udc1b Bug Fixed Fixed file synchronization stability issue Fixed the port forwarding issue \u201cnot manager by this daemon\u201d issue Fixed the port forwarding failed to exit issue Optimize JetBrains plugin performance","title":"0.4.x"},{"location":"changelogs/0.4.x/#04x","text":"","title":"0.4.x"},{"location":"changelogs/0.4.x/#0419-2021-08-03","text":"","title":"0.4.19 (2021-08-03)"},{"location":"changelogs/0.4.x/#nhctl","text":"Built syncthing bin package into nhctl Supports multiple hooks in the application life cycle Supports cluster status checking Supports JetBrains PHP remote debugging","title":"nhctl"},{"location":"changelogs/0.4.x/#vs-code","text":"Add icon for syncService Add status for cluster Add guide information when there is no cluster Fixed the ssh trust problem when installing application for the first time Fixed the run command Fixed failing to get config of statefulset Fixed status icon of statefulset displaying incorrectly","title":"VS Code"},{"location":"changelogs/0.4.x/#jetbrains","text":"Supports JetBrains IDEs 2021.2 Supports namespace PVC clear Host key checking skip for cloning git repository over SSH A more friendly notification for nhctl command messages Add PHP remote debugging supports Add cluster status display Add guide message NPEs","title":"JetBrains"},{"location":"changelogs/0.4.x/#0418-2021-07-23","text":"","title":"0.4.18 (2021-07-23)"},{"location":"changelogs/0.4.x/#nhctl_1","text":"Fixed the applications list error caused by unstable network connection Fixed the get resource freeze issue","title":"nhctl"},{"location":"changelogs/0.4.x/#0414-2021-07-07","text":"","title":"0.4.14 (2021-07-07)"},{"location":"changelogs/0.4.x/#nhctl_2","text":"Fixed statefulset port-forward failure issue. Fixed the issue Firewall alert will be triggered when update nhctl or restart Daemon in Windows system Fixed the issue where null pointer caused the daemon to exit Disable the execution of cronjob tasks when cronjob enters DevMode Execute helm repo update command before install helm application Combine all waiting job init_container to one nocalhost config supports complex (any form of yaml) helm values Supports WEB/Plugin status token refresh Add terminal reconnection features, support automatic reconnection after computer sleep and network disconnection","title":"nhctl"},{"location":"changelogs/0.4.x/#vs-code_1","text":"","title":"VS Code"},{"location":"changelogs/0.4.x/#jetbrains_1","text":"","title":"JetBrains"},{"location":"changelogs/0.4.x/#0413-2021-07-07","text":"","title":"0.4.13 (2021-07-07)"},{"location":"changelogs/0.4.x/#nhctl_3","text":"Fixed: the issue of missing development status","title":"nhctl"},{"location":"changelogs/0.4.x/#jetbrains_2","text":"Fixed: YAML parse error Fixed: nhctl download on windows Fixed: display cluster account info on tool tip instead of node name Supports add notification after copying terminal","title":"JetBrains"},{"location":"changelogs/0.4.x/#0411-2021-06-29","text":"","title":"0.4.11 (2021-06-29)"},{"location":"changelogs/0.4.x/#nhctl_4","text":"Optimize test case Supports annotations configuration Supports Helm application install/uninstall in Nocalhost","title":"nhctl"},{"location":"changelogs/0.4.x/#vs-code_2","text":"Supports install standalone app Supports Job/CronJob/Pod enter DevMode Supports Application Port-Forward management Supports VSCode Workspace trust","title":"VS Code"},{"location":"changelogs/0.4.x/#jetbrains_3","text":"Fixed: error causes by empty server version Fixed: complete config read only conditions Fixed: filter application config file by parsing file content and checking application name Supports rename standalone cluster Supports install standalone app Supports open multiple consoles for the same container Supports Job/CronJob/Pod enter DevMode Start dev mode without waiting for pods ready","title":"JetBrains"},{"location":"changelogs/0.4.x/#0410-2021-06-24","text":"","title":"0.4.10 (2021-06-24)"},{"location":"changelogs/0.4.x/#nhctl_5","text":"Fixed: When port-froward does not has permission and fails, but displayed successfully issue Fixed: Port-forwarded to api-server of http protocal failure issue Removed yaml plugin dependency, solve the initialization issue in some version","title":"nhctl"},{"location":"changelogs/0.4.x/#vs-code_3","text":"Tree menu is rendering by nhctl now","title":"VS Code"},{"location":"changelogs/0.4.x/#jetbrains_4","text":"Supports install Application in standalone version Supports Job/CronJob/Pod enter DevMode Support PortForwrd management in Application","title":"JetBrains"},{"location":"changelogs/0.4.x/#049-2021-06-04","text":"","title":"0.4.9 (2021-06-04)"},{"location":"changelogs/0.4.x/#nhctl_6","text":"nhctl supports DaemonSet to enter DevMode","title":"nhctl"},{"location":"changelogs/0.4.x/#vs-code_4","text":"Fixed: the server cluster query log issue Fixed: multiple download boxes issue Fixed: add sudo while starting port forward for port less than 1024 Remove kubectl dependency","title":"VS Code"},{"location":"changelogs/0.4.x/#jetbrains_5","text":"Fixed: replace snakeyaml with nhctl yaml on tree rendering Fixed: fail to start dev mode on windows Fixed: check process termination before sending ctrl+c Fixed: fail to create kubeconfig on windows Supports DaemonSet enter DevMode Supports to check server version when listing applications Supports use application type from server Add open project action for workloads in dev mode","title":"JetBrains"},{"location":"changelogs/0.4.x/#048-2021-06-08","text":"","title":"0.4.8 (2021-06-08)"},{"location":"changelogs/0.4.x/#nhctl_7","text":"Fixed: failed to clear all PVCs issue Fixed: helmRepo application failed to upgrade issue","title":"nhctl"},{"location":"changelogs/0.4.x/#047-2021-06-04","text":"","title":"0.4.7 (2021-06-04)"},{"location":"changelogs/0.4.x/#nhctl_8","text":"Supports to display Helm app in IDEA Supports read nocalhostConfig by cm has the highest priority Supports smooth upgrade of Windows Supports dev parameters of configmap type Supports read configuration file from source code Supports read configuration file from configmap Supports user values file when using helm upgrade","title":"nhctl"},{"location":"changelogs/0.4.x/#vs-code_5","text":"Fixed \"Passing undefined parameters when cleaning up all pvc\" issue","title":"VS Code"},{"location":"changelogs/0.4.x/#jetbrains_6","text":"Optimize performance Fixed: extend sync status update interval Fixed: project settings saving","title":"JetBrains"},{"location":"changelogs/0.4.x/#046-2021-06-02","text":"","title":"0.4.6 (2021-06-02)"},{"location":"changelogs/0.4.x/#nhctl_9","text":"Fixed the \"ignore pattern\" issue Cluster config supports preview on the web Sorted the context of kubeconfig returned by the API Optimized the tree display and features","title":"nhctl"},{"location":"changelogs/0.4.x/#vs-code_6","text":"Support clearing the pvc of DevSpace Fixed \"lock downloading nhctl file\" issue Fixed \"statefulSet state display error\" issue Fixed \"keep configuration notes\" issue Fixed \"statefulSet file sync\" issue","title":"VS Code"},{"location":"changelogs/0.4.x/#jetbrains_7","text":"Fixed \"mute application not found error while refreshing tree\" issue Fixed \"add controller type to nhctl command while starting run/debug\" issue Fixed \"make resume and override sync status asynchronously\" issue Fixed \"NPE while nhctl getting resources\" issue Fixed \"lock downloading nhctl file\" issue Fixed: \"frozen after dev start\" issue Reactor: Replace kubectl with nhctl","title":"JetBrains"},{"location":"changelogs/0.4.x/#045-2021-05-27","text":"","title":"0.4.5 (2021-05-27)"},{"location":"changelogs/0.4.x/#nhctl_10","text":"dev start supports full path Add Sidecar fixed resource limitation (CPU: 200, MEM: 200) Fixed ths issue that the special typing of syncthing ignore cannot be recognized","title":"nhctl"},{"location":"changelogs/0.4.x/#vs-code_7","text":"Supports nhctl automatic upgrade Supports multi-user collaboration mode Supports to enter DevMode in StatefulSets Fixed the apply failure issues Fixed the unsync issue of statefulSet in DevMode","title":"VS Code"},{"location":"changelogs/0.4.x/#jetbrains_8","text":"Supports nhctl automatic upgrade Supports multi-user collaboration mode Supports to enter DevMode in StatefulSets","title":"JetBrains"},{"location":"changelogs/0.4.x/#044-2021-05-25","text":"\ud83d\udc1b Bug Fixed Fixed minor issues in 0.4.3 release","title":"0.4.4 (2021-05-25)"},{"location":"changelogs/0.4.x/#043-2021-05-24","text":"\ud83d\ude80 New Feature Release \u201cstandalone version\u201d. Now can start application development by just add KubeConfig for existing Kubernetes clusters and workloads IDE plugin now will install nhctl automatically Supports to enter DevMode in StatefulSets (VSCode only) \ud83d\udc1b Bug Fixed Fixed file synchronization stability issue Fixed the port forwarding issue \u201cnot manager by this daemon\u201d issue Fixed the port forwarding failed to exit issue Optimize JetBrains plugin performance","title":"0.4.3 (2021-05-24)"},{"location":"changelogs/0.5.x/","text":"0.5.x \u00b6 0.5.10 (2021-10-09) \u00b6 Fixed log archive issue in Windows Fixed the default.application issue (Nocalhost Server) Fixed the Cluster has not found issue in the Nocalhost Dashboard when Nocalhost has not initialized the cluster 0.5.9 (2021-09-26) \u00b6 Fixed null pointer issue when getting configuration 0.5.7 (2021-09-22) \u00b6 Hotfix \u00b6 Fixed the issue that none-existence of leveldb in Windows Fix the two-way synchronization issue 0.5.6 (2021-09-16) \u00b6 New Features \u00b6 New Server Dashboard New features for Nocalhost Server: Supports create service mesh DevSpace - MeshSpace Supports share DevSpace Allow all user create Cluster, Application and DevSpace Supports upgrade Nocalhost Server by nhctl Nocalhost configuration will now save in Kubernetes cluster, not in local anymore Supports deployment configuration, configure in Annotations and ConfigMap Supports HotReload features in JetBrains' IDE Supports remote debug for Node.js in WebStorm and IntelliJ IDEA Refactor & Improvement \u00b6 Environment Migration Optimized the speed of obtaining cluster data for the first time Optimized the state confusion issue caused by the consistency of Ns definition and App definition between different clusters Optimized and unified Nocalhost configuration rendering logic Optimized the error notification in JetBrains' IDE Bug Fixes \u00b6 Fixed container selector issue when opening or associate directory Fixed sync missing resourceType parameter issue Fixed the helm values issues in JetBrains' IDE 0.5.5 (2021-09-02) \u00b6 nhctl \u00b6 New Features \u00b6 Supports to generate namespace level KubeConfig Refactor & Improvement \u00b6 exec command supports to execute of all Kubernetes workload types Bug Fixes \u00b6 Fixed the issue of incorrect value cased by concurrency during port-forwarding recovery Fixed the issue that caused nhctl daemon panic to be stacking Fixed the issue that --wait can not take effect when port-forwarding is not connecting JetBrains \u00b6 Refactor & Improvement \u00b6 Supports debugging different type of workloads Bug Fixes \u00b6 Fixed the path issue in Windows 0.5.4 \uff082021-08-30\uff09 \u00b6 nhctl \u00b6 New Features \u00b6 Supports to get development configuration from nocalhost-hub Refactor & Improvement \u00b6 Optimize the daemon startup speed exec supports the use of remote Pod env variables Bug Fixes \u00b6 Fixed the long waiting issue of using the get command Fixed the issue of empty tree structure caused by unavailable apiservice VS Code \u00b6 New Features \u00b6 Automatically switch to GitHub release when failed download plugin from CODING Refactor & Improvement \u00b6 Optimize the cluster inspector performance and user experience nhctl unified storage file sync related configuration Bug Fixes \u00b6 Fixed the error notification \"Failed to get node configs, please try again\" Fixed the use of appName issue JetBrains \u00b6 New Features \u00b6 Switch to github artifact while failing to download nhctl from coding artifact Show info while no application found Made actions cancelable Auto scroll tree path to visible while starting dev mode in new window Refactor & Improvement \u00b6 Improve python remote debug experience Show port forward status Unify developing status in UI Add timeout to nhctl get commands Add missing actions to default application Hide unauthorized actions for dev space viewer Unify UI texts Bug Fixes \u00b6 Fixed the failure issue on starting run/debug while workload not fully started Fixed the issue when KubeConfig missing while setting associate 0.5.1 (2021-08-16) \u00b6 nhctl \u00b6 New Features \u00b6 Add syncthing bin package into nhctl soudao Supports multiple hooks in the application life cycle Supports to check cluster status Supports JetBrains PHP debugging VS Code \u00b6 New Features \u00b6 Add cluster status Add guidance of No cluster information Refactor & Improvement \u00b6 Optimize syncService icon Optimize access to apps and increase opening speed Optimize plugin descriptions Bug Fixes \u00b6 Fixed the trust issue when installing ssh for the first time Fixed the notification issue of Open Project is not associated with a target Fixed run command Fixed the config issue of StatefulSet JetBrains \u00b6 New Features \u00b6 Automatically open browser after installed Demo App Add cluster status Supports clearing namespace PVC Add nhctl error message pop-up feature Add supports to JetBrains IDEs 2021.2 Refactor & Improvement \u00b6 Modify the NPE that appears when the tree menu is rendered Optimize PHP debug Bug Fixes \u00b6 Fixed list workload PVC issue","title":"0.5.x"},{"location":"changelogs/0.5.x/#05x","text":"","title":"0.5.x"},{"location":"changelogs/0.5.x/#0510-2021-10-09","text":"Fixed log archive issue in Windows Fixed the default.application issue (Nocalhost Server) Fixed the Cluster has not found issue in the Nocalhost Dashboard when Nocalhost has not initialized the cluster","title":"0.5.10 (2021-10-09)"},{"location":"changelogs/0.5.x/#059-2021-09-26","text":"Fixed null pointer issue when getting configuration","title":"0.5.9 (2021-09-26)"},{"location":"changelogs/0.5.x/#057-2021-09-22","text":"","title":"0.5.7 (2021-09-22)"},{"location":"changelogs/0.5.x/#hotfix","text":"Fixed the issue that none-existence of leveldb in Windows Fix the two-way synchronization issue","title":"Hotfix"},{"location":"changelogs/0.5.x/#056-2021-09-16","text":"","title":"0.5.6 (2021-09-16)"},{"location":"changelogs/0.5.x/#new-features","text":"New Server Dashboard New features for Nocalhost Server: Supports create service mesh DevSpace - MeshSpace Supports share DevSpace Allow all user create Cluster, Application and DevSpace Supports upgrade Nocalhost Server by nhctl Nocalhost configuration will now save in Kubernetes cluster, not in local anymore Supports deployment configuration, configure in Annotations and ConfigMap Supports HotReload features in JetBrains' IDE Supports remote debug for Node.js in WebStorm and IntelliJ IDEA","title":"New Features"},{"location":"changelogs/0.5.x/#refactor-improvement","text":"Environment Migration Optimized the speed of obtaining cluster data for the first time Optimized the state confusion issue caused by the consistency of Ns definition and App definition between different clusters Optimized and unified Nocalhost configuration rendering logic Optimized the error notification in JetBrains' IDE","title":"Refactor &amp; Improvement"},{"location":"changelogs/0.5.x/#bug-fixes","text":"Fixed container selector issue when opening or associate directory Fixed sync missing resourceType parameter issue Fixed the helm values issues in JetBrains' IDE","title":"Bug Fixes"},{"location":"changelogs/0.5.x/#055-2021-09-02","text":"","title":"0.5.5 (2021-09-02)"},{"location":"changelogs/0.5.x/#nhctl","text":"","title":"nhctl"},{"location":"changelogs/0.5.x/#new-features_1","text":"Supports to generate namespace level KubeConfig","title":"New Features"},{"location":"changelogs/0.5.x/#refactor-improvement_1","text":"exec command supports to execute of all Kubernetes workload types","title":"Refactor &amp; Improvement"},{"location":"changelogs/0.5.x/#bug-fixes_1","text":"Fixed the issue of incorrect value cased by concurrency during port-forwarding recovery Fixed the issue that caused nhctl daemon panic to be stacking Fixed the issue that --wait can not take effect when port-forwarding is not connecting","title":"Bug Fixes"},{"location":"changelogs/0.5.x/#jetbrains","text":"","title":"JetBrains"},{"location":"changelogs/0.5.x/#refactor-improvement_2","text":"Supports debugging different type of workloads","title":"Refactor &amp; Improvement"},{"location":"changelogs/0.5.x/#bug-fixes_2","text":"Fixed the path issue in Windows","title":"Bug Fixes"},{"location":"changelogs/0.5.x/#054-2021-08-30","text":"","title":"0.5.4 \uff082021-08-30\uff09"},{"location":"changelogs/0.5.x/#nhctl_1","text":"","title":"nhctl"},{"location":"changelogs/0.5.x/#new-features_2","text":"Supports to get development configuration from nocalhost-hub","title":"New Features"},{"location":"changelogs/0.5.x/#refactor-improvement_3","text":"Optimize the daemon startup speed exec supports the use of remote Pod env variables","title":"Refactor &amp; Improvement"},{"location":"changelogs/0.5.x/#bug-fixes_3","text":"Fixed the long waiting issue of using the get command Fixed the issue of empty tree structure caused by unavailable apiservice","title":"Bug Fixes"},{"location":"changelogs/0.5.x/#vs-code","text":"","title":"VS Code"},{"location":"changelogs/0.5.x/#new-features_3","text":"Automatically switch to GitHub release when failed download plugin from CODING","title":"New Features"},{"location":"changelogs/0.5.x/#refactor-improvement_4","text":"Optimize the cluster inspector performance and user experience nhctl unified storage file sync related configuration","title":"Refactor &amp; Improvement"},{"location":"changelogs/0.5.x/#bug-fixes_4","text":"Fixed the error notification \"Failed to get node configs, please try again\" Fixed the use of appName issue","title":"Bug Fixes"},{"location":"changelogs/0.5.x/#jetbrains_1","text":"","title":"JetBrains"},{"location":"changelogs/0.5.x/#new-features_4","text":"Switch to github artifact while failing to download nhctl from coding artifact Show info while no application found Made actions cancelable Auto scroll tree path to visible while starting dev mode in new window","title":"New Features"},{"location":"changelogs/0.5.x/#refactor-improvement_5","text":"Improve python remote debug experience Show port forward status Unify developing status in UI Add timeout to nhctl get commands Add missing actions to default application Hide unauthorized actions for dev space viewer Unify UI texts","title":"Refactor &amp; Improvement"},{"location":"changelogs/0.5.x/#bug-fixes_5","text":"Fixed the failure issue on starting run/debug while workload not fully started Fixed the issue when KubeConfig missing while setting associate","title":"Bug Fixes"},{"location":"changelogs/0.5.x/#051-2021-08-16","text":"","title":"0.5.1 (2021-08-16)"},{"location":"changelogs/0.5.x/#nhctl_2","text":"","title":"nhctl"},{"location":"changelogs/0.5.x/#new-features_5","text":"Add syncthing bin package into nhctl soudao Supports multiple hooks in the application life cycle Supports to check cluster status Supports JetBrains PHP debugging","title":"New Features"},{"location":"changelogs/0.5.x/#vs-code_1","text":"","title":"VS Code"},{"location":"changelogs/0.5.x/#new-features_6","text":"Add cluster status Add guidance of No cluster information","title":"New Features"},{"location":"changelogs/0.5.x/#refactor-improvement_6","text":"Optimize syncService icon Optimize access to apps and increase opening speed Optimize plugin descriptions","title":"Refactor &amp; Improvement"},{"location":"changelogs/0.5.x/#bug-fixes_6","text":"Fixed the trust issue when installing ssh for the first time Fixed the notification issue of Open Project is not associated with a target Fixed run command Fixed the config issue of StatefulSet","title":"Bug Fixes"},{"location":"changelogs/0.5.x/#jetbrains_2","text":"","title":"JetBrains"},{"location":"changelogs/0.5.x/#new-features_7","text":"Automatically open browser after installed Demo App Add cluster status Supports clearing namespace PVC Add nhctl error message pop-up feature Add supports to JetBrains IDEs 2021.2","title":"New Features"},{"location":"changelogs/0.5.x/#refactor-improvement_7","text":"Modify the NPE that appears when the tree menu is rendered Optimize PHP debug","title":"Refactor &amp; Improvement"},{"location":"changelogs/0.5.x/#bug-fixes_7","text":"Fixed list workload PVC issue","title":"Bug Fixes"},{"location":"changelogs/0.6.x/","text":"0.6.18 (2022-04.18) \u00b6 New Features: \u00b6 Support import namespace and users Add Mesh devMode 0.6.16 (2022-03.25) \u00b6 New Features: \u00b6 Support linux arm64 platform Support VPN proxy for CRD Support special program language in DevConfig Add entrance to display local syncthing admin page Experience optimization: \u00b6 Optimize experience of adding cluster Fix Jetbrains Java debugger print progress issue 0.6.12 (2022-01.12) \u00b6 New Features: \u00b6 Supports CRD development Supports intercept traffic to local (Beta) Supports connect to kubernetes cluster network (Beta) Experience optimization: \u00b6 Friendly prompts when entering dev mode JetBrains: reduce unnecessary error pop-ups optimized the UI freeze problem VSCode-Plugin: automatically install debug dependencies for golang supports GBK encoding 0.6.8 (2021-12.14) \u00b6 New Features: \u00b6 VSCode-Plugin: Supports remote debug, e.g, java, go, python, ruby, php Support for apps installed by kubevela Supports for JetBrains 213.x build Experience optimization \u00b6 Disable Edit Manifest menu in Duplicate-DevMode JetBrains: Now you can fast locate your workload in the tree Fix the problem that the local cluster is not displayed due to the failure of the cluster refresh VSCode: Combine the menu of Port Forward and Port Forward List 0.6.3 (2021-11.01) \u00b6 New Features: \u00b6 Supports one-click Run/Debug and HotReload in VSCode Supports configure DevConfig in browser through IDE plugin Supports amr64-osx Auto position to the project when using Run/Debug Check kubeconfig when adding to IDE plugin Improvement \u00b6 Fix bugs when delete the associated project of workload Fix high CPU usage when starting for the first time Optimized the performance when K8s cluster is unavailable 0.6.0 (2021-10-15) \u00b6 New Features \u00b6 Supports Duplicate DevMode Supports Dev Config gui tools (VSCode) Supports remote debug\u3001run\u3001hotReload for Node and Golang Improvement \u00b6 Supports file sync dir management Supports Dev Config validation Improve port-forward stability on containerd K8s cluster Supports using git bash(unix shell) as default shell in windows Generate 100-year validity certificate for Nocalhost-Dep Supports external tcp and http dependency readiness probe in Nocalhost-Dep","title":"0.6.x"},{"location":"changelogs/0.6.x/#0618-2022-0418","text":"","title":"0.6.18 (2022-04.18)"},{"location":"changelogs/0.6.x/#new-features","text":"Support import namespace and users Add Mesh devMode","title":"New Features:"},{"location":"changelogs/0.6.x/#0616-2022-0325","text":"","title":"0.6.16 (2022-03.25)"},{"location":"changelogs/0.6.x/#new-features_1","text":"Support linux arm64 platform Support VPN proxy for CRD Support special program language in DevConfig Add entrance to display local syncthing admin page","title":"New Features:"},{"location":"changelogs/0.6.x/#experience-optimization","text":"Optimize experience of adding cluster Fix Jetbrains Java debugger print progress issue","title":"Experience optimization:"},{"location":"changelogs/0.6.x/#0612-2022-0112","text":"","title":"0.6.12 (2022-01.12)"},{"location":"changelogs/0.6.x/#new-features_2","text":"Supports CRD development Supports intercept traffic to local (Beta) Supports connect to kubernetes cluster network (Beta)","title":"New Features:"},{"location":"changelogs/0.6.x/#experience-optimization_1","text":"Friendly prompts when entering dev mode JetBrains: reduce unnecessary error pop-ups optimized the UI freeze problem VSCode-Plugin: automatically install debug dependencies for golang supports GBK encoding","title":"Experience optimization:"},{"location":"changelogs/0.6.x/#068-2021-1214","text":"","title":"0.6.8 (2021-12.14)"},{"location":"changelogs/0.6.x/#new-features_3","text":"VSCode-Plugin: Supports remote debug, e.g, java, go, python, ruby, php Support for apps installed by kubevela Supports for JetBrains 213.x build","title":"New Features:"},{"location":"changelogs/0.6.x/#experience-optimization_2","text":"Disable Edit Manifest menu in Duplicate-DevMode JetBrains: Now you can fast locate your workload in the tree Fix the problem that the local cluster is not displayed due to the failure of the cluster refresh VSCode: Combine the menu of Port Forward and Port Forward List","title":"Experience optimization"},{"location":"changelogs/0.6.x/#063-2021-1101","text":"","title":"0.6.3 (2021-11.01)"},{"location":"changelogs/0.6.x/#new-features_4","text":"Supports one-click Run/Debug and HotReload in VSCode Supports configure DevConfig in browser through IDE plugin Supports amr64-osx Auto position to the project when using Run/Debug Check kubeconfig when adding to IDE plugin","title":"New Features:"},{"location":"changelogs/0.6.x/#improvement","text":"Fix bugs when delete the associated project of workload Fix high CPU usage when starting for the first time Optimized the performance when K8s cluster is unavailable","title":"Improvement"},{"location":"changelogs/0.6.x/#060-2021-10-15","text":"","title":"0.6.0 (2021-10-15)"},{"location":"changelogs/0.6.x/#new-features_5","text":"Supports Duplicate DevMode Supports Dev Config gui tools (VSCode) Supports remote debug\u3001run\u3001hotReload for Node and Golang","title":"New Features"},{"location":"changelogs/0.6.x/#improvement_1","text":"Supports file sync dir management Supports Dev Config validation Improve port-forward stability on containerd K8s cluster Supports using git bash(unix shell) as default shell in windows Generate 100-year validity certificate for Nocalhost-Dep Supports external tcp and http dependency readiness probe in Nocalhost-Dep","title":"Improvement"},{"location":"cli/cli-apply/","text":"Apply manifest \u7528\u6cd5 \u00b6 Usage: nhctl apply [NAME] [MANIFEST] [flags] \u6807\u5fd7 \u00b6 Flags: -h, --help help for apply Global Flags: --auth-check pre check the nocalhost commands permissions, return yes represent having enough permissions to call the command --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl apply"},{"location":"cli/cli-apply/#_1","text":"Usage: nhctl apply [NAME] [MANIFEST] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-apply/#_2","text":"Flags: -h, --help help for apply Global Flags: --auth-check pre check the nocalhost commands permissions, return yes represent having enough permissions to call the command --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-config/","text":"View, save and check application config file Usage: nhctl config [command] Available Commands: edit edit service config get get application/service config reload reload application/service config template get service config template nhctl config edit \u00b6 Edit service config nhctl config edit [Name] [flags] \u6807\u5fd7 \u00b6 Flags: --app-config get application config -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string k8s deployment which your developing service exists -h, --help help for get Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl config get \u00b6 Get application/service config nhctl config get [Name] [flags] \u793a\u4f8b: \u6807\u5fd7 \u00b6 Flags: --app-config get application config -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string k8s deployment which your developing service exists -h, --help help for get Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl config reload \u00b6 Reload application/service config nhctl config reload [Name] [flags] \u6807\u5fd7 \u00b6 Flags: -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string k8s deployment which your developing service exists -h, --help help for reload Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl config template \u00b6 Get service config template nhctl config template [Name] [flags] \u6807\u5fd7 \u00b6 Flags: -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string k8s deployment which your developing service exists -h, --help help for template Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl config"},{"location":"cli/cli-config/#nhctl-config-edit","text":"Edit service config nhctl config edit [Name] [flags]","title":"nhctl config edit"},{"location":"cli/cli-config/#_1","text":"Flags: --app-config get application config -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string k8s deployment which your developing service exists -h, --help help for get Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-config/#nhctl-config-get","text":"Get application/service config nhctl config get [Name] [flags] \u793a\u4f8b:","title":"nhctl config get"},{"location":"cli/cli-config/#_2","text":"Flags: --app-config get application config -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string k8s deployment which your developing service exists -h, --help help for get Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-config/#nhctl-config-reload","text":"Reload application/service config nhctl config reload [Name] [flags]","title":"nhctl config reload"},{"location":"cli/cli-config/#_3","text":"Flags: -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string k8s deployment which your developing service exists -h, --help help for reload Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-config/#nhctl-config-template","text":"Get service config template nhctl config template [Name] [flags]","title":"nhctl config template"},{"location":"cli/cli-config/#_4","text":"Flags: -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string k8s deployment which your developing service exists -h, --help help for template Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-convert/","text":"Convert config file between different versions \u7528\u6cd5 \u00b6 nhctl convert [flags] \u6807\u5fd7 \u00b6 Flags: -d, --destFile string File saves converted config --from-version string From which version -h, --help help for convert -f, --srcFile string File needs to get converted --to-version string Convert to which version Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl convert"},{"location":"cli/cli-convert/#_1","text":"nhctl convert [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-convert/#_2","text":"Flags: -d, --destFile string File saves converted config --from-version string From which version -h, --help help for convert -f, --srcFile string File needs to get converted --to-version string Convert to which version Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-daemon/","text":"nhctl daemon Usage: nhctl daemon [command] Available Commands: info Get nhctl daemon info restart Restart nhctl daemon start Start nhctl daemon status Get nhctl daemon status stop Stop nhctl daemon nhctl daemon info \u00b6 \u7528\u6cd5 \u00b6 nhctl daemon info !!! example > nhctl daemon info > {\"Version\":\"v0.4.12\",\"CommitId\":\"0f02d7f90335076b502bca3f40ff42bd37ee55e6\",\"NhctlPath\":\".nh/bin/nhctl\",\"Upgrading\":false} \u6807\u5fd7 \u00b6 Flags: -h, --help help for restart --sudo Is run as sudo Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl daemon restart \u00b6 \u91cd\u542f nhctl daemon \u7528\u6cd5 \u00b6 nhctl daemon restart !!! example > nhctl daemon restart > RestartDaemonServerCommand has been sent \u6807\u5fd7 \u00b6 Flags: -h, --help help for restart --sudo Is run as sudo Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl daemon start \u00b6 Manually start nhctl daemon \u7528\u6cd5 \u00b6 nhctl daemon start [flags] \u6807\u5fd7 \u00b6 Flags: -d, --daemon Is run as daemon(background) -h, --help help for start --sudo Is run as sudo Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl daemon status \u00b6 View nhctl daemon status \u7528\u6cd5 \u00b6 nhctl daemon status !!! example > nhctl daemon status > {\"portForwardList\":[]} \u6807\u5fd7 \u00b6 Flags: -h, --help help for status --sudo Is run as sudo Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl daemon stop \u00b6 Manually stop nhctl daemon \u7528\u6cd5 \u00b6 nhctl daemon stop \u6807\u5fd7 \u00b6 Flags: -h, --help help for stop --sudo Is run as sudo Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl daemon"},{"location":"cli/cli-daemon/#nhctl-daemon-info","text":"","title":"nhctl daemon info"},{"location":"cli/cli-daemon/#_1","text":"nhctl daemon info !!! example > nhctl daemon info > {\"Version\":\"v0.4.12\",\"CommitId\":\"0f02d7f90335076b502bca3f40ff42bd37ee55e6\",\"NhctlPath\":\".nh/bin/nhctl\",\"Upgrading\":false}","title":"\u7528\u6cd5"},{"location":"cli/cli-daemon/#_2","text":"Flags: -h, --help help for restart --sudo Is run as sudo Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-daemon/#nhctl-daemon-restart","text":"\u91cd\u542f nhctl daemon","title":"nhctl daemon restart"},{"location":"cli/cli-daemon/#_3","text":"nhctl daemon restart !!! example > nhctl daemon restart > RestartDaemonServerCommand has been sent","title":"\u7528\u6cd5"},{"location":"cli/cli-daemon/#_4","text":"Flags: -h, --help help for restart --sudo Is run as sudo Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-daemon/#nhctl-daemon-start","text":"Manually start nhctl daemon","title":"nhctl daemon start"},{"location":"cli/cli-daemon/#_5","text":"nhctl daemon start [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-daemon/#_6","text":"Flags: -d, --daemon Is run as daemon(background) -h, --help help for start --sudo Is run as sudo Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-daemon/#nhctl-daemon-status","text":"View nhctl daemon status","title":"nhctl daemon status"},{"location":"cli/cli-daemon/#_7","text":"nhctl daemon status !!! example > nhctl daemon status > {\"portForwardList\":[]}","title":"\u7528\u6cd5"},{"location":"cli/cli-daemon/#_8","text":"Flags: -h, --help help for status --sudo Is run as sudo Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-daemon/#nhctl-daemon-stop","text":"Manually stop nhctl daemon","title":"nhctl daemon stop"},{"location":"cli/cli-daemon/#_9","text":"nhctl daemon stop","title":"\u7528\u6cd5"},{"location":"cli/cli-daemon/#_10","text":"Flags: -h, --help help for stop --sudo Is run as sudo Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-db/","text":"leveldb operations Usage: nhctl db [command] Available Commands: all Get all leveldb data compact compact leveldb data put update leveldb data size Get all leveldb data size nhctl db all \u00b6 Get all leveldb data \u7528\u6cd5 \u00b6 nhctl db all [NAME] [flags] \u6807\u5fd7 \u00b6 Flags: --app string List leveldb data of specified application -h, --help help for all Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl db compact \u00b6 Compact leveldb data \u7528\u6cd5 \u00b6 nhctl db compact [NAME] [flags] \u6807\u5fd7 \u00b6 Flags: --app string Leveldb data of specified application -h, --help help for compact --key string The key of leveldb data Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl db put \u00b6 Update leveldb data \u7528\u6cd5 \u00b6 nhctl db put [flags] \u6807\u5fd7 \u00b6 Flags: --app string Leveldb data of specified application -f, --file string The value of leveldb data -h, --help help for put --key string The key of leveldb data --value string The value of leveldb data Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl db size \u00b6 Get all leveldb data \u7528\u6cd5 \u00b6 nhctl db size [NAME] [flags] \u6807\u5fd7 \u00b6 Flags: --app string List leveldb data of specified application -h, --help help for size Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl db"},{"location":"cli/cli-db/#nhctl-db-all","text":"Get all leveldb data","title":"nhctl db all"},{"location":"cli/cli-db/#_1","text":"nhctl db all [NAME] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-db/#_2","text":"Flags: --app string List leveldb data of specified application -h, --help help for all Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-db/#nhctl-db-compact","text":"Compact leveldb data","title":"nhctl db compact"},{"location":"cli/cli-db/#_3","text":"nhctl db compact [NAME] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-db/#_4","text":"Flags: --app string Leveldb data of specified application -h, --help help for compact --key string The key of leveldb data Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-db/#nhctl-db-put","text":"Update leveldb data","title":"nhctl db put"},{"location":"cli/cli-db/#_5","text":"nhctl db put [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-db/#_6","text":"Flags: --app string Leveldb data of specified application -f, --file string The value of leveldb data -h, --help help for put --key string The key of leveldb data --value string The value of leveldb data Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-db/#nhctl-db-size","text":"Get all leveldb data","title":"nhctl db size"},{"location":"cli/cli-db/#_7","text":"nhctl db size [NAME] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-db/#_8","text":"Flags: --app string List leveldb data of specified application -h, --help help for size Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-describe/","text":"Describe application info \u7528\u6cd5 \u00b6 nhctl describe [NAME] [flags] \u6807\u5fd7 \u00b6 Flags: -d, --deployment string k8s deployment which your developing service exists -h, --help help for describe -t, --type string specify service type Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl describe"},{"location":"cli/cli-describe/#_1","text":"nhctl describe [NAME] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-describe/#_2","text":"Flags: -d, --deployment string k8s deployment which your developing service exists -h, --help help for describe -t, --type string specify service type Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-dev/","text":"Dev Operations Usage: nhctl dev [command] Available Commands: associate associate service dev dir cmd Run cmd in dev container end end dev model reset reset service start Start DevMode terminal Enter dev container's terminal nhctl dev associate \u00b6 Associate service dev dir \u7528\u6cd5 \u00b6 nhctl dev associate [Name] [flags] \u6807\u5fd7 \u00b6 Flags: -s, --associate string dev mode work directory -t, --controller-type string kind of k8s controller,such as deployment,statefulSet --de-associate de associate(for test) -d, --deployment string k8s deployment which your developing service exists -h, --help help for associate Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl dev cmd \u00b6 Run cmd in dev container \u7528\u6cd5 \u00b6 nhctl dev cmd [NAME] [flags] \u6807\u5fd7 \u00b6 Flags: -c, --container string which container of pod to run command -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string K8s deployment which your developing service exists --dev-command-type string Dev command type can be: build, run, debug, hotReloadRun, hotReloadDebug -h, --help help for cmd Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl dev end \u00b6 End dev model \u7528\u6cd5 \u00b6 nhctl dev end [NAME] [flags] \u6807\u5fd7 \u00b6 Flags: -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string k8s deployment which your developing service exists -h, --help help for end Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl dev reset \u00b6 Reset service \u7528\u6cd5 \u00b6 nhctl dev reset [NAME] [flags] \u6807\u5fd7 \u00b6 Flags: -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string k8s deployment which your developing service exists -h, --help help for reset Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl dev start \u00b6 Start DevMode \u7528\u6cd5 \u00b6 nhctl dev start [NAME] [flags] \u6807\u5fd7 \u00b6 Flags: -c, --container string container to develop -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string k8s deployment your developing service exists -h, --help help for start -i, --image string image of DevContainer -s, --local-sync strings local directory to sync --priority-class string PriorityClass used by devContainer --shell string use current shell cmd to enter terminal while dev start success --sidecar-image string image of nocalhost-sidecar container --storage-class string StorageClass used by PV --syncthing-version string versions of syncthing and this flag is use for debug only --without-sync do not start file-sync while dev start success --without-terminal do not enter terminal directly while dev start success --work-dir string container's work directory Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl dev terminal \u00b6 Enter dev container's terminal \u7528\u6cd5 \u00b6 nhctl dev terminal [NAME] [flags] \u6807\u5fd7 \u00b6 Flags: -c, --container string container to enter -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string k8s deployment which your developing service exists -h, --help help for terminal --pod string pod to enter --shell string shell cmd while enter dev container Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl dev"},{"location":"cli/cli-dev/#nhctl-dev-associate","text":"Associate service dev dir","title":"nhctl dev associate"},{"location":"cli/cli-dev/#_1","text":"nhctl dev associate [Name] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-dev/#_2","text":"Flags: -s, --associate string dev mode work directory -t, --controller-type string kind of k8s controller,such as deployment,statefulSet --de-associate de associate(for test) -d, --deployment string k8s deployment which your developing service exists -h, --help help for associate Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-dev/#nhctl-dev-cmd","text":"Run cmd in dev container","title":"nhctl dev cmd"},{"location":"cli/cli-dev/#_3","text":"nhctl dev cmd [NAME] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-dev/#_4","text":"Flags: -c, --container string which container of pod to run command -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string K8s deployment which your developing service exists --dev-command-type string Dev command type can be: build, run, debug, hotReloadRun, hotReloadDebug -h, --help help for cmd Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-dev/#nhctl-dev-end","text":"End dev model","title":"nhctl dev end"},{"location":"cli/cli-dev/#_5","text":"nhctl dev end [NAME] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-dev/#_6","text":"Flags: -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string k8s deployment which your developing service exists -h, --help help for end Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-dev/#nhctl-dev-reset","text":"Reset service","title":"nhctl dev reset"},{"location":"cli/cli-dev/#_7","text":"nhctl dev reset [NAME] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-dev/#_8","text":"Flags: -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string k8s deployment which your developing service exists -h, --help help for reset Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-dev/#nhctl-dev-start","text":"Start DevMode","title":"nhctl dev start"},{"location":"cli/cli-dev/#_9","text":"nhctl dev start [NAME] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-dev/#_10","text":"Flags: -c, --container string container to develop -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string k8s deployment your developing service exists -h, --help help for start -i, --image string image of DevContainer -s, --local-sync strings local directory to sync --priority-class string PriorityClass used by devContainer --shell string use current shell cmd to enter terminal while dev start success --sidecar-image string image of nocalhost-sidecar container --storage-class string StorageClass used by PV --syncthing-version string versions of syncthing and this flag is use for debug only --without-sync do not start file-sync while dev start success --without-terminal do not enter terminal directly while dev start success --work-dir string container's work directory Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-dev/#nhctl-dev-terminal","text":"Enter dev container's terminal","title":"nhctl dev terminal"},{"location":"cli/cli-dev/#_11","text":"nhctl dev terminal [NAME] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-dev/#_12","text":"Flags: -c, --container string container to enter -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string k8s deployment which your developing service exists -h, --help help for terminal --pod string pod to enter --shell string shell cmd while enter dev container Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-exec/","text":"Execute a command in container \u7528\u6cd5 \u00b6 nhctl exec [NAME] [flags] \u6807\u5fd7 \u00b6 Flags: -c, --command stringArray command to execute in container -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string k8s deployment which your developing service exists -h, --help help for exec Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl exec"},{"location":"cli/cli-exec/#_1","text":"nhctl exec [NAME] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-exec/#_2","text":"Flags: -c, --command stringArray command to execute in container -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string k8s deployment which your developing service exists -h, --help help for exec Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-get/","text":"Get resource info \u7528\u6cd5 \u00b6 nhctl get type [flags] !!! example # Get all application nhctl get application --kubeconfig=kubeconfigfile # Get all application in namespace nhctl get application -n namespaceName --kubeconfig=kubeoconfigpath # Get all deployment of application in namespace nhctl get deployment -n namespaceName -a bookinfo --kubeconfig=kubeconfigpath \u6807\u5fd7 \u00b6 Flags: -a, --application string application name -h, --help help for get -o, --outputType string json or yaml -l, --selector stringToString Selector (label query) to filter on, only supports '='.(e.g. -l key1=value1,key2=value2) (default []) Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl get"},{"location":"cli/cli-get/#_1","text":"nhctl get type [flags] !!! example # Get all application nhctl get application --kubeconfig=kubeconfigfile # Get all application in namespace nhctl get application -n namespaceName --kubeconfig=kubeoconfigpath # Get all deployment of application in namespace nhctl get deployment -n namespaceName -a bookinfo --kubeconfig=kubeconfigpath","title":"\u7528\u6cd5"},{"location":"cli/cli-get/#_2","text":"Flags: -a, --application string application name -h, --help help for get -o, --outputType string json or yaml -l, --selector stringToString Selector (label query) to filter on, only supports '='.(e.g. -l key1=value1,key2=value2) (default []) Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-init/","text":"Init demo or dep component Usage: nhctl init [command] Available Commands: demo Init Nocalhost with demo mode dep dep component nhctl init demo \u00b6 Init api, web and dep component in cluster \u7528\u6cd5 \u00b6 nhctl init demo [flags] !!! example nhctl init demo -n [DevSpace Name] -t nodeport -p [port] nhctl init demo -n [DevSpace Name] \u6807\u5fd7 \u00b6 Flags: --force force to init, warning: it will remove all nocalhost old data -h, --help help for demo --inject-user-amount int inject user amount, example 10, max is 999 --inject-user-offset int inject user id offset, default is 1 (default 1) --inject-user-template string inject users template, example Techo%d, max length is 15 -p, --port int for NodePort usage set ports (default 80) --set strings set values of helm -s, --source string (Deprecated) bookinfo source, github or coding, default is github -t, --type string set NodePort or LoadBalancer to expose nocalhost service Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl init dep \u00b6 Nocalhost\uff08nocalhost-dep\uff09\u7ec4\u4ef6\u521d\u59cb\u5316 \u7528\u6cd5 \u00b6 nhctl init dep [flags] \u6807\u5fd7 \u00b6 Flags: -h, --help help for dep Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl init"},{"location":"cli/cli-init/#nhctl-init-demo","text":"Init api, web and dep component in cluster","title":"nhctl init demo"},{"location":"cli/cli-init/#_1","text":"nhctl init demo [flags] !!! example nhctl init demo -n [DevSpace Name] -t nodeport -p [port] nhctl init demo -n [DevSpace Name]","title":"\u7528\u6cd5"},{"location":"cli/cli-init/#_2","text":"Flags: --force force to init, warning: it will remove all nocalhost old data -h, --help help for demo --inject-user-amount int inject user amount, example 10, max is 999 --inject-user-offset int inject user id offset, default is 1 (default 1) --inject-user-template string inject users template, example Techo%d, max length is 15 -p, --port int for NodePort usage set ports (default 80) --set strings set values of helm -s, --source string (Deprecated) bookinfo source, github or coding, default is github -t, --type string set NodePort or LoadBalancer to expose nocalhost service Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-init/#nhctl-init-dep","text":"Nocalhost\uff08nocalhost-dep\uff09\u7ec4\u4ef6\u521d\u59cb\u5316","title":"nhctl init dep"},{"location":"cli/cli-init/#_3","text":"nhctl init dep [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-init/#_4","text":"Flags: -h, --help help for dep Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-install/","text":"Deploy Application \u7528\u6cd5 \u00b6 nhctl install [NAME] [flags] \u6807\u5fd7 \u00b6 Flags: --config string specify a config relative to .nocalhost dir -r, --git-ref string resources git ref -u, --git-url string resources git url --helm-chart-name string chart name --helm-repo-name string chart repository name --helm-repo-url string chart repository url where to locate the requested chart --helm-repo-version string chart repository version -f, --helm-values string helm's Value.yaml -h, --help help for install --ignore-pre-install ignore pre-install --local-path string local path for application -c, --outer-config string specify a config.yaml in local path --resource-path strings resources path --set strings set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -t, --type string nocalhost application type: helmRepo, helmGit, helmLocal, rawManifest, rawManifestGit, rawManifestLocal or kustomizeGit --wait wait for completion Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl install"},{"location":"cli/cli-install/#_1","text":"nhctl install [NAME] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-install/#_2","text":"Flags: --config string specify a config relative to .nocalhost dir -r, --git-ref string resources git ref -u, --git-url string resources git url --helm-chart-name string chart name --helm-repo-name string chart repository name --helm-repo-url string chart repository url where to locate the requested chart --helm-repo-version string chart repository version -f, --helm-values string helm's Value.yaml -h, --help help for install --ignore-pre-install ignore pre-install --local-path string local path for application -c, --outer-config string specify a config.yaml in local path --resource-path strings resources path --set strings set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2) -t, --type string nocalhost application type: helmRepo, helmGit, helmLocal, rawManifest, rawManifestGit, rawManifestLocal or kustomizeGit --wait wait for completion Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-k/","text":"kubectl Usage: nhctl k [command] Available Commands: delete Delete resources by filenames, stdin, resources and names, or by resources and label selector. exec Execute a command in a container logs Print the logs for a container in a pod or specified resource nhctl k delete \u00b6 \u7528\u6cd5 \u00b6 nhctl k delete [flags] !!! example nhctl k delete [podName] --namespace nocalhost-reserved --kubeconfig=[path] \u6807\u5fd7 \u00b6 Flags: --all Delete all resources, including uninitialized ones, in the namespace of the specified resource types. -A, --all-namespaces If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace. --cascade string[=\"background\"] Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\") --dry-run string[=\"unchanged\"] Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\") --field-selector string Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type. -f, --filename strings containing the resource to delete. --force If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation. --grace-period int Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1) -h, --help help for delete --ignore-not-found Treat \"resource not found\" as a successful delete. Defaults to \"true\" when --all is specified. -k, --kustomize string Process a kustomization directory. This flag can't be used together with -f or -R. --now If true, resources are signaled for immediate shutdown (same as --grace-period=1). -o, --output string Output mode. Use \"-o name\" for shorter output (resource/name). --raw string Raw URI to DELETE to the server. Uses the transport specified by the kubeconfig file. -R, --recursive Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory. -l, --selector string Selector (label query) to filter on, not including uninitialized ones. --timeout duration The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object --wait If true, wait for resources to be gone before returning. This waits for finalizers. (default true) Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl k exec \u00b6 \u7528\u6cd5 \u00b6 nhctl k exec [flags] !!! example exec (POD | TYPE/NAME) [-c CONTAINER] [flags] -- COMMAND [args...] \u6807\u5fd7 \u00b6 Flags: -c, --container string Container name. If omitted, the first container in the pod will be chosen -h, --help help for exec -i, --stdin Pass stdin to the container -t, --tty Stdin is a TTY Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl k logs \u00b6 \u7528\u6cd5 \u00b6 nhctl k logs [flags] !!! example nhctl logs [podName] -c [containerName] -f=true --tail=1 --namespace nocalhost-reserved --kubeconfig=[path] \u6807\u5fd7 \u00b6 Flags: --all-containers Get all containers' logs in the pod(s). -c, --container string Print the logs of this container -f, --follow Specify if the logs should be streamed. -h, --help help for logs --ignore-errors If watching / following pod logs, allow for any errors that occur to be non-fatal --insecure-skip-tls-verify-backend Skip verifying the identity of the kubelet that logs are requested from. In theory, an attacker could provide invalid log content back. You might want to use this if your kubelet serving certificates have expired. --limit-bytes int Maximum bytes of logs to return. Defaults to no limit. --max-log-requests int Specify maximum number of concurrent logs to follow when using by a selector. Defaults to 5. (default 5) --pod-running-timeout duration The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 20s) --prefix Prefix each log line with the log source (pod name and container name) -p, --previous If true, print the logs for the previous instance of the container in a pod if it exists. -l, --selector string Selector (label query) to filter on. --since duration Only return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to all logs. Only one of since-time / since may be used. --since-time string Only return logs after a specific date (RFC3339). Defaults to all logs. Only one of since-time / since may be used. --tail int Lines of recent log file to display. Defaults to -1 with no selector, showing all log lines otherwise 10, if a selector is provided. (default -1) --timestamps Include timestamps on each line in the log output Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl k"},{"location":"cli/cli-k/#nhctl-k-delete","text":"","title":"nhctl k delete"},{"location":"cli/cli-k/#_1","text":"nhctl k delete [flags] !!! example nhctl k delete [podName] --namespace nocalhost-reserved --kubeconfig=[path]","title":"\u7528\u6cd5"},{"location":"cli/cli-k/#_2","text":"Flags: --all Delete all resources, including uninitialized ones, in the namespace of the specified resource types. -A, --all-namespaces If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace. --cascade string[=\"background\"] Must be \"background\", \"orphan\", or \"foreground\". Selects the deletion cascading strategy for the dependents (e.g. Pods created by a ReplicationController). Defaults to background. (default \"background\") --dry-run string[=\"unchanged\"] Must be \"none\", \"server\", or \"client\". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource. (default \"none\") --field-selector string Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type. -f, --filename strings containing the resource to delete. --force If true, immediately remove resources from API and bypass graceful deletion. Note that immediate deletion of some resources may result in inconsistency or data loss and requires confirmation. --grace-period int Period of time in seconds given to the resource to terminate gracefully. Ignored if negative. Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion). (default -1) -h, --help help for delete --ignore-not-found Treat \"resource not found\" as a successful delete. Defaults to \"true\" when --all is specified. -k, --kustomize string Process a kustomization directory. This flag can't be used together with -f or -R. --now If true, resources are signaled for immediate shutdown (same as --grace-period=1). -o, --output string Output mode. Use \"-o name\" for shorter output (resource/name). --raw string Raw URI to DELETE to the server. Uses the transport specified by the kubeconfig file. -R, --recursive Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory. -l, --selector string Selector (label query) to filter on, not including uninitialized ones. --timeout duration The length of time to wait before giving up on a delete, zero means determine a timeout from the size of the object --wait If true, wait for resources to be gone before returning. This waits for finalizers. (default true) Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-k/#nhctl-k-exec","text":"","title":"nhctl k exec"},{"location":"cli/cli-k/#_3","text":"nhctl k exec [flags] !!! example exec (POD | TYPE/NAME) [-c CONTAINER] [flags] -- COMMAND [args...]","title":"\u7528\u6cd5"},{"location":"cli/cli-k/#_4","text":"Flags: -c, --container string Container name. If omitted, the first container in the pod will be chosen -h, --help help for exec -i, --stdin Pass stdin to the container -t, --tty Stdin is a TTY Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-k/#nhctl-k-logs","text":"","title":"nhctl k logs"},{"location":"cli/cli-k/#_5","text":"nhctl k logs [flags] !!! example nhctl logs [podName] -c [containerName] -f=true --tail=1 --namespace nocalhost-reserved --kubeconfig=[path]","title":"\u7528\u6cd5"},{"location":"cli/cli-k/#_6","text":"Flags: --all-containers Get all containers' logs in the pod(s). -c, --container string Print the logs of this container -f, --follow Specify if the logs should be streamed. -h, --help help for logs --ignore-errors If watching / following pod logs, allow for any errors that occur to be non-fatal --insecure-skip-tls-verify-backend Skip verifying the identity of the kubelet that logs are requested from. In theory, an attacker could provide invalid log content back. You might want to use this if your kubelet serving certificates have expired. --limit-bytes int Maximum bytes of logs to return. Defaults to no limit. --max-log-requests int Specify maximum number of concurrent logs to follow when using by a selector. Defaults to 5. (default 5) --pod-running-timeout duration The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one pod is running (default 20s) --prefix Prefix each log line with the log source (pod name and container name) -p, --previous If true, print the logs for the previous instance of the container in a pod if it exists. -l, --selector string Selector (label query) to filter on. --since duration Only return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to all logs. Only one of since-time / since may be used. --since-time string Only return logs after a specific date (RFC3339). Defaults to all logs. Only one of since-time / since may be used. --tail int Lines of recent log file to display. Defaults to -1 with no selector, showing all log lines otherwise 10, if a selector is provided. (default -1) --timestamps Include timestamps on each line in the log output Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-list/","text":"List all applications \u7528\u6cd5 \u00b6 nhctl list [NAME] [flags] Aliases: list, ls \u6807\u5fd7 \u00b6 Flags: --full list application meta full -h, --help help for list --json use json as out put, only supports for 'nhctl list' --yaml use yaml as out put, only supports for 'nhctl list' Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl list"},{"location":"cli/cli-list/#_1","text":"nhctl list [NAME] [flags] Aliases: list, ls","title":"\u7528\u6cd5"},{"location":"cli/cli-list/#_2","text":"Flags: --full list application meta full -h, --help help for list --json use json as out put, only supports for 'nhctl list' --yaml use yaml as out put, only supports for 'nhctl list' Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-port-forward/","text":"Port-forward Usage: nhctl port-forward [command] Available Commands: end stop port-forward list list port-forward start Forward local port to remote pod's port nhctl port-forward end \u00b6 \u7528\u6cd5 \u00b6 nhctl port-forward end [NAME] [flags] \u6807\u5fd7 \u00b6 Flags: -d, --deployment string k8s deployment which you want to forward to -h, --help help for end -p, --port string stop specify port-forward -t, --type string specify service type (default \"deployment\") Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl port-forward list \u00b6 \u7528\u6cd5 \u00b6 nhctl port-forward list [NAME] [flags] \u6807\u5fd7 \u00b6 Flags: -h, --help help for list --json use json as out put --yaml use yaml as out put Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl port-forward start \u00b6 \u7528\u6cd5 \u00b6 nhctl port-forward start [NAME] [flags] \u6807\u5fd7 \u00b6 Flags: -c, --container string which container of pod to run command -d, --deployment string k8s deployment which you want to forward to -p, --dev-port strings port-forward between pod and local, such 8080:8080 or :8080(random localPort) --follow stock here waiting for disconnect or return immediately -f, --forward forward actually, deprecated -h, --help help for start --pod string specify pod name -t, --type string specify service type (default \"deployment\") --way string specify port-forward way, deprecated (default \"manual\") Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl port-forward"},{"location":"cli/cli-port-forward/#nhctl-port-forward-end","text":"","title":"nhctl port-forward end"},{"location":"cli/cli-port-forward/#_1","text":"nhctl port-forward end [NAME] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-port-forward/#_2","text":"Flags: -d, --deployment string k8s deployment which you want to forward to -h, --help help for end -p, --port string stop specify port-forward -t, --type string specify service type (default \"deployment\") Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-port-forward/#nhctl-port-forward-list","text":"","title":"nhctl port-forward list"},{"location":"cli/cli-port-forward/#_3","text":"nhctl port-forward list [NAME] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-port-forward/#_4","text":"Flags: -h, --help help for list --json use json as out put --yaml use yaml as out put Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-port-forward/#nhctl-port-forward-start","text":"","title":"nhctl port-forward start"},{"location":"cli/cli-port-forward/#_5","text":"nhctl port-forward start [NAME] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-port-forward/#_6","text":"Flags: -c, --container string which container of pod to run command -d, --deployment string k8s deployment which you want to forward to -p, --dev-port strings port-forward between pod and local, such 8080:8080 or :8080(random localPort) --follow stock here waiting for disconnect or return immediately -f, --forward forward actually, deprecated -h, --help help for start --pod string specify pod name -t, --type string specify service type (default \"deployment\") --way string specify port-forward way, deprecated (default \"manual\") Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-profile/","text":"Profile Management Usage: nhctl profile [command] Available Commands: get Get a config item of Profile set Set a config item of Profile nhctl profile get \u00b6 Get a config item of Profile \u7528\u6cd5 \u00b6 nhctl profile get [flags] \u6807\u5fd7 \u00b6 Flags: -c, --container string container name of pod -d, --deployment string k8s workload name -h, --help help for get -k, --key string key of dev config -t, --type string specify service type (default \"deployment\") Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl profile set \u00b6 Set a config item of Profile \u7528\u6cd5 \u00b6 nhctl profile set [flags] \u6807\u5fd7 \u00b6 Flags: -c, --container string container name of pod -d, --deployment string k8s workload name -h, --help help for set -k, --key string key of dev config -t, --type string specify service type (default \"deployment\") -v, --value string value of dev config Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl profile"},{"location":"cli/cli-profile/#nhctl-profile-get","text":"Get a config item of Profile","title":"nhctl profile get"},{"location":"cli/cli-profile/#_1","text":"nhctl profile get [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-profile/#_2","text":"Flags: -c, --container string container name of pod -d, --deployment string k8s workload name -h, --help help for get -k, --key string key of dev config -t, --type string specify service type (default \"deployment\") Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-profile/#nhctl-profile-set","text":"Set a config item of Profile","title":"nhctl profile set"},{"location":"cli/cli-profile/#_3","text":"nhctl profile set [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-profile/#_4","text":"Flags: -c, --container string container name of pod -d, --deployment string k8s workload name -h, --help help for set -k, --key string key of dev config -t, --type string specify service type (default \"deployment\") -v, --value string value of dev config Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-pvc/","text":"Manage PersistVolumeClaims Usage: nhctl pvc [command] Available Commands: clean Clean up PersistVolumeClaims list List PersistVolumeClaims nhctl pvc clean \u00b6 Clean up PersistVolumeClaims \u7528\u6cd5 \u00b6 nhctl pvc clean [flags] \u6807\u5fd7 \u00b6 Flags: --app string Clean up PVCs of specified application --controller string Clean up PVCs of specified service -h, --help help for clean --name string Clean up specified PVC Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl pvc list \u00b6 List PersistVolumeClaims \u7528\u6cd5 \u00b6 nhctl pvc list [flags] \u6807\u5fd7 \u00b6 Flags: --app string List PVCs of specified application -h, --help help for list --json Use json as the output format --svc string List PVCs of specified service --yaml Use yaml as the output format Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl pvc"},{"location":"cli/cli-pvc/#nhctl-pvc-clean","text":"Clean up PersistVolumeClaims","title":"nhctl pvc clean"},{"location":"cli/cli-pvc/#_1","text":"nhctl pvc clean [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-pvc/#_2","text":"Flags: --app string Clean up PVCs of specified application --controller string Clean up PVCs of specified service -h, --help help for clean --name string Clean up specified PVC Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-pvc/#nhctl-pvc-list","text":"List PersistVolumeClaims","title":"nhctl pvc list"},{"location":"cli/cli-pvc/#_3","text":"nhctl pvc list [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-pvc/#_4","text":"Flags: --app string List PVCs of specified application -h, --help help for list --json Use json as the output format --svc string List PVCs of specified service --yaml Use yaml as the output format Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-render/","text":"Render the file for debugging \u7528\u6cd5 \u00b6 nhctl render [NAME] [flags] \u6807\u5fd7 \u00b6 Flags: -e, --env path string the env file for render injection -h, --help help for render Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl render"},{"location":"cli/cli-render/#_1","text":"nhctl render [NAME] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-render/#_2","text":"Flags: -e, --env path string the env file for render injection -h, --help help for render Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-reset/","text":"Reset application \u7528\u6cd5 \u00b6 nhctl reset [NAME] [flags] \u6807\u5fd7 \u00b6 Flags: -h, --help help for reset Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl reset"},{"location":"cli/cli-reset/#_1","text":"nhctl reset [NAME] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-reset/#_2","text":"Flags: -h, --help help for reset Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-sync-status/","text":"Tracing the files sync status, include local folder and remote device \u7528\u6cd5 \u00b6 nhctl sync-status [NAME] [flags] \u6807\u5fd7 \u00b6 Flags: -t, --controller-type string kind of k8s controller,such as deployment,statefulSet (default \"deployment\") -d, --deployment string k8s deployment which your developing service exists (default \"deployment\") -h, --help help for sync-status --override override the remote changing according to the local sync folder Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl sync-status"},{"location":"cli/cli-sync-status/#_1","text":"nhctl sync-status [NAME] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-sync-status/#_2","text":"Flags: -t, --controller-type string kind of k8s controller,such as deployment,statefulSet (default \"deployment\") -d, --deployment string k8s deployment which your developing service exists (default \"deployment\") -h, --help help for sync-status --override override the remote changing according to the local sync folder Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-sync/","text":"Sync files to remote Pod in Kubernetes \u7528\u6cd5 \u00b6 nhctl sync [NAME] [flags] \u6807\u8bc6 \u00b6 Flags: --container string container name of pod to sync -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string k8s deployment which your developing service exists -b, --double if use double side sync -h, --help help for sync -i, --ignored-pattern strings local ignored pattern --overwrite override the remote changing according to the local sync folder while start up (default true) --resume resume file sync --stop stop file sync -s, --synced-pattern strings local synced pattern Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl sync"},{"location":"cli/cli-sync/#_1","text":"nhctl sync [NAME] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-sync/#_2","text":"Flags: --container string container name of pod to sync -t, --controller-type string kind of k8s controller,such as deployment,statefulSet -d, --deployment string k8s deployment which your developing service exists -b, --double if use double side sync -h, --help help for sync -i, --ignored-pattern strings local ignored pattern --overwrite override the remote changing according to the local sync folder while start up (default true) --resume resume file sync --stop stop file sync -s, --synced-pattern strings local synced pattern Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u8bc6"},{"location":"cli/cli-uninstall/","text":"Uninstall application \u7528\u6cd5 \u00b6 nhctl uninstall [NAME] [flags] \u6807\u5fd7 \u00b6 Flags: --force force to uninstall anyway -h, --help help for uninstall Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl uninstall"},{"location":"cli/cli-uninstall/#_1","text":"nhctl uninstall [NAME] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-uninstall/#_2","text":"Flags: --force force to uninstall anyway -h, --help help for uninstall Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-upgrade/","text":"Upgrade k8s application \u7528\u6cd5 \u00b6 nhctl upgrade [NAME] [flags] \u6807\u5fd7 \u00b6 Flags: --config string specify a config relative to .nocalhost dir -r, --git-ref string resources git ref -u, --git-url string resources git url --helm-chart-name string chart name --helm-repo-name string chart repository name --helm-repo-url string chart repository url where to locate the requested chart --helm-repo-version string chart repository version -f, --helm-values string helm's Value.yaml -h, --help help for upgrade --local-path string local path for application -c, --outer-config string specify a config.yaml in local path --resource-path strings resources path --set strings set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)","title":"nhctl upgrade"},{"location":"cli/cli-upgrade/#_1","text":"nhctl upgrade [NAME] [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-upgrade/#_2","text":"Flags: --config string specify a config relative to .nocalhost dir -r, --git-ref string resources git ref -u, --git-url string resources git url --helm-chart-name string chart name --helm-repo-name string chart repository name --helm-repo-url string chart repository url where to locate the requested chart --helm-repo-version string chart repository version -f, --helm-values string helm's Value.yaml -h, --help help for upgrade --local-path string local path for application -c, --outer-config string specify a config.yaml in local path --resource-path strings resources path --set strings set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)","title":"\u6807\u5fd7"},{"location":"cli/cli-version/","text":"Get nhctl's version \u7528\u6cd5 \u00b6 nhctl version [flags] \u6807\u5fd7 \u00b6 Flags: -h, --help help for version Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl version"},{"location":"cli/cli-version/#_1","text":"nhctl version [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-version/#_2","text":"Flags: -h, --help help for version Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-yaml/","text":"Yaml tools Usage: nhctl yaml [command] Available Commands: from-json Convert json to yaml to-json Convert yaml to json nhctl yaml from-json \u00b6 Convert json to yaml \u7528\u6cd5 \u00b6 nhctl yaml from-json [flags] \u6807\u5fd7 \u00b6 Flags: -h, --help help for from-json Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace nhctl yaml to-json \u00b6 Convert yaml to json \u7528\u6cd5 \u00b6 nhctl yaml to-json [flags] \u6807\u5fd7 \u00b6 Flags: -h, --help help for yaml Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"nhctl yaml"},{"location":"cli/cli-yaml/#nhctl-yaml-from-json","text":"Convert json to yaml","title":"nhctl yaml from-json"},{"location":"cli/cli-yaml/#_1","text":"nhctl yaml from-json [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-yaml/#_2","text":"Flags: -h, --help help for from-json Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"cli/cli-yaml/#nhctl-yaml-to-json","text":"Convert yaml to json","title":"nhctl yaml to-json"},{"location":"cli/cli-yaml/#_3","text":"nhctl yaml to-json [flags]","title":"\u7528\u6cd5"},{"location":"cli/cli-yaml/#_4","text":"Flags: -h, --help help for yaml Global Flags: --debug enable debug level log --kubeconfig string the path of the kubeconfig file -n, --namespace string kubernetes namespace","title":"\u6807\u5fd7"},{"location":"config/config-dev-container-en/","text":"\u6587\u4ef6\u540c\u6b65\u7684\u8fdc\u7a0b\u76ee\u5f55 \u00b6 Example name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : workDir : /home/nocalhost-dev After entering DevMode, users need to select a local directory, or right-click the target workload and select Associate Local DIR to do so in IDE plug-in. This directory local selected will be synchronized with the workDir of the container in DevMode. workDir defaults to /home/nocalhost-dev Note on workDir workDir uses emptyDir to share in container \uff0cso this directory is empty at the beginning. DevImage \u00b6 Example name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/golang:zsh DevImage is the basis of DevMode, which can be regarded as a 'remote Linux'. If you want to correctly compile and run the files synchronized from the local, you must use the proper DevImage. Nocalhost provides multiple official DevImage, and if you do not configure this field before entering DevMode, you are required to select or enter a DevImage to move on. The official DevImages are regular images without any special change. Apart from the basic environment of various languages, such as JRE, Maven in Java, there are also some built-in basic softwares such as git, openssh-client, zsh, bash, net-tools, tmux. If no official image is sutiable for you, you can customize your own DevImage. The DockerFile is in dev-container . Make your DevImage If you want to customize DevImage, please place it in a repository that can be pulled by your K8s cluster. \u9065\u63a7\u5bb9\u5668\u4e2d\u7684 Shell \u00b6 Example name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : shell : /bin/zsh It is not a must to configure the shell, which defaults zsh || bash || sh . Using a proper Shell normally makes things easier and more efficient, such as the automatic supplement and history supplement functions provided by zsh. Of course, the shell configuration also depends on the DevImage. If your DevImage does not support zsh, it will not work even if you have configured zsh as the shell. It will look for zsh, bash and sh in turn until it finds a usable one. Dev \u5bb9\u5668\u4e2d\u7684\u6301\u4e45\u6027 \u00b6 Example name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : persistentVolumeDirs : - path : /the/path/you/want/to/persistent/in/container capacity : 10Gi - path : /other capacity : 10Gi storageClass : cbs We know that if the directory is not persisted in K8s container, the previously generated data will be lost after the container is shut down or restarted, such as synchronized files, compiled contents, constructed contents, etc. Enabling persistence in Dev Container can greatly reduce such loss. Persistence includes two parts: Which directories need to be persisted. It is allowable not to configure this, and the default value will be empty. path indicates the directory that needs to be persisted in DevImage, and capacity indicates the space allocated for this directory persistence. persistentVolumeDirs is an array used to configure multiple path/capacity. storageClass . Persistence requires storageClass ( kubectl get storageclass ). If you do not configure storageClass , Nocalhost will use the default storageClass in the cluster to create PVC. If you have configured storageClass , PVC will be created by the corresponding storageClass . Pay Attention capacity needs to satisfy the resource constraints of K8s. Dev \u5bb9\u5668\u4e2d\u7684\u8d44\u6e90\u8bf7\u6c42\u548c\u7ea6\u675f \u00b6 Example name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : resources : limits : memory : 4Gi cpu : \"1\" requests : memory : 2Gi cpu : \"0.5\" Nocalhost Dev Container inherits the resource settings of the original container. If there is no configuration in the original container and no limitranges ( kubectl get limitranges ) in the namespace, Dev Container will have no resource constraints. Generally, after entering DevMode, the amount of the resource used will exceed the original image. Therefore, the resource configuration of the original container often leads to the failure of DevMode, such as OOM caused by insufficient memory. When such thing happens, you need to configure resources to provide more resource for DevImage. Pay Attention memory and cpu need to satisify the resource constraints of K8s. SideCar \u955c\u50cf\u81ea\u5b9a\u4e49 \u00b6 Example name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : sidecarImage : nocalhost-docker.pkg.coding.net/nocalhost/public/nocalhost-sidecar:sshversion sidecarImage is a necessary image to enter DevMode, which is used for code synchronization, debug connection management, etc. sidecarImage defaults docker.pkg.coding.net/nocalhost/public/nocalhost-sidecar:sshversion and does not need to be configured manually. If your cluster cannot get this image because of the network, you can pull this image and push it to the image repository that your cluster can access, and then configure it as a new address. Patches \u00b6 Example name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : patches : - patch : '[{\"op\": \"add\",\"path\":\"/metadata/annotations/nocalhost-patch\",\"value\":\"hello-world\"}]' type : json - patch : '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"nocalhost-dev\",\"imagePullPolicy\":\"IfNotPresent\",\"resources\":{\"limits\":{\"cpu\":\"2\"}}}]}}}}' - patch : '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"nocalhost-sidecar\",\"resources\":{\"limits\":{\"cpu\":\"2\"}}}]}}}}' type : strategic patches provide the function similar to kubectl patch . Users can use patches to flexibly modify the Spec of the workload in Nocalhost DevMode. In which\uff1a type : The type of patch. The optional values are json , merge , strategic , and the default value is strategic patch : The content of patch To easily understand, type and patch can be regarded as the --type and --patch parameters of ubectl patch command, respectively. To get more information about kuebctl patch , please see Update K8s API Object by kubectl patch Caution Nocalhost will not validate the content of patch, so Nocalhost may fail to enter DevMode because of the improper contents of the patch. Please make sure the patch is correct.","title":"\u5bb9\u5668\u914d\u7f6e"},{"location":"config/config-dev-container-en/#_1","text":"Example name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : workDir : /home/nocalhost-dev After entering DevMode, users need to select a local directory, or right-click the target workload and select Associate Local DIR to do so in IDE plug-in. This directory local selected will be synchronized with the workDir of the container in DevMode. workDir defaults to /home/nocalhost-dev Note on workDir workDir uses emptyDir to share in container \uff0cso this directory is empty at the beginning.","title":"\u6587\u4ef6\u540c\u6b65\u7684\u8fdc\u7a0b\u76ee\u5f55"},{"location":"config/config-dev-container-en/#devimage","text":"Example name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/golang:zsh DevImage is the basis of DevMode, which can be regarded as a 'remote Linux'. If you want to correctly compile and run the files synchronized from the local, you must use the proper DevImage. Nocalhost provides multiple official DevImage, and if you do not configure this field before entering DevMode, you are required to select or enter a DevImage to move on. The official DevImages are regular images without any special change. Apart from the basic environment of various languages, such as JRE, Maven in Java, there are also some built-in basic softwares such as git, openssh-client, zsh, bash, net-tools, tmux. If no official image is sutiable for you, you can customize your own DevImage. The DockerFile is in dev-container . Make your DevImage If you want to customize DevImage, please place it in a repository that can be pulled by your K8s cluster.","title":"DevImage"},{"location":"config/config-dev-container-en/#shell","text":"Example name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : shell : /bin/zsh It is not a must to configure the shell, which defaults zsh || bash || sh . Using a proper Shell normally makes things easier and more efficient, such as the automatic supplement and history supplement functions provided by zsh. Of course, the shell configuration also depends on the DevImage. If your DevImage does not support zsh, it will not work even if you have configured zsh as the shell. It will look for zsh, bash and sh in turn until it finds a usable one.","title":"\u9065\u63a7\u5bb9\u5668\u4e2d\u7684 Shell"},{"location":"config/config-dev-container-en/#dev","text":"Example name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : persistentVolumeDirs : - path : /the/path/you/want/to/persistent/in/container capacity : 10Gi - path : /other capacity : 10Gi storageClass : cbs We know that if the directory is not persisted in K8s container, the previously generated data will be lost after the container is shut down or restarted, such as synchronized files, compiled contents, constructed contents, etc. Enabling persistence in Dev Container can greatly reduce such loss. Persistence includes two parts: Which directories need to be persisted. It is allowable not to configure this, and the default value will be empty. path indicates the directory that needs to be persisted in DevImage, and capacity indicates the space allocated for this directory persistence. persistentVolumeDirs is an array used to configure multiple path/capacity. storageClass . Persistence requires storageClass ( kubectl get storageclass ). If you do not configure storageClass , Nocalhost will use the default storageClass in the cluster to create PVC. If you have configured storageClass , PVC will be created by the corresponding storageClass . Pay Attention capacity needs to satisfy the resource constraints of K8s.","title":"Dev \u5bb9\u5668\u4e2d\u7684\u6301\u4e45\u6027"},{"location":"config/config-dev-container-en/#dev_1","text":"Example name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : resources : limits : memory : 4Gi cpu : \"1\" requests : memory : 2Gi cpu : \"0.5\" Nocalhost Dev Container inherits the resource settings of the original container. If there is no configuration in the original container and no limitranges ( kubectl get limitranges ) in the namespace, Dev Container will have no resource constraints. Generally, after entering DevMode, the amount of the resource used will exceed the original image. Therefore, the resource configuration of the original container often leads to the failure of DevMode, such as OOM caused by insufficient memory. When such thing happens, you need to configure resources to provide more resource for DevImage. Pay Attention memory and cpu need to satisify the resource constraints of K8s.","title":"Dev \u5bb9\u5668\u4e2d\u7684\u8d44\u6e90\u8bf7\u6c42\u548c\u7ea6\u675f"},{"location":"config/config-dev-container-en/#sidecar","text":"Example name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : sidecarImage : nocalhost-docker.pkg.coding.net/nocalhost/public/nocalhost-sidecar:sshversion sidecarImage is a necessary image to enter DevMode, which is used for code synchronization, debug connection management, etc. sidecarImage defaults docker.pkg.coding.net/nocalhost/public/nocalhost-sidecar:sshversion and does not need to be configured manually. If your cluster cannot get this image because of the network, you can pull this image and push it to the image repository that your cluster can access, and then configure it as a new address.","title":"SideCar \u955c\u50cf\u81ea\u5b9a\u4e49"},{"location":"config/config-dev-container-en/#patches","text":"Example name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : patches : - patch : '[{\"op\": \"add\",\"path\":\"/metadata/annotations/nocalhost-patch\",\"value\":\"hello-world\"}]' type : json - patch : '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"nocalhost-dev\",\"imagePullPolicy\":\"IfNotPresent\",\"resources\":{\"limits\":{\"cpu\":\"2\"}}}]}}}}' - patch : '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"nocalhost-sidecar\",\"resources\":{\"limits\":{\"cpu\":\"2\"}}}]}}}}' type : strategic patches provide the function similar to kubectl patch . Users can use patches to flexibly modify the Spec of the workload in Nocalhost DevMode. In which\uff1a type : The type of patch. The optional values are json , merge , strategic , and the default value is strategic patch : The content of patch To easily understand, type and patch can be regarded as the --type and --patch parameters of ubectl patch command, respectively. To get more information about kuebctl patch , please see Update K8s API Object by kubectl patch Caution Nocalhost will not validate the content of patch, so Nocalhost may fail to enter DevMode because of the improper contents of the patch. Please make sure the patch is correct.","title":"Patches"},{"location":"config/config-develop/","text":"\u4e00\u952e\u8fd0\u884c \u00b6 name : example serviceType : deployment containers : - name : you-container dev : command : run : [ \"./gradlew\" , \"bootRun\" ] You can use one-click running after configuring command.run . The commands and parameters correspond to different elements in the array. For example, ./gradlew bootRun will be [\"./gradlew\", \"bootRun\"] How to use one-click running See more instructions in Remote Run . \u4e00\u952e\u8c03\u8bd5 \u00b6 name : example serviceType : deployment containers : - name : you-container dev : command : debug : - ./gradlew - bootRun - --debug-jvm debug : remoteDebugPort : 5005 Apart from configuring command.debug , you also need to enter a debug port. For example, the default debug port for gradle is 5005. If you want to use other ports, here remoteDebugPort should be changed too. How to use one-click debugging See more instructions in Remote Debugging . \u914d\u7f6e\u70ed\u91cd\u8f7d \u00b6 name : example serviceType : deployment containers : - name : you-container dev : hotReload : true With run or debug configured, you can further configure hotReload: true to enable HotReload. Nocalhost offers liveReload, so if your programming language and running method do not support HotReload or the configuration is too complex, you can try to use the HotReload provided by Nocalhost. HotReload with run command name : example serviceType : deployment containers : - name : you-container dev : command : run : [ \"./gradlew\" , \"bootRun\" ] hotReload : true","title":"\u5f00\u53d1\u914d\u7f6e"},{"location":"config/config-develop/#_1","text":"name : example serviceType : deployment containers : - name : you-container dev : command : run : [ \"./gradlew\" , \"bootRun\" ] You can use one-click running after configuring command.run . The commands and parameters correspond to different elements in the array. For example, ./gradlew bootRun will be [\"./gradlew\", \"bootRun\"] How to use one-click running See more instructions in Remote Run .","title":"\u4e00\u952e\u8fd0\u884c"},{"location":"config/config-develop/#_2","text":"name : example serviceType : deployment containers : - name : you-container dev : command : debug : - ./gradlew - bootRun - --debug-jvm debug : remoteDebugPort : 5005 Apart from configuring command.debug , you also need to enter a debug port. For example, the default debug port for gradle is 5005. If you want to use other ports, here remoteDebugPort should be changed too. How to use one-click debugging See more instructions in Remote Debugging .","title":"\u4e00\u952e\u8c03\u8bd5"},{"location":"config/config-develop/#_3","text":"name : example serviceType : deployment containers : - name : you-container dev : hotReload : true With run or debug configured, you can further configure hotReload: true to enable HotReload. Nocalhost offers liveReload, so if your programming language and running method do not support HotReload or the configuration is too complex, you can try to use the HotReload provided by Nocalhost. HotReload with run command name : example serviceType : deployment containers : - name : you-container dev : command : run : [ \"./gradlew\" , \"bootRun\" ] hotReload : true","title":"\u914d\u7f6e\u70ed\u91cd\u8f7d"},{"location":"config/config-en/","text":"\u6982\u8ff0 \u00b6 \u914d\u7f6e\u6982\u8ff0 \u00b6 \u5b83\u662f\u4ec0\u4e48\uff0c\u5982\u4f55\u914d\u7f6e\u4ee5\u53ca\u5b83\u5177\u6709\u4ec0\u4e48\u529f\u80fd\uff1f \u672c\u8282\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u4fe1\u606f\uff0c\u4f8b\u5982 Nocalhost \u914d\u7f6e\u662f\u4ec0\u4e48\uff0c\u5982\u4f55\u4fee\u6539\u914d\u7f6e\u4ee5\u53ca\u5177\u6709\u4ec0\u4e48\u529f\u80fd\u3002 \u5982\u679c\u60a8\u6ca1\u6709 Nocalhost \u914d\u7f6e\u7684\u6982\u5ff5 \u6216\u60f3\u4e86\u89e3 Nocalhost \u914d\u7f6e\u7684\u7ed3\u6784\u548c\u529f\u80fd\uff0c\u5219\u53ef\u4ee5\u8bfb\u53d6\u672c\u8282\u3002 \u63d0\u4f9b\u4ec0\u4e48\u914d\u7f6e\uff1f \u00b6 \u5f00\u53d1\u914d\u7f6e\u5b9a\u4e49\u4e86\u8f93\u5165 DevMode \u7684\u884c\u4e3a\u3002 \u5982\u679c \u60a8\u60f3\u5728\u8f93\u5165 DevMode \u65f6\u8fdb\u884c\u4e00\u4e9b\u81ea\u5b9a\u4e49\u914d\u7f6e \uff0c\u5219\u5f00\u53d1\u914d\u7f6e\u5c06\u5f88\u6709\u5e2e\u52a9\u3002 \u5982\u679c\u60a8\u60f3\u77e5\u9053 Nocalhost \u63d0\u4f9b\u7684\u914d\u7f6e\uff0c\u5219\u53ef\u4ee5\u9605\u8bfb\u672c\u8282\u3002 \u652f\u6301\u54ea\u79cd\u914d\u7f6e\u65b9\u5f0f\uff1f \u00b6 Nocalhost \u652f\u6301\u591a\u79cd\u914d\u7f6e Devmode \u7684\u65b9\u6cd5\uff0c\u5e76\u4e3a\u5404\u79cd\u4e30\u5bcc\u7684\u7528\u6cd5\u65b9\u6848\u63d0\u4f9b\u652f\u6301\u3002 \u6700\u5e38\u89c1\u7684\u914d\u7f6e\u65b9\u6cd5\u662f\u53f3\u952e\u5355\u51fb IDE \u63d2\u4ef6\u4e2d\u7684\u7279\u5b9a\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u7136\u540e\u9009\u62e9 DevConfig \u4ee5\u8f93\u5165\u5f00\u53d1\u914d\u7f6e\u7f16\u8f91 UI\u3002 \u6b64\u5916\uff0cNocalhost \u8fd8\u652f\u6301\u5c06\u5f00\u53d1\u914d\u7f6e\u653e\u7f6e\u5728 \u6e90\u76ee\u5f55\uff0cConfigMap \u548c\u6ce8\u91ca \u4e2d\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0a\u8ff0\u914d\u7f6e\u65b9\u5f0f\u5728\u8fc7\u7a0b\u4e2d\u6216\u5728 Helm \u56fe\u4e2d\u7684 CD \u4e0a\u8fdb\u884c\u914d\u7f6e\uff0c\u4ee5\u907f\u514d\u91cd\u590d\u914d\u7f6e\u6216\u81ea\u5b9a\u4e49\u914d\u7f6e\uff0c\u7b49\u7b49\u3002 \u5982\u679c\u60a8\u60f3\u4e86\u89e3\u6709\u5173\u591a\u79cd\u914d\u7f6e\u5f00\u53d1\u914d\u7f6e\u65b9\u5f0f\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u5219\u53ef\u4ee5\u5355\u51fb\u672c\u8282\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 \u90e8\u7f72\u914d\u7f6e \u00b6 Nocalhost \u5177\u6709\u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u7684\u529f\u80fd\u3002\u5728 Nocalhost Server \u4e0b\uff0c\u8fd9\u662f\u4e00\u4e2a\u9ad8\u9891\u529f\u80fd\u3002 Nocalhost \u4e3a\u5de5\u4f5c\u8d1f\u8f7d\u63d0\u4f9b\u4e86 \u4f9d\u8d56\u63a7\u5236\u548c ENV \u6ce8\u5165 \u4e4b\u7c7b\u7684\u529f\u80fd\u3002 Tips \u5982\u679c\u60a8\u4e0d\u4f7f\u7528 Nocalhost Server \u6216\u4e0d\u9700\u8981\u8bf8\u5982Workload\u4f9d\u8d56\u63a7\u5236\u548cENV\u6ce8\u5165\u6216\u5177\u6709\u81ea\u5df1\u7684\u5b8c\u6574\u90e8\u7f72\u65b9\u5f0f\u4e4b\u7c7b\u7684\u529f\u80fd\uff0c\u5219\u65e0\u9700\u9605\u8bfb\u672c\u8282\u3002 Nocalhost \u652f\u6301 Helm\uff0cRawManifest \u548c Kustomize \u7528\u4e8e\u90e8\u7f72 K8S \u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u8fd8\u652f\u6301\u591a\u79cd\u914d\u7f6e\u65b9\u5f0f\uff0c\u4f8b\u5982 ConfigMap \u548c\u6ce8\u91ca \u3002","title":"\u6982\u8ff0"},{"location":"config/config-en/#_1","text":"","title":"\u6982\u8ff0"},{"location":"config/config-en/#_2","text":"\u5b83\u662f\u4ec0\u4e48\uff0c\u5982\u4f55\u914d\u7f6e\u4ee5\u53ca\u5b83\u5177\u6709\u4ec0\u4e48\u529f\u80fd\uff1f \u672c\u8282\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u4fe1\u606f\uff0c\u4f8b\u5982 Nocalhost \u914d\u7f6e\u662f\u4ec0\u4e48\uff0c\u5982\u4f55\u4fee\u6539\u914d\u7f6e\u4ee5\u53ca\u5177\u6709\u4ec0\u4e48\u529f\u80fd\u3002 \u5982\u679c\u60a8\u6ca1\u6709 Nocalhost \u914d\u7f6e\u7684\u6982\u5ff5 \u6216\u60f3\u4e86\u89e3 Nocalhost \u914d\u7f6e\u7684\u7ed3\u6784\u548c\u529f\u80fd\uff0c\u5219\u53ef\u4ee5\u8bfb\u53d6\u672c\u8282\u3002","title":"\u914d\u7f6e\u6982\u8ff0"},{"location":"config/config-en/#_3","text":"\u5f00\u53d1\u914d\u7f6e\u5b9a\u4e49\u4e86\u8f93\u5165 DevMode \u7684\u884c\u4e3a\u3002 \u5982\u679c \u60a8\u60f3\u5728\u8f93\u5165 DevMode \u65f6\u8fdb\u884c\u4e00\u4e9b\u81ea\u5b9a\u4e49\u914d\u7f6e \uff0c\u5219\u5f00\u53d1\u914d\u7f6e\u5c06\u5f88\u6709\u5e2e\u52a9\u3002 \u5982\u679c\u60a8\u60f3\u77e5\u9053 Nocalhost \u63d0\u4f9b\u7684\u914d\u7f6e\uff0c\u5219\u53ef\u4ee5\u9605\u8bfb\u672c\u8282\u3002","title":"\u63d0\u4f9b\u4ec0\u4e48\u914d\u7f6e\uff1f"},{"location":"config/config-en/#_4","text":"Nocalhost \u652f\u6301\u591a\u79cd\u914d\u7f6e Devmode \u7684\u65b9\u6cd5\uff0c\u5e76\u4e3a\u5404\u79cd\u4e30\u5bcc\u7684\u7528\u6cd5\u65b9\u6848\u63d0\u4f9b\u652f\u6301\u3002 \u6700\u5e38\u89c1\u7684\u914d\u7f6e\u65b9\u6cd5\u662f\u53f3\u952e\u5355\u51fb IDE \u63d2\u4ef6\u4e2d\u7684\u7279\u5b9a\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u7136\u540e\u9009\u62e9 DevConfig \u4ee5\u8f93\u5165\u5f00\u53d1\u914d\u7f6e\u7f16\u8f91 UI\u3002 \u6b64\u5916\uff0cNocalhost \u8fd8\u652f\u6301\u5c06\u5f00\u53d1\u914d\u7f6e\u653e\u7f6e\u5728 \u6e90\u76ee\u5f55\uff0cConfigMap \u548c\u6ce8\u91ca \u4e2d\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0a\u8ff0\u914d\u7f6e\u65b9\u5f0f\u5728\u8fc7\u7a0b\u4e2d\u6216\u5728 Helm \u56fe\u4e2d\u7684 CD \u4e0a\u8fdb\u884c\u914d\u7f6e\uff0c\u4ee5\u907f\u514d\u91cd\u590d\u914d\u7f6e\u6216\u81ea\u5b9a\u4e49\u914d\u7f6e\uff0c\u7b49\u7b49\u3002 \u5982\u679c\u60a8\u60f3\u4e86\u89e3\u6709\u5173\u591a\u79cd\u914d\u7f6e\u5f00\u53d1\u914d\u7f6e\u65b9\u5f0f\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u5219\u53ef\u4ee5\u5355\u51fb\u672c\u8282\u7684\u8be6\u7ec6\u4fe1\u606f\u3002","title":"\u652f\u6301\u54ea\u79cd\u914d\u7f6e\u65b9\u5f0f\uff1f"},{"location":"config/config-en/#_5","text":"Nocalhost \u5177\u6709\u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u7684\u529f\u80fd\u3002\u5728 Nocalhost Server \u4e0b\uff0c\u8fd9\u662f\u4e00\u4e2a\u9ad8\u9891\u529f\u80fd\u3002 Nocalhost \u4e3a\u5de5\u4f5c\u8d1f\u8f7d\u63d0\u4f9b\u4e86 \u4f9d\u8d56\u63a7\u5236\u548c ENV \u6ce8\u5165 \u4e4b\u7c7b\u7684\u529f\u80fd\u3002 Tips \u5982\u679c\u60a8\u4e0d\u4f7f\u7528 Nocalhost Server \u6216\u4e0d\u9700\u8981\u8bf8\u5982Workload\u4f9d\u8d56\u63a7\u5236\u548cENV\u6ce8\u5165\u6216\u5177\u6709\u81ea\u5df1\u7684\u5b8c\u6574\u90e8\u7f72\u65b9\u5f0f\u4e4b\u7c7b\u7684\u529f\u80fd\uff0c\u5219\u65e0\u9700\u9605\u8bfb\u672c\u8282\u3002 Nocalhost \u652f\u6301 Helm\uff0cRawManifest \u548c Kustomize \u7528\u4e8e\u90e8\u7f72 K8S \u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u8fd8\u652f\u6301\u591a\u79cd\u914d\u7f6e\u65b9\u5f0f\uff0c\u4f8b\u5982 ConfigMap \u548c\u6ce8\u91ca \u3002","title":"\u90e8\u7f72\u914d\u7f6e"},{"location":"config/config-enhance/","text":"\u81ea\u52a8\u7aef\u53e3\u8f6c\u53d1\u5728\u5f00\u53d1\u6a21\u5f0f\u4e0b \u00b6 name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : portForward : - 8080:80 - 3306:3306 If you expect some ports of the Dev Container could be automatically port-forward to the local after entering Dev Mode, you can do some related configurations. About system ports If permission is required to listen on the local ports, such as the system ports (below 1024) in Ubuntu or Windows, automatic port-forward cannot be enabled after entering Dev Mode. \u6e90\u4ee3\u7801\u5730\u5740 \u00b6 name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : gitUrl : git@github.com:nocalhost/nocalhost.git Source code address refers to the git source code directory of the service. It is used to quickly and easily download the source code and it supports http/https and ssh protocols. Tip Whether the code can be successfully cloned depends on whether the device has the permission. It would be the best to configure the gitUrl for each service in advance. In this way, the communication cost between teams could be greatly reduced. \u6587\u4ef6\u540c\u6b65 \u00b6 name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : sync : type : send mode : pattern filePattern : - . ignoreFilePattern : - \".git\" - \".github\" - \".vscode\" - \"node_modules\" The configuration of file synchronization includes three parts: The first is the synchronization type, which includes: Note send. Send only (one-way). All changes depend on the local, and the remote changes will not affect the local (by default). sendReceive. Send and receive (two-way). Operations such as adding, modifying, and deleting at either end will be synchronized to the other end. The second is the local file deletion protection containers[].dev.sync.deleteProtection , which is a Bool value. If this function is enabled, the deletion in the remote will not be synchronized to the local (this function is enabled by default). If this function is disabled when sendReceive is enabled, the file will be deleted in the local when it is deleted in the remote. The third is synchronization mode. You are required to select a local directory when entering Dev Mode, and then Nocalhost will synchronize all files under this directory by default. If you do not want to synchronize all files, you can customize it. Nocalhost offers two synchronization modes. containers[].dev.sync.mode Note pattern. Synchronize files based on pattern matching (default mode). gitIgnore. Synchronize and ignore files according to gitIgnore . \u6a21\u5f0f\u6a21\u5f0f \u00b6 If you want to use pattern mode, you can configure filePattern and ignoreFilePattern to customize, such as only synchronizing building products or ignoring all files irrelevant to the building. As the example given above, it means to synchronize files in send only way and ignore .git \u3001 .github \u3001 .vscode and node_modules . Pattern See more instructions in Pattern Config . Gitignore \u6a21\u5f0f \u00b6 This mode is easy to use. It will automatically use git ignore configuration, such as gitignore . Requirements Since this function is based on git , you need to make sure that your device has installed git . Moreover, the synchronized directory has to be in a git project. If the above two requirements are not met, Nocalhost will not enable synchronization control, which means that all files will be synchronized. This is equivalent to no synchronization configuration. Which files are ignored? You can move to the file synchronization directory (e.g., cd /yourpath ) and then enter git status --ignored=matching -s to see the ignored files/folders. Files/folders starting with !! will not be synchronized to the remote. Example name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : sync : type : send mode : gitIgnore","title":"\u589e\u5f3a"},{"location":"config/config-enhance/#_1","text":"name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : portForward : - 8080:80 - 3306:3306 If you expect some ports of the Dev Container could be automatically port-forward to the local after entering Dev Mode, you can do some related configurations. About system ports If permission is required to listen on the local ports, such as the system ports (below 1024) in Ubuntu or Windows, automatic port-forward cannot be enabled after entering Dev Mode.","title":"\u81ea\u52a8\u7aef\u53e3\u8f6c\u53d1\u5728\u5f00\u53d1\u6a21\u5f0f\u4e0b"},{"location":"config/config-enhance/#_2","text":"name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : gitUrl : git@github.com:nocalhost/nocalhost.git Source code address refers to the git source code directory of the service. It is used to quickly and easily download the source code and it supports http/https and ssh protocols. Tip Whether the code can be successfully cloned depends on whether the device has the permission. It would be the best to configure the gitUrl for each service in advance. In this way, the communication cost between teams could be greatly reduced.","title":"\u6e90\u4ee3\u7801\u5730\u5740"},{"location":"config/config-enhance/#_3","text":"name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : sync : type : send mode : pattern filePattern : - . ignoreFilePattern : - \".git\" - \".github\" - \".vscode\" - \"node_modules\" The configuration of file synchronization includes three parts: The first is the synchronization type, which includes: Note send. Send only (one-way). All changes depend on the local, and the remote changes will not affect the local (by default). sendReceive. Send and receive (two-way). Operations such as adding, modifying, and deleting at either end will be synchronized to the other end. The second is the local file deletion protection containers[].dev.sync.deleteProtection , which is a Bool value. If this function is enabled, the deletion in the remote will not be synchronized to the local (this function is enabled by default). If this function is disabled when sendReceive is enabled, the file will be deleted in the local when it is deleted in the remote. The third is synchronization mode. You are required to select a local directory when entering Dev Mode, and then Nocalhost will synchronize all files under this directory by default. If you do not want to synchronize all files, you can customize it. Nocalhost offers two synchronization modes. containers[].dev.sync.mode Note pattern. Synchronize files based on pattern matching (default mode). gitIgnore. Synchronize and ignore files according to gitIgnore .","title":"\u6587\u4ef6\u540c\u6b65"},{"location":"config/config-enhance/#_4","text":"If you want to use pattern mode, you can configure filePattern and ignoreFilePattern to customize, such as only synchronizing building products or ignoring all files irrelevant to the building. As the example given above, it means to synchronize files in send only way and ignore .git \u3001 .github \u3001 .vscode and node_modules . Pattern See more instructions in Pattern Config .","title":"\u6a21\u5f0f\u6a21\u5f0f"},{"location":"config/config-enhance/#gitignore","text":"This mode is easy to use. It will automatically use git ignore configuration, such as gitignore . Requirements Since this function is based on git , you need to make sure that your device has installed git . Moreover, the synchronized directory has to be in a git project. If the above two requirements are not met, Nocalhost will not enable synchronization control, which means that all files will be synchronized. This is equivalent to no synchronization configuration. Which files are ignored? You can move to the file synchronization directory (e.g., cd /yourpath ) and then enter git status --ignored=matching -s to see the ignored files/folders. Files/folders starting with !! will not be synchronized to the remote. Example name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : sync : type : send mode : gitIgnore","title":"Gitignore \u6a21\u5f0f"},{"location":"config/config-overview-en/","text":"\u6211\u4eec\u5c06\u4ecb\u7ecd Nocalhost \u7684\u914d\u7f6e\uff0c\u5982\u4f55\u4fee\u6539\u5b83\u53ca\u5176\u529f\u80fd\u7b49\u3002 \u5982\u679c\u60a8\u6ca1\u6709 Nocalhost \u914d\u7f6e\u7684\u6982\u5ff5\uff0c\u6216\u8005\u60f3\u4e86\u89e3\u66f4\u591a\u6709\u5173\u5176\u7ed3\u6784\u548c\u529f\u80fd\u7684\u6982\u5ff5\uff0c\u8bf7\u9605\u8bfb\u672c\u8282\u3002 Nocalhost \u914d\u7f6e \u00b6 \u5f00\u53d1\u914d\u7f6e\u662f\u56f4\u7ed5 DevMode \u8bbe\u7f6e\u7684, \u4f8b\u5982\uff0c\u5e94\u4f7f\u7528\u54ea\u4e2a\u955c\u50cf\u8f93\u5165 DevMode , \u5f00\u53d1\u5bb9\u5668\u4e2d\u662f\u5426\u9700\u8981\u6301\u4e45\u6027, \u54ea\u4e9b\u6587\u4ef6\u5e94\u540c\u6b65\u5230\u5f00\u53d1\u5bb9\u5668, \u5982\u4f55\u901a\u8fc7\u4e00\u952e\u5728\u5bb9\u5668\u4e2d\u8fdb\u884c\u8c03\u8bd5\u548c\u8fd0\u884c\u670d\u52a1, \u7b49\u7b49 Nocalhost \u4e2d\u7684 DevMode \u5c06\u66f4\u5bb9\u6613\u4f7f\u7528\u6b63\u786e\u4e14\u9002\u5f53\u7684\u5f00\u53d1\u914d\u7f6e\u4f7f\u7528\u3002 \u603b\u4f53\u800c\u8a00\uff0c\u5f00\u53d1\u914d\u7f6e\u662f\u66f4\u597d\u5730\u5b9a\u4e49 DevMode \u7684\u884c\u4e3a\u3002 \u5f00\u53d1\u914d\u7f6e\u548c\u90e8\u7f72\u914d\u7f6e Nocalhost\u7684\u914d\u7f6e\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a\u5f00\u53d1\u914d\u7f6e\u548c\u90e8\u7f72\u914d\u7f6e\u3002 \u90e8\u7f72\u914d\u7f6e\u5b9a\u4e49\u4e86K8S\u5e94\u7528\u7a0b\u5e8f\u5982\u4f55\u90e8\u7f72\uff0c\u5305\u62ec\u4f9d\u8d56\u9879\u63a7\u5236\uff0c\u53ef\u53d8\u6ce8\u5165\u7b49\u3002 \u5f00\u53d1\u914d\u7f6e\u662f\u56f4\u7ed5 DevMode \u8bbe\u7f6e\u7684, \u4f8b\u5982\uff0c\u5728 DevMode \u4e2d\u5e94\u4f7f\u7528\u54ea\u4e2a\u955c\u50cf, \u5f00\u53d1\u5bb9\u5668\u4e2d\u662f\u5426\u9700\u8981\u6301\u4e45\u6027, \u54ea\u4e9b\u6587\u4ef6\u5e94\u540c\u6b65\u5230\u5f00\u53d1\u5bb9\u5668, \u5982\u4f55\u901a\u8fc7\u4e00\u952e\u5728\u5bb9\u5668\u4e2d\u8fdb\u884c\u8c03\u8bd5\u548c\u8fd0\u884c\u670d\u52a1, \u7b49\u7b49 \u901a\u5e38\uff0c\u53ea\u6709 \u5f00\u53d1\u914d\u7f6e \u9700\u8981\u5173\u6ce8\u3002 \u5728\u914d\u7f6e\u6587\u6863\u4e2d\uff0c\u6211\u4eec\u63d0\u5230\u7684\u914d\u7f6e\u662f\u6307\u5f00\u53d1\u914d\u7f6e\uff0c\u9664\u975e\u53e6\u6709\u8bf4\u660e\u3002 \u67e5\u770b\u5e76\u4fdd\u5b58\u914d\u7f6e \u00b6 \u67e5\u770b\u914d\u7f6e \u00b6 \u5982\u679c\u60a8\u4ece\u672a\u4e3a\u4efb\u4f55\u5de5\u4f5c\u8d1f\u8f7d\u914d\u7f6e Nocalhost, \u53f3\u952e\u5355\u51fb\u5e76\u9009\u62e9 Dev Config , \u7136\u540e\uff0c\u60a8\u5c06\u770b\u5230\u5982\u4e0b\u7684\u7a7a\u914d\u7f6e, \u8fd9\u4e9b\u90fd\u662f\u5728 nocalhost \u7684 DevMode \u4e2d\u4f7f\u7528\u7684. \u914d\u7f6e\u4e0d\u662f\u5fc5\u987b\u7684 \u60a8\u53ef\u4ee5\u5728\u6ca1\u6709\u4efb\u4f55\u914d\u7f6e\u7684\u60c5\u51b5\u4e0b\u8f93\u5165 DevMode \u3002 name : coredns serviceType : deployment containers : - name : \"\" dev : gitUrl : \"\" image : \"\" shell : \"\" workDir : /home/nocalhost-dev storageClass : \"\" resources : null persistentVolumeDirs : [] command : null debug : null sync : null env : [] portForward : [] \u66f4\u65b0\u914d\u7f6e \u00b6 \u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u4efb\u4f55\u66f4\u6539\uff0c\u5e76\u5728 IDE \u63d2\u4ef6\u4fa7\u4f7f\u7528 Comm + S or Ctrl + S \u6765\u4fdd\u5b58\u5b83\u4eec\u3002 Nocalhost \u914d\u7f6e\u7684\u7ed3\u6784 \u00b6 The name and serviceType at the top level of the configuration indicate that this configuration belongs to the deployment of coredns . The content of the configuration is in containers , which is an array and can set different configurations for multiple containers in one workload. \u6b63\u786e\u914d\u7f6e\u5bb9\u5668 \u00b6 \u58f0\u660e\u5bb9\u5668\u540d\u79f0 \u00b6 \u9996\u5148\uff0c\u60a8\u5fc5\u987b\u58f0\u660e containers.[].name \u4e2d\u6bcf\u4e2a\u5bb9\u5668\u7684\u540d\u79f0\uff0c\u4ee5\u533a\u5206\u6bcf\u4e2a\u5bb9\u5668\u3002 For example, if there are two containers in the workload, ContainerA and ContainerB (note that this is just an example, and the container should be named according to your real workload) , then you need to declare the names as follows: name : coredns serviceType : deployment containers : - name : \"ContainerA\" dev : image : \"!!! examplelatest\" .......... - name : \"ContainerB\" dev : image : \"foo:bar\" .......... Surely, if you only need to develop ContainerB , you can configure it only. As follows: name : coredns serviceType : deployment containers : - name : \"ContainerB\" dev : image : \"\" .......... \u5982\u4f55\u914d\u7f6e\u6bcf\u4e2a\u914d\u7f6e\u9879\u76ee\uff1f \u00b6 This part indeed requires a long and detailed explanation, but we first give a simple example here to offer a quick start for Nocalhost configuration. Need an application to operate? If there is no workload to operate, you can use the following command to install a demo application: kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.10/samples/bookinfo/platform/kube/bookinfo.yaml Right-click a workload that has never been configured, such as details-v1. Click DevConfig , then you will see an empty template. Let's make some changes, such as adding an additional env to the development container (the development container will inherit the environment variables from the original container): name : details-v1 serviceType : deployment containers : - name : details dev : env : - name : nocalhost value : example Using Comm + S or Ctrl + S to save the changes, and then enter the DevMode . Since it is just a demonstration of the configuration process, you can select any local directory here and its content will be synchronized to the development container, and then you can select any development image. Type env | grep nocalhost in the terminal after initiating the DevMode . As you can see, the environment variables have been injected correctly. > env | grep nocalhost PWD = /home/nocalhost-dev OLDPWD = /home/nocalhost-dev nocalhost = example More information To learn more about configuration items and corresponding functions, see What configurations does Nocalhost offer? \u5f00\u53d1\u914d\u7f6e\u7684\u529f\u80fd \u00b6 \u6b64\u5916\uff0cNocalhost \u914d\u7f6e\u7684\u8bbe\u8ba1\u8fd8\u5e26\u6765\u4e86\u4e00\u4e9b\u529f\u80fd\u3002\u4e86\u89e3\u8fd9\u4e9b\u529f\u80fd\u53ef\u80fd\u4f1a\u5e2e\u52a9\u60a8\u66f4\u597d\u5730\u4f7f\u7528 Nocalhost\u3002 \u751f\u6548 \u00b6 The development configuration of nocalhost does not take effect immediately. It needs to be saved and then re-enter the DevMode to make it work. \u751f\u547d\u5468\u671f \u00b6 Nocalhost will create a secret in each namespace as a \"mini database\", prefixed with dev.nocalhost.application. . The configuration will be saved in this secret . Data will be remained in this secret until it is destroyed. HELM application If it is a HELM application, for example, its Release.Name is bookinfo , this secret will be named dev.nocalhost.application.bookinfo . Moreover, the data stored in this secret will be destroyed after uninstalling bookinfo . \u80fd\u89c1\u5ea6 \u00b6 From the storage design, you can find that the configuration of Nocalhost is shared. Specifically, in the same namespace of the same cluster, the configuration of one workload is visible on any device and can be modified (with the modification permission of the secret of RBAC ). The configuration all devices get is from the same duplicate.","title":"\u914d\u7f6e\u662f\u4ec0\u4e48\uff1f"},{"location":"config/config-overview-en/#nocalhost","text":"\u5f00\u53d1\u914d\u7f6e\u662f\u56f4\u7ed5 DevMode \u8bbe\u7f6e\u7684, \u4f8b\u5982\uff0c\u5e94\u4f7f\u7528\u54ea\u4e2a\u955c\u50cf\u8f93\u5165 DevMode , \u5f00\u53d1\u5bb9\u5668\u4e2d\u662f\u5426\u9700\u8981\u6301\u4e45\u6027, \u54ea\u4e9b\u6587\u4ef6\u5e94\u540c\u6b65\u5230\u5f00\u53d1\u5bb9\u5668, \u5982\u4f55\u901a\u8fc7\u4e00\u952e\u5728\u5bb9\u5668\u4e2d\u8fdb\u884c\u8c03\u8bd5\u548c\u8fd0\u884c\u670d\u52a1, \u7b49\u7b49 Nocalhost \u4e2d\u7684 DevMode \u5c06\u66f4\u5bb9\u6613\u4f7f\u7528\u6b63\u786e\u4e14\u9002\u5f53\u7684\u5f00\u53d1\u914d\u7f6e\u4f7f\u7528\u3002 \u603b\u4f53\u800c\u8a00\uff0c\u5f00\u53d1\u914d\u7f6e\u662f\u66f4\u597d\u5730\u5b9a\u4e49 DevMode \u7684\u884c\u4e3a\u3002 \u5f00\u53d1\u914d\u7f6e\u548c\u90e8\u7f72\u914d\u7f6e Nocalhost\u7684\u914d\u7f6e\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a\u5f00\u53d1\u914d\u7f6e\u548c\u90e8\u7f72\u914d\u7f6e\u3002 \u90e8\u7f72\u914d\u7f6e\u5b9a\u4e49\u4e86K8S\u5e94\u7528\u7a0b\u5e8f\u5982\u4f55\u90e8\u7f72\uff0c\u5305\u62ec\u4f9d\u8d56\u9879\u63a7\u5236\uff0c\u53ef\u53d8\u6ce8\u5165\u7b49\u3002 \u5f00\u53d1\u914d\u7f6e\u662f\u56f4\u7ed5 DevMode \u8bbe\u7f6e\u7684, \u4f8b\u5982\uff0c\u5728 DevMode \u4e2d\u5e94\u4f7f\u7528\u54ea\u4e2a\u955c\u50cf, \u5f00\u53d1\u5bb9\u5668\u4e2d\u662f\u5426\u9700\u8981\u6301\u4e45\u6027, \u54ea\u4e9b\u6587\u4ef6\u5e94\u540c\u6b65\u5230\u5f00\u53d1\u5bb9\u5668, \u5982\u4f55\u901a\u8fc7\u4e00\u952e\u5728\u5bb9\u5668\u4e2d\u8fdb\u884c\u8c03\u8bd5\u548c\u8fd0\u884c\u670d\u52a1, \u7b49\u7b49 \u901a\u5e38\uff0c\u53ea\u6709 \u5f00\u53d1\u914d\u7f6e \u9700\u8981\u5173\u6ce8\u3002 \u5728\u914d\u7f6e\u6587\u6863\u4e2d\uff0c\u6211\u4eec\u63d0\u5230\u7684\u914d\u7f6e\u662f\u6307\u5f00\u53d1\u914d\u7f6e\uff0c\u9664\u975e\u53e6\u6709\u8bf4\u660e\u3002","title":"Nocalhost \u914d\u7f6e"},{"location":"config/config-overview-en/#_1","text":"","title":"\u67e5\u770b\u5e76\u4fdd\u5b58\u914d\u7f6e"},{"location":"config/config-overview-en/#_2","text":"\u5982\u679c\u60a8\u4ece\u672a\u4e3a\u4efb\u4f55\u5de5\u4f5c\u8d1f\u8f7d\u914d\u7f6e Nocalhost, \u53f3\u952e\u5355\u51fb\u5e76\u9009\u62e9 Dev Config , \u7136\u540e\uff0c\u60a8\u5c06\u770b\u5230\u5982\u4e0b\u7684\u7a7a\u914d\u7f6e, \u8fd9\u4e9b\u90fd\u662f\u5728 nocalhost \u7684 DevMode \u4e2d\u4f7f\u7528\u7684. \u914d\u7f6e\u4e0d\u662f\u5fc5\u987b\u7684 \u60a8\u53ef\u4ee5\u5728\u6ca1\u6709\u4efb\u4f55\u914d\u7f6e\u7684\u60c5\u51b5\u4e0b\u8f93\u5165 DevMode \u3002 name : coredns serviceType : deployment containers : - name : \"\" dev : gitUrl : \"\" image : \"\" shell : \"\" workDir : /home/nocalhost-dev storageClass : \"\" resources : null persistentVolumeDirs : [] command : null debug : null sync : null env : [] portForward : []","title":"\u67e5\u770b\u914d\u7f6e"},{"location":"config/config-overview-en/#_3","text":"\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u4efb\u4f55\u66f4\u6539\uff0c\u5e76\u5728 IDE \u63d2\u4ef6\u4fa7\u4f7f\u7528 Comm + S or Ctrl + S \u6765\u4fdd\u5b58\u5b83\u4eec\u3002","title":"\u66f4\u65b0\u914d\u7f6e"},{"location":"config/config-overview-en/#nocalhost_1","text":"The name and serviceType at the top level of the configuration indicate that this configuration belongs to the deployment of coredns . The content of the configuration is in containers , which is an array and can set different configurations for multiple containers in one workload.","title":"Nocalhost \u914d\u7f6e\u7684\u7ed3\u6784"},{"location":"config/config-overview-en/#_4","text":"","title":"\u6b63\u786e\u914d\u7f6e\u5bb9\u5668"},{"location":"config/config-overview-en/#_5","text":"\u9996\u5148\uff0c\u60a8\u5fc5\u987b\u58f0\u660e containers.[].name \u4e2d\u6bcf\u4e2a\u5bb9\u5668\u7684\u540d\u79f0\uff0c\u4ee5\u533a\u5206\u6bcf\u4e2a\u5bb9\u5668\u3002 For example, if there are two containers in the workload, ContainerA and ContainerB (note that this is just an example, and the container should be named according to your real workload) , then you need to declare the names as follows: name : coredns serviceType : deployment containers : - name : \"ContainerA\" dev : image : \"!!! examplelatest\" .......... - name : \"ContainerB\" dev : image : \"foo:bar\" .......... Surely, if you only need to develop ContainerB , you can configure it only. As follows: name : coredns serviceType : deployment containers : - name : \"ContainerB\" dev : image : \"\" ..........","title":"\u58f0\u660e\u5bb9\u5668\u540d\u79f0"},{"location":"config/config-overview-en/#_6","text":"This part indeed requires a long and detailed explanation, but we first give a simple example here to offer a quick start for Nocalhost configuration. Need an application to operate? If there is no workload to operate, you can use the following command to install a demo application: kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.10/samples/bookinfo/platform/kube/bookinfo.yaml Right-click a workload that has never been configured, such as details-v1. Click DevConfig , then you will see an empty template. Let's make some changes, such as adding an additional env to the development container (the development container will inherit the environment variables from the original container): name : details-v1 serviceType : deployment containers : - name : details dev : env : - name : nocalhost value : example Using Comm + S or Ctrl + S to save the changes, and then enter the DevMode . Since it is just a demonstration of the configuration process, you can select any local directory here and its content will be synchronized to the development container, and then you can select any development image. Type env | grep nocalhost in the terminal after initiating the DevMode . As you can see, the environment variables have been injected correctly. > env | grep nocalhost PWD = /home/nocalhost-dev OLDPWD = /home/nocalhost-dev nocalhost = example More information To learn more about configuration items and corresponding functions, see What configurations does Nocalhost offer?","title":"\u5982\u4f55\u914d\u7f6e\u6bcf\u4e2a\u914d\u7f6e\u9879\u76ee\uff1f"},{"location":"config/config-overview-en/#_7","text":"\u6b64\u5916\uff0cNocalhost \u914d\u7f6e\u7684\u8bbe\u8ba1\u8fd8\u5e26\u6765\u4e86\u4e00\u4e9b\u529f\u80fd\u3002\u4e86\u89e3\u8fd9\u4e9b\u529f\u80fd\u53ef\u80fd\u4f1a\u5e2e\u52a9\u60a8\u66f4\u597d\u5730\u4f7f\u7528 Nocalhost\u3002","title":"\u5f00\u53d1\u914d\u7f6e\u7684\u529f\u80fd"},{"location":"config/config-overview-en/#_8","text":"The development configuration of nocalhost does not take effect immediately. It needs to be saved and then re-enter the DevMode to make it work.","title":"\u751f\u6548"},{"location":"config/config-overview-en/#_9","text":"Nocalhost will create a secret in each namespace as a \"mini database\", prefixed with dev.nocalhost.application. . The configuration will be saved in this secret . Data will be remained in this secret until it is destroyed. HELM application If it is a HELM application, for example, its Release.Name is bookinfo , this secret will be named dev.nocalhost.application.bookinfo . Moreover, the data stored in this secret will be destroyed after uninstalling bookinfo .","title":"\u751f\u547d\u5468\u671f"},{"location":"config/config-overview-en/#_10","text":"From the storage design, you can find that the configuration of Nocalhost is shared. Specifically, in the same namespace of the same cluster, the configuration of one workload is visible on any device and can be modified (with the modification permission of the secret of RBAC ). The configuration all devices get is from the same duplicate.","title":"\u80fd\u89c1\u5ea6"},{"location":"config/config-pattern/","text":"\u63cf\u8ff0 \u00b6 \u5982\u679c\u67d0\u4e9b\u6587\u4ef6\u5e94\u4e0e\u5176\u4ed6\u8bbe\u5907\u540c\u6b65\u6216\u4e0d\u540c\u6b65, \u914d\u7f6e\u76f8\u5e94 SyncFilePattern / IgnoreFilePattern . \u6240\u6709\u6a21\u5f0f\u5747\u76f8\u5bf9\u4e8e\u6587\u4ef6\u5939\u6839 (\u8fdb\u5165 DevMode \u65f6\u9009\u62e9\u7684\u6587\u4ef6\u5939). IgnoreFilePattern \u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e SyncFilePattern \u56e0\u6b64\uff0c\u5982\u679c\u60a8\u7684\u6a21\u5f0f\u90fd\u6db5\u76d6\u4e86\u540c\u4e00\u6587\u4ef6\uff0c\u5219\u8be5\u6587\u4ef6\u5c06\u88ab\u5ffd\u7565\u3002 \u6a21\u5f0f\u8bed\u6cd5 \u00b6 foo (\u5e38\u89c4\u6587\u4ef6\u540d) \u4e0e\u81ea\u5df1\u5339\u914d, \u5373\u6a21\u5f0f foo \u5339\u914d\u6587\u4ef6 foo , subdir/foo as well as any directory named foo . Spaces are treated as regular characters, except for leading and trailing spaces, which are automatically trimmed. * (\u661f\u53f7) matches zero or more characters in a filename, but does not match the directory separator. te*ne matches telephone , subdir/telephone but not tele/phone . ** (\u53cc\u661f\u53f7) matches as above, but also directory separators. te\\*\\*ne matches telephone , subdir/telephone and tele/sub/dir/phone . ? (\u95ee\u53f7) matches a single character that is not the directory separator. te??st matches tebest but not teb/st or test . [] (\u65b9\u62ec\u53f7) denote a character range: [a-z] matches any lower case character. {} (\u5927\u62ec\u53f7) denote a set of comma separated alternatives: {banana,pineapple} matches either banana or pineapple . \\ (\u53cd\u659c\u7ebf) \u201cescapes\u201d a special character so that it loses its special meaning. For example, \\{banana\\} matches {banana} exactly and does not denote a set of alternatives as above. Escaped characters are not supported on Windows. / \u3001 ./ (\u659c\u6760) \u4ec5\u5728\u6587\u4ef6\u5939\u6839\u90e8\u5f00\u59cb\u7684\u5339\u914d\u6a21\u5f0f\u3002 /foo \u6216 ./foo \u5339\u914d foo \u4f46\u4e0d\u5339\u914d subdir/foo . (?i) (\u4e0d\u654f\u611f) \u524d\u7f00\u5f00\u5934\u7684\u6a21\u5f0f\u53ef\u4ee5\u5b9e\u73b0\u5bf9\u6848\u4f8b\u4e0d\u654f\u611f\u7684\u6a21\u5f0f\u5339\u914d\u3002 (?i)test \u5339\u914d test , TEST \u548c tEsT . The (?i) prefix can be combined with other patterns, for example the pattern (?i)picture*.png indicates that Picture1.PNG should be synchronized. On Mac OS and Windows, patterns are always case-insensitive. \u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u6307\u5b9a\u524d\u7f00 (\u5982 \u201c(?i){foo,bar}/*/bar\u201d), \u4f46\u4e0d\u80fd\u5355\u4e00\u7684\u62ec\u53f7 (\u4e0d\u662f \u201c{foo,(?i),bar}/*/bar\u201d). \u4f8b\u5b50 \u00b6 \u7ed9\u5b9a\u76ee\u5f55\u5e03\u5c40\uff1a .DS_Store foo foofoo bar/ baz quux quuz bar2/ baz frobble My Pictures/ Img15.PNG nocalhost/ hello test/ team/ \u4ee5\u53ca\u4ee5\u4e0b\u914d\u7f6e\uff1a SyncFilePattern : - frobble - quuz - ./nocalhost IgnoreFilePattern : - foo - *2 - qu* - (?i)my pictures - nocalhost/t** IgnoreFilePattern \u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e SyncFilePattern \uff0c\u6700\u7ec8\u7ed3\u679c\u53d8\u4e3a\uff1a foo # ignored, matches IgnoreFilePattern \"foo\" foofoo # synced, does not match IgnoreFilePattern \"foo\", but would match \"foo*\" or \"*foo\" bar/ # synced, no such config, so synced baz # synced, no such config, so synced quux # ignored, matches IgnoreFilePattern \"qu*\" quuz # ignored, though specify the SyncFilePattern \"quuz\",but matches higher level IgnoreFilePattern \"qu*\" bar2/ # ignored, matches IgnoreFilePattern \"*2\" baz # ignored, due to dir parent being ignored frobble # ignored, due to dir parent being ignored My Pictures/ # ignored, matched IgnoreFilePattern case insensitive \"(?i)my pictures\" pattern Img15.PNG # ignored, due to parent being ignored nocalhost/ # synced, no such config, so synced hello # synced, no such config, so synced test/ # ignored, matches IgnoreFilePattern \"nocalhost/t**\" team/ # ignored, matches IgnoreFilePattern \"nocalhost/t**\"","title":"\u6a21\u5f0f\u5339\u914d"},{"location":"config/config-pattern/#_1","text":"\u5982\u679c\u67d0\u4e9b\u6587\u4ef6\u5e94\u4e0e\u5176\u4ed6\u8bbe\u5907\u540c\u6b65\u6216\u4e0d\u540c\u6b65, \u914d\u7f6e\u76f8\u5e94 SyncFilePattern / IgnoreFilePattern . \u6240\u6709\u6a21\u5f0f\u5747\u76f8\u5bf9\u4e8e\u6587\u4ef6\u5939\u6839 (\u8fdb\u5165 DevMode \u65f6\u9009\u62e9\u7684\u6587\u4ef6\u5939). IgnoreFilePattern \u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e SyncFilePattern \u56e0\u6b64\uff0c\u5982\u679c\u60a8\u7684\u6a21\u5f0f\u90fd\u6db5\u76d6\u4e86\u540c\u4e00\u6587\u4ef6\uff0c\u5219\u8be5\u6587\u4ef6\u5c06\u88ab\u5ffd\u7565\u3002","title":"\u63cf\u8ff0"},{"location":"config/config-pattern/#_2","text":"foo (\u5e38\u89c4\u6587\u4ef6\u540d) \u4e0e\u81ea\u5df1\u5339\u914d, \u5373\u6a21\u5f0f foo \u5339\u914d\u6587\u4ef6 foo , subdir/foo as well as any directory named foo . Spaces are treated as regular characters, except for leading and trailing spaces, which are automatically trimmed. * (\u661f\u53f7) matches zero or more characters in a filename, but does not match the directory separator. te*ne matches telephone , subdir/telephone but not tele/phone . ** (\u53cc\u661f\u53f7) matches as above, but also directory separators. te\\*\\*ne matches telephone , subdir/telephone and tele/sub/dir/phone . ? (\u95ee\u53f7) matches a single character that is not the directory separator. te??st matches tebest but not teb/st or test . [] (\u65b9\u62ec\u53f7) denote a character range: [a-z] matches any lower case character. {} (\u5927\u62ec\u53f7) denote a set of comma separated alternatives: {banana,pineapple} matches either banana or pineapple . \\ (\u53cd\u659c\u7ebf) \u201cescapes\u201d a special character so that it loses its special meaning. For example, \\{banana\\} matches {banana} exactly and does not denote a set of alternatives as above. Escaped characters are not supported on Windows. / \u3001 ./ (\u659c\u6760) \u4ec5\u5728\u6587\u4ef6\u5939\u6839\u90e8\u5f00\u59cb\u7684\u5339\u914d\u6a21\u5f0f\u3002 /foo \u6216 ./foo \u5339\u914d foo \u4f46\u4e0d\u5339\u914d subdir/foo . (?i) (\u4e0d\u654f\u611f) \u524d\u7f00\u5f00\u5934\u7684\u6a21\u5f0f\u53ef\u4ee5\u5b9e\u73b0\u5bf9\u6848\u4f8b\u4e0d\u654f\u611f\u7684\u6a21\u5f0f\u5339\u914d\u3002 (?i)test \u5339\u914d test , TEST \u548c tEsT . The (?i) prefix can be combined with other patterns, for example the pattern (?i)picture*.png indicates that Picture1.PNG should be synchronized. On Mac OS and Windows, patterns are always case-insensitive. \u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u6307\u5b9a\u524d\u7f00 (\u5982 \u201c(?i){foo,bar}/*/bar\u201d), \u4f46\u4e0d\u80fd\u5355\u4e00\u7684\u62ec\u53f7 (\u4e0d\u662f \u201c{foo,(?i),bar}/*/bar\u201d).","title":"\u6a21\u5f0f\u8bed\u6cd5"},{"location":"config/config-pattern/#_3","text":"\u7ed9\u5b9a\u76ee\u5f55\u5e03\u5c40\uff1a .DS_Store foo foofoo bar/ baz quux quuz bar2/ baz frobble My Pictures/ Img15.PNG nocalhost/ hello test/ team/ \u4ee5\u53ca\u4ee5\u4e0b\u914d\u7f6e\uff1a SyncFilePattern : - frobble - quuz - ./nocalhost IgnoreFilePattern : - foo - *2 - qu* - (?i)my pictures - nocalhost/t** IgnoreFilePattern \u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e SyncFilePattern \uff0c\u6700\u7ec8\u7ed3\u679c\u53d8\u4e3a\uff1a foo # ignored, matches IgnoreFilePattern \"foo\" foofoo # synced, does not match IgnoreFilePattern \"foo\", but would match \"foo*\" or \"*foo\" bar/ # synced, no such config, so synced baz # synced, no such config, so synced quux # ignored, matches IgnoreFilePattern \"qu*\" quuz # ignored, though specify the SyncFilePattern \"quuz\",but matches higher level IgnoreFilePattern \"qu*\" bar2/ # ignored, matches IgnoreFilePattern \"*2\" baz # ignored, due to dir parent being ignored frobble # ignored, due to dir parent being ignored My Pictures/ # ignored, matched IgnoreFilePattern case insensitive \"(?i)my pictures\" pattern Img15.PNG # ignored, due to parent being ignored nocalhost/ # synced, no such config, so synced hello # synced, no such config, so synced test/ # ignored, matches IgnoreFilePattern \"nocalhost/t**\" team/ # ignored, matches IgnoreFilePattern \"nocalhost/t**\"","title":"\u4f8b\u5b50"},{"location":"config/config-spec-en/","text":"\u5728\u5f00\u59cb\u672c\u8282\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u914d\u7f6e Nocalhost\u3002 \u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u5148\u9605\u8bfb \u914d\u7f6e\u6982\u8ff0 \u3002 Nocalhost \u7684\u914d\u7f6e\u53ef\u4ee5\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\u3002 1. \u5f00\u53d1\u5bb9\u5668\u914d\u7f6e \u00b6 \u7b2c\u4e00\u90e8\u5206\u662f\u5f00\u53d1\u5bb9\u5668\u914d\u7f6e\uff0c\u5305\u62ec\uff1a name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : # 1. \u5f00\u53d1\u955c\u50cf image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/golang:zsh # 2. \u6587\u4ef6\u540c\u6b65\u7684\u8fdc\u7a0b\u76ee\u5f55 workDir : /home/nocalhost-dev # 3. \u5f00\u53d1\u5bb9\u5668\u7684\u9ed8\u8ba4 shell shell : /bin/zsh # 4. \u5f00\u53d1\u5bb9\u5668\u7684\u6301\u4e45\u6027\uff08\u5377\uff09 persistentVolumeDirs : - path : /the/path/you/want/to/persistent/in/container capacity : 10Gi - path : /other capacity : 10Gi storageClass : cbs # 5. \u5f00\u53d1\u5bb9\u5668\u8d44\u6e90\u7684\u8bf7\u6c42\u548c\u9650\u5236 resources : limits : memory : 4Gi cpu : \"1\" requests : memory : 2Gi cpu : \"0.5\" # 6. SideCar \u955c\u50cf\u81ea\u5b9a\u4e49 sidecarImage : nocalhost-docker.pkg.coding.net/nocalhost/public/nocalhost-sidecar:sshversion 2. \u589e\u5f3a\u914d\u7f6e \u00b6 \u7b2c\u4e8c\u90e8\u5206\u662f\u589e\u5f3a\u914d\u7f6e\uff0c\u8be5\u914d\u7f6e\u72ec\u7acb\u4e8e\u5f00\u53d1\u5bb9\u5668\uff0c\u5305\u62ec\uff1a name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : # 1. GIT \u7684\u6e90\u4ee3\u7801\u76ee\u5f55 gitUrl : git@github.com:nocalhost/nocalhost.git # 2. \u8fdb\u5165`DevMode`\u540e\uff0c\u662f\u5426\u4f1a\u81ea\u52a8\u6253\u5f00\u7aef\u53e3\u8f6c\u53d1 portForward : - 8080:80 - 3306:3306 # 3. \u6587\u4ef6\u540c\u6b65\u914d\u7f6e\uff0c\u5305\u62ec\u540c\u6b65\u6a21\u5f0f\u548c\u5ffd\u7565\u6a21\u5f0f sync : type : send mode : pattern filePattern : - . ignoreFilePattern : - \".git\" - \".github\" - \".vscode\" - \"node_modules\" 3. \u8fd0\u884c\u3001\u8c03\u8bd5\u53ca\u70ed\u91cd\u8f7d\u914d\u7f6e \u00b6 \u7b2c\u4e09\u90e8\u5206\u662f\u5f00\u53d1\u8fc7\u7a0b\u7684\u914d\u7f6e\uff0c\u5305\u62ec\uff1a name : example serviceType : deployment containers : - name : you-container dev : command : # 1. \u4e00\u952e\u8fd0\u884c run : [ \"./gradlew\" , \"bootRun\" ] # 2. \u4e00\u952e\u8c03\u8bd5 debug : [ \"./gradlew\" , \"bootRun\" , \"--debug-jvm\" ] debug : remoteDebugPort : 5005 # 3. \u70ed\u91cd\u8f7d hotReload : true","title":"\u89c4\u683c"},{"location":"config/config-spec-en/#1","text":"\u7b2c\u4e00\u90e8\u5206\u662f\u5f00\u53d1\u5bb9\u5668\u914d\u7f6e\uff0c\u5305\u62ec\uff1a name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : # 1. \u5f00\u53d1\u955c\u50cf image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/golang:zsh # 2. \u6587\u4ef6\u540c\u6b65\u7684\u8fdc\u7a0b\u76ee\u5f55 workDir : /home/nocalhost-dev # 3. \u5f00\u53d1\u5bb9\u5668\u7684\u9ed8\u8ba4 shell shell : /bin/zsh # 4. \u5f00\u53d1\u5bb9\u5668\u7684\u6301\u4e45\u6027\uff08\u5377\uff09 persistentVolumeDirs : - path : /the/path/you/want/to/persistent/in/container capacity : 10Gi - path : /other capacity : 10Gi storageClass : cbs # 5. \u5f00\u53d1\u5bb9\u5668\u8d44\u6e90\u7684\u8bf7\u6c42\u548c\u9650\u5236 resources : limits : memory : 4Gi cpu : \"1\" requests : memory : 2Gi cpu : \"0.5\" # 6. SideCar \u955c\u50cf\u81ea\u5b9a\u4e49 sidecarImage : nocalhost-docker.pkg.coding.net/nocalhost/public/nocalhost-sidecar:sshversion","title":"1. \u5f00\u53d1\u5bb9\u5668\u914d\u7f6e"},{"location":"config/config-spec-en/#2","text":"\u7b2c\u4e8c\u90e8\u5206\u662f\u589e\u5f3a\u914d\u7f6e\uff0c\u8be5\u914d\u7f6e\u72ec\u7acb\u4e8e\u5f00\u53d1\u5bb9\u5668\uff0c\u5305\u62ec\uff1a name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : # 1. GIT \u7684\u6e90\u4ee3\u7801\u76ee\u5f55 gitUrl : git@github.com:nocalhost/nocalhost.git # 2. \u8fdb\u5165`DevMode`\u540e\uff0c\u662f\u5426\u4f1a\u81ea\u52a8\u6253\u5f00\u7aef\u53e3\u8f6c\u53d1 portForward : - 8080:80 - 3306:3306 # 3. \u6587\u4ef6\u540c\u6b65\u914d\u7f6e\uff0c\u5305\u62ec\u540c\u6b65\u6a21\u5f0f\u548c\u5ffd\u7565\u6a21\u5f0f sync : type : send mode : pattern filePattern : - . ignoreFilePattern : - \".git\" - \".github\" - \".vscode\" - \"node_modules\"","title":"2. \u589e\u5f3a\u914d\u7f6e"},{"location":"config/config-spec-en/#3","text":"\u7b2c\u4e09\u90e8\u5206\u662f\u5f00\u53d1\u8fc7\u7a0b\u7684\u914d\u7f6e\uff0c\u5305\u62ec\uff1a name : example serviceType : deployment containers : - name : you-container dev : command : # 1. \u4e00\u952e\u8fd0\u884c run : [ \"./gradlew\" , \"bootRun\" ] # 2. \u4e00\u952e\u8c03\u8bd5 debug : [ \"./gradlew\" , \"bootRun\" , \"--debug-jvm\" ] debug : remoteDebugPort : 5005 # 3. \u70ed\u91cd\u8f7d hotReload : true","title":"3. \u8fd0\u884c\u3001\u8c03\u8bd5\u53ca\u70ed\u91cd\u8f7d\u914d\u7f6e"},{"location":"config/configure-en/","text":"\u9664\u4e86\u5c06\u914d\u7f6e\u653e\u5165 IDE \u63d2\u4ef6\u7684 DevConfig \uff08\u53f3\u952e\u5355\u51fb\uff09\u4e4b\u5916\uff0cNocalhost \u8fd8\u652f\u6301\u5c06\u5176\u653e\u5165\u6e90\u4ee3\u7801\u76ee\u5f55\uff0cConfigMap \u6216\u6ce8\u91ca\u4e2d\u3002 \u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5c06\u914d\u7f6e\u7f6e\u4e8e\u6ce8\u91ca\uff0c\u638c\u8235\u56fe\u6216 RawManifest \u4e2d\uff0c\u4ee5\u907f\u514d\u901a\u8fc7 IDE \u91cd\u590d\u914d\u7f6e\u3002 PRE-REQUIRE \u8bf7\u786e\u4fdd\u60a8\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u6b63\u786e\u914d\u7f6eNocahost\u3002 \u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u5148\u9605\u8bfb Nocalhost\u6982\u8ff0 \u3002 \u96f6\u914d\u7f6e \u00b6 Zero-configuration means to enter DevMode without any Nocalhost configuration. The only thing needed is to select or type in a development image. \u96f6\u914d\u7f6e\u7684\u884c\u4e3a\u671f\u671b \u00b6 Why care about the expectation of behavior? In zero-configuration, you normally do not need to care about what Nocalhost has done. However, if any of the following behaviors does not meet your expectation, you need to configure Nocalhost to customize it. Use /home/nocalhost-dev in the container as the target directory for file synchronization. Try to enter the development container by using the following commands in order: zsh, bash, sh. Without persistence enabled, the local data generated in the development container will be lost after closing or restarting the container. Unable to use one-click running and debugging Synchronize all contents of the selected directory into the container \u6e90\u4ee3\u7801\u76ee\u5f55\u4e2d\u7684\u914d\u7f6e \u00b6 Nocalhost supports putting the configuration in source code directory, which can be done by experienced developers, so that other team members can share the configuration. \u5c06\u914d\u7f6e\u6dfb\u52a0\u5230\u6e90\u4ee3\u7801 \u00b6 Check that the configuration works well in the DevConfig of a specific workload (right-click). Then copy it as below: name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : image : nocalhost-docker.pkg.coding.net/nocalhost/dev-images/golang:zsh env : - name : NOCALHOST_INJECT_DEV_ENV value : WHATEVER Create .nocalhost directory in the corresponding source code directory, and then create a file named config.yaml . Paste and save the content in config.yaml . \u751f\u6548 \u00b6 Right-click this workload again and click DevConfig . You will find that the configuration has been read from the local directory and there is a \"Tips\" at the top, indicating that this configuration is a in-memory replica of local file. # Tips: This configuration is a in-memory replica of local file: # # '/Users/anur/GolandProjects/nocalhost/.nocalhost/config.yaml' # # You should modify your configuration in local file, and the modification will # take effect immediately. (Dev modification will take effect the next time you enter the DevMode) # # In addition, if you want to config multi service in same config.yaml, or use # the Server-version of Nocalhost, you can also configure under the definition # of the application, such as: # https://github.com/nocalhost/bookinfo/blob/main/.nocalhost/config.yaml # \u95ee\u7b54 \u00b6 \u5f53\u60a8\u5fd8\u8bb0\u54ea\u4e2a\u672c\u5730\u76ee\u5f55\u4e0e\u5de5\u4f5c\u8d1f\u8f7d\u76f8\u5173\u8054 Right-click this workload and click Open Project to open the associated directory or click Associate Local DIR to associate a new directory. Multiple workloads in one source code You can configure multiple workloads in one source code. To do this, add a layer to make the configuration items an array, as shown below: - name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : image : nocalhost-docker.pkg.coding.net/nocalhost/dev-images/golang:zsh env : - name : NOCALHOST_INJECT_DEV_ENV value : WHATEVER - name : nocalhost-web serviceType : deployment containers : - name : nocalhost-web dev : image : nocalhost-docker.pkg.coding.net/nocalhost/dev-images/golang:zsh ConfigMap \u4e2d\u7684\u914d\u7f6e \u00b6 Nocalhost supports putting the configuration in Configmap, which helps to customize the association with the environment. For example, you can write some customized configurations in Configmap and apply it througth the deployment script or CD. \u5c06\u914d\u7f6e\u6dfb\u52a0\u5230 ConfigMap \u4e2d \u00b6 Here we display a very general Helm template of Nocalhost configuration. Note that you do not have to use Helm, and this is just an example for better explanation here. apiVersion : v1 kind : ConfigMap metadata : name : \"dev.nocalhost.config.{{ .Release.Name }}\" labels : dep-management : nocalhost annotations : \"helm.sh/hook\" : pre-install data : config : |- {{ .Files.Get .Values.nocalhost.config.path | nindent 4 }} What is {{ .Release.Name }} You can find that there are two parts in configmap that are introduced as placeholders. The first is {{ .Release.Name }} in the fourth line, which is the name of application. If you are using Helm or Nocalhost to install the application, you need to write the corresponding application name in it, otherwise it should be default.application all the time. What is {{ .Files.Get .Values.nocalhost.config.path | nindent 4 }} This is indeed the position where Nocalhost config should be written in, with four indents. After knowing the above placeholders, we give the real configmap, as shown in the following format: apiVersion : v1 kind : ConfigMap metadata : name : \"dev.nocalhost.config.default.application\" labels : dep-management : nocalhost annotations : \"helm.sh/hook\" : pre-install data : config : |- - name: nocalhost-api serviceType: deployment containers: - name: nocalhost-api dev: image: nocalhost-docker.pkg.coding.net/nocalhost/dev-images/golang:zsh env: - name: NOCALHOST_INJECT_DEV_ENV value: WHATEVER - name: nocalhost-web serviceType: deployment containers: - name: nocalhost-web dev: image: nocalhost-docker.pkg.coding.net/nocalhost/dev-images/golang:zsh Configmap \u914d\u7f6e\u6ce8\u610f\u914d\u7f6e \u00b6 Notes Naming rules: It must follow the format dev.nocalhost.config.${appName} , namely name: \"dev.nocalhost.config.{{ .Release.Name }}\" . Labels: It needs a key-value label, which is fixed as dep-management: nocalhost . config is in data.config as a text block and please pay attention to the indent of the configuration. \u751f\u6548 \u00b6 After configuring Configmap, right-click this workload again and click DevConfig . If you get the following tips as below, indicating that this configuration is a in-memory replica of local file, that means the configuration has taken effect. # Tips: This configuration is a in-memory replica of configmap: # # 'dev.nocalhost.config.default.application' # # You should modify your configuration in configmap, and the modification will # take effect immediately. (Dev modification will take effect the next time you enter the DevMode) # \u6ce8\u91ca\u4e2d\u7684\u914d\u7f6e \u00b6 Nocalhost also supports putting the configuration in annotations, which is for the same consideration as configmap. \u5728\u6ce8\u91ca\u4e2d\u6dfb\u52a0\u914d\u7f6e \u00b6 In like manner, we use a Helm template for explanation, which will help to understand which values should be customized and the corresponding format requirements. apiVersion : apps/v1 kind : Deployment metadata : name : nocalhost-api annotations : dev.nocalhost : |- {{ .Files.Get .Values.nocalhost.annotations.path.authors | nindent 6 }} Annotations configuration is very simple. Here you only need to declare an annotation, fix the key to dev.nocalhost and fix the value as a text block with six fixed indents. As shown below: apiVersion : apps/v1 kind : Deployment metadata : name : nocalhost-api annotations : dev.nocalhost : |- name: nocalhost-api serviceType: deployment containers: - name: nocalhost-api dev: image: nocalhost-docker.pkg.coding.net/nocalhost/dev-images/golang:zsh env: - name: NOCALHOST_INJECT_DEV_ENV value: WHATEVER Since one workload will not have multiple configurations, there is no need to declare it as array (although array is also supported). Moreover, the configuration has been fixedly bound to the workload (whether it is Deployment, StatefulSet, DaemonSet or others), so there is also no need to declare its name and type. As shown below: apiVersion : apps/v1 kind : Deployment metadata : name : nocalhost-api annotations : dev.nocalhost : |- containers: - name: nocalhost-api dev: image: nocalhost-docker.pkg.coding.net/nocalhost/dev-images/golang:zsh env: - name: NOCALHOST_INJECT_DEV_ENV value: WHATEVER \u6ce8\u91ca\u914d\u7f6e\u6ce8\u610f \u00b6 Notes The key must be dev.nocalhost , and the value must be a text block of Nocalhost Config . Pay attention to the indent. \u751f\u6548 \u00b6 After configuring the Annotation, right-click this workload again and click DevConfig . The following tips means the configuration has taken effect. # Tips: This configuration is a in-memory replica of annotation: # # annotations: # dev.nocalhost: | # [Your Config] # # You should modify your configuration in resource's annotation', and the modification will # take effect immediately. (Dev modification will take effect the next time you enter the DevMode) # \u672c\u5730\uff0c\u914d\u7f6e\u548c\u6ce8\u91ca\u914d\u7f6e\u7684\u529f\u80fd \u00b6 \u914d\u7f6e\u7684\u7c92\u5ea6\u548c\u4f18\u5148\u7ea7 \u00b6 Nocalhost supports hybrid configurations, for example, if there are ten workloads, three of them can be local, three are Configmap, three are Annotations, and the last one is zero-configuration. If a workload is configured with multiple ways, the priority is as follows: Local > Annotations > Configmap > in DevConfig \u914d\u7f6e\u8bfb\u53d6\u65f6\u95f4 \u00b6 Before using Nocalhost configuration, Nocalhost will check all configuration methods and try to read them. Therefore, the read of the configuration can be considered to be real-time. DevConfig \u7279\u5f81 \u00b6 Please read Nocalhost DevConfig Features","title":"\u914d\u7f6e\u65b9\u5f0f"},{"location":"config/configure-en/#_1","text":"Zero-configuration means to enter DevMode without any Nocalhost configuration. The only thing needed is to select or type in a development image.","title":"\u96f6\u914d\u7f6e"},{"location":"config/configure-en/#_2","text":"Why care about the expectation of behavior? In zero-configuration, you normally do not need to care about what Nocalhost has done. However, if any of the following behaviors does not meet your expectation, you need to configure Nocalhost to customize it. Use /home/nocalhost-dev in the container as the target directory for file synchronization. Try to enter the development container by using the following commands in order: zsh, bash, sh. Without persistence enabled, the local data generated in the development container will be lost after closing or restarting the container. Unable to use one-click running and debugging Synchronize all contents of the selected directory into the container","title":"\u96f6\u914d\u7f6e\u7684\u884c\u4e3a\u671f\u671b"},{"location":"config/configure-en/#_3","text":"Nocalhost supports putting the configuration in source code directory, which can be done by experienced developers, so that other team members can share the configuration.","title":"\u6e90\u4ee3\u7801\u76ee\u5f55\u4e2d\u7684\u914d\u7f6e"},{"location":"config/configure-en/#_4","text":"Check that the configuration works well in the DevConfig of a specific workload (right-click). Then copy it as below: name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : image : nocalhost-docker.pkg.coding.net/nocalhost/dev-images/golang:zsh env : - name : NOCALHOST_INJECT_DEV_ENV value : WHATEVER Create .nocalhost directory in the corresponding source code directory, and then create a file named config.yaml . Paste and save the content in config.yaml .","title":"\u5c06\u914d\u7f6e\u6dfb\u52a0\u5230\u6e90\u4ee3\u7801"},{"location":"config/configure-en/#_5","text":"Right-click this workload again and click DevConfig . You will find that the configuration has been read from the local directory and there is a \"Tips\" at the top, indicating that this configuration is a in-memory replica of local file. # Tips: This configuration is a in-memory replica of local file: # # '/Users/anur/GolandProjects/nocalhost/.nocalhost/config.yaml' # # You should modify your configuration in local file, and the modification will # take effect immediately. (Dev modification will take effect the next time you enter the DevMode) # # In addition, if you want to config multi service in same config.yaml, or use # the Server-version of Nocalhost, you can also configure under the definition # of the application, such as: # https://github.com/nocalhost/bookinfo/blob/main/.nocalhost/config.yaml #","title":"\u751f\u6548"},{"location":"config/configure-en/#_6","text":"\u5f53\u60a8\u5fd8\u8bb0\u54ea\u4e2a\u672c\u5730\u76ee\u5f55\u4e0e\u5de5\u4f5c\u8d1f\u8f7d\u76f8\u5173\u8054 Right-click this workload and click Open Project to open the associated directory or click Associate Local DIR to associate a new directory. Multiple workloads in one source code You can configure multiple workloads in one source code. To do this, add a layer to make the configuration items an array, as shown below: - name : nocalhost-api serviceType : deployment containers : - name : nocalhost-api dev : image : nocalhost-docker.pkg.coding.net/nocalhost/dev-images/golang:zsh env : - name : NOCALHOST_INJECT_DEV_ENV value : WHATEVER - name : nocalhost-web serviceType : deployment containers : - name : nocalhost-web dev : image : nocalhost-docker.pkg.coding.net/nocalhost/dev-images/golang:zsh","title":"\u95ee\u7b54"},{"location":"config/configure-en/#configmap","text":"Nocalhost supports putting the configuration in Configmap, which helps to customize the association with the environment. For example, you can write some customized configurations in Configmap and apply it througth the deployment script or CD.","title":"ConfigMap \u4e2d\u7684\u914d\u7f6e"},{"location":"config/configure-en/#configmap_1","text":"Here we display a very general Helm template of Nocalhost configuration. Note that you do not have to use Helm, and this is just an example for better explanation here. apiVersion : v1 kind : ConfigMap metadata : name : \"dev.nocalhost.config.{{ .Release.Name }}\" labels : dep-management : nocalhost annotations : \"helm.sh/hook\" : pre-install data : config : |- {{ .Files.Get .Values.nocalhost.config.path | nindent 4 }} What is {{ .Release.Name }} You can find that there are two parts in configmap that are introduced as placeholders. The first is {{ .Release.Name }} in the fourth line, which is the name of application. If you are using Helm or Nocalhost to install the application, you need to write the corresponding application name in it, otherwise it should be default.application all the time. What is {{ .Files.Get .Values.nocalhost.config.path | nindent 4 }} This is indeed the position where Nocalhost config should be written in, with four indents. After knowing the above placeholders, we give the real configmap, as shown in the following format: apiVersion : v1 kind : ConfigMap metadata : name : \"dev.nocalhost.config.default.application\" labels : dep-management : nocalhost annotations : \"helm.sh/hook\" : pre-install data : config : |- - name: nocalhost-api serviceType: deployment containers: - name: nocalhost-api dev: image: nocalhost-docker.pkg.coding.net/nocalhost/dev-images/golang:zsh env: - name: NOCALHOST_INJECT_DEV_ENV value: WHATEVER - name: nocalhost-web serviceType: deployment containers: - name: nocalhost-web dev: image: nocalhost-docker.pkg.coding.net/nocalhost/dev-images/golang:zsh","title":"\u5c06\u914d\u7f6e\u6dfb\u52a0\u5230 ConfigMap \u4e2d"},{"location":"config/configure-en/#configmap_2","text":"Notes Naming rules: It must follow the format dev.nocalhost.config.${appName} , namely name: \"dev.nocalhost.config.{{ .Release.Name }}\" . Labels: It needs a key-value label, which is fixed as dep-management: nocalhost . config is in data.config as a text block and please pay attention to the indent of the configuration.","title":"Configmap \u914d\u7f6e\u6ce8\u610f\u914d\u7f6e"},{"location":"config/configure-en/#_7","text":"After configuring Configmap, right-click this workload again and click DevConfig . If you get the following tips as below, indicating that this configuration is a in-memory replica of local file, that means the configuration has taken effect. # Tips: This configuration is a in-memory replica of configmap: # # 'dev.nocalhost.config.default.application' # # You should modify your configuration in configmap, and the modification will # take effect immediately. (Dev modification will take effect the next time you enter the DevMode) #","title":"\u751f\u6548"},{"location":"config/configure-en/#_8","text":"Nocalhost also supports putting the configuration in annotations, which is for the same consideration as configmap.","title":"\u6ce8\u91ca\u4e2d\u7684\u914d\u7f6e"},{"location":"config/configure-en/#_9","text":"In like manner, we use a Helm template for explanation, which will help to understand which values should be customized and the corresponding format requirements. apiVersion : apps/v1 kind : Deployment metadata : name : nocalhost-api annotations : dev.nocalhost : |- {{ .Files.Get .Values.nocalhost.annotations.path.authors | nindent 6 }} Annotations configuration is very simple. Here you only need to declare an annotation, fix the key to dev.nocalhost and fix the value as a text block with six fixed indents. As shown below: apiVersion : apps/v1 kind : Deployment metadata : name : nocalhost-api annotations : dev.nocalhost : |- name: nocalhost-api serviceType: deployment containers: - name: nocalhost-api dev: image: nocalhost-docker.pkg.coding.net/nocalhost/dev-images/golang:zsh env: - name: NOCALHOST_INJECT_DEV_ENV value: WHATEVER Since one workload will not have multiple configurations, there is no need to declare it as array (although array is also supported). Moreover, the configuration has been fixedly bound to the workload (whether it is Deployment, StatefulSet, DaemonSet or others), so there is also no need to declare its name and type. As shown below: apiVersion : apps/v1 kind : Deployment metadata : name : nocalhost-api annotations : dev.nocalhost : |- containers: - name: nocalhost-api dev: image: nocalhost-docker.pkg.coding.net/nocalhost/dev-images/golang:zsh env: - name: NOCALHOST_INJECT_DEV_ENV value: WHATEVER","title":"\u5728\u6ce8\u91ca\u4e2d\u6dfb\u52a0\u914d\u7f6e"},{"location":"config/configure-en/#_10","text":"Notes The key must be dev.nocalhost , and the value must be a text block of Nocalhost Config . Pay attention to the indent.","title":"\u6ce8\u91ca\u914d\u7f6e\u6ce8\u610f"},{"location":"config/configure-en/#_11","text":"After configuring the Annotation, right-click this workload again and click DevConfig . The following tips means the configuration has taken effect. # Tips: This configuration is a in-memory replica of annotation: # # annotations: # dev.nocalhost: | # [Your Config] # # You should modify your configuration in resource's annotation', and the modification will # take effect immediately. (Dev modification will take effect the next time you enter the DevMode) #","title":"\u751f\u6548"},{"location":"config/configure-en/#_12","text":"","title":"\u672c\u5730\uff0c\u914d\u7f6e\u548c\u6ce8\u91ca\u914d\u7f6e\u7684\u529f\u80fd"},{"location":"config/configure-en/#_13","text":"Nocalhost supports hybrid configurations, for example, if there are ten workloads, three of them can be local, three are Configmap, three are Annotations, and the last one is zero-configuration. If a workload is configured with multiple ways, the priority is as follows: Local > Annotations > Configmap > in DevConfig","title":"\u914d\u7f6e\u7684\u7c92\u5ea6\u548c\u4f18\u5148\u7ea7"},{"location":"config/configure-en/#_14","text":"Before using Nocalhost configuration, Nocalhost will check all configuration methods and try to read them. Therefore, the read of the configuration can be considered to be real-time.","title":"\u914d\u7f6e\u8bfb\u53d6\u65f6\u95f4"},{"location":"config/configure-en/#devconfig","text":"Please read Nocalhost DevConfig Features","title":"DevConfig \u7279\u5f81"},{"location":"config/deployment/","text":"Overview / Deploy Config We will introduce Nocalhost Deploy config in this section. Nocalhost supports the deployment of K8s applications by Helm, RawManifest and Kustomiz. They can provide functions such as dependency order specification when apply the workload, deployment env injection, life cycle hook, etc. Moreover, they also support multiple configuration methods, such as Configmap, Annotation, etc. PRE-REQUIRE \u5728\u5f00\u59cb\u672c\u8282\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u914d\u7f6eNocalhost\u3002\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u9996\u5148\u9605\u8bfb[Nocalhost\u6982\u8ff0]config-overview-en.md\uff09\u3002 \u5feb\u901f\u542f\u52a8 - \u57fa\u672c\u7684 Nocalhost \u90e8\u7f72\u914d\u7f6e \u00b6 We have introduced some functions provided by Deploy Config , so in this section, we will give a few examples to explain more about the basic Nocalhost Deploy Config and installation. Nocalhost \u90e8\u7f72\u914d\u7f6e\u89c4\u8303 \u00b6 After knowing the most basic Nocalhost Deploy Config , we will introduce the specific deployment configurations in this section, including dependency order specification when initiating the workload, deployment env injection, hook, etc. Dep \u7ec4\u4ef6\u548c\u5176\u4ed6\u65b9\u6cd5 \u00b6 Nocalhost Dev Config supports multiple methods, such as ConfigMap, Annotations, etc. In fact, these methods are also applicable in Deploy Config , but some functions need to work in conjunction with K8s WebHook, and the Nocalhost-Dep component in Nocalhost plays that role. Nocahost Server will automatically deploy this component, so if you do not use Nocalhost Server , you need to deployment extra component Nocalhost Dep . Config.yaml \u53e5\u6cd5 \u00b6 To improve the reusability and flexibility of Nocalhost configuration and avoid repeated configure, Nocahost provides environment variable injection and yaml include syntax.","title":"\u90e8\u7f72\u914d\u7f6e"},{"location":"config/deployment/#-nocalhost","text":"We have introduced some functions provided by Deploy Config , so in this section, we will give a few examples to explain more about the basic Nocalhost Deploy Config and installation.","title":"\u5feb\u901f\u542f\u52a8 - \u57fa\u672c\u7684 Nocalhost \u90e8\u7f72\u914d\u7f6e"},{"location":"config/deployment/#nocalhost","text":"After knowing the most basic Nocalhost Deploy Config , we will introduce the specific deployment configurations in this section, including dependency order specification when initiating the workload, deployment env injection, hook, etc.","title":"Nocalhost \u90e8\u7f72\u914d\u7f6e\u89c4\u8303"},{"location":"config/deployment/#dep","text":"Nocalhost Dev Config supports multiple methods, such as ConfigMap, Annotations, etc. In fact, these methods are also applicable in Deploy Config , but some functions need to work in conjunction with K8s WebHook, and the Nocalhost-Dep component in Nocalhost plays that role. Nocahost Server will automatically deploy this component, so if you do not use Nocalhost Server , you need to deployment extra component Nocalhost Dep .","title":"Dep \u7ec4\u4ef6\u548c\u5176\u4ed6\u65b9\u6cd5"},{"location":"config/deployment/#configyaml","text":"To improve the reusability and flexibility of Nocalhost configuration and avoid repeated configure, Nocahost provides environment variable injection and yaml include syntax.","title":"Config.yaml \u53e5\u6cd5"},{"location":"config/deployment/advance/","text":"Nocalhost \u7684\u5f00\u53d1\u914d\u7f6e\u652f\u6301\u591a\u79cd\u5f00\u53d1\u65b9\u5f0f\uff0c\u4f8b\u5982 ConfigMap\uff0c\u6ce8\u91ca\u7b49\u3002 \u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e9b\u914d\u7f6e\u65b9\u6cd5**\u4e5f\u9002\u5408**\u90e8\u7f72\u914d\u7f6e\u3002 \u4f46\u662f\uff0c\u9700\u8981\u901a\u8fc7 K8S Admission Webhook \u6765\u5b9e\u73b0\u67d0\u4e9b\u529f\u80fd\u3002 \u5728 Nocalhost \u4e2d\uff0c\u4e00\u4e2a\u79f0\u4e3a Nocalhost-Dep \u7684\u7ec4\u4ef6\u626e\u6f14\u6b64\u89d2\u8272\uff0c Nocalhost Server \u5c06\u81ea\u52a8\u4e3a\u60a8\u90e8\u7f72\u6b64\u7ec4\u4ef6\u3002 if you do not use Nocalhost Server , then additional deployment of Nocalhost Dep is required. Info Nocalhost\u63d0\u4f9b\u54ea\u4e9b\u90e8\u7f72\u914d\u7f6e\uff1f \u4ecb\u7ecd\u54ea\u4e9b\u90e8\u7f72\u914d\u7f6e\u9700\u8981\u989d\u5916\u90e8\u7f72 nocalhost dep . \u4f7f\u7528 ConfigMap \u8fdb\u884c\u90e8\u7f72\u914d\u7f6e \u00b6 To make a simple deployment configuration is mentioned in Introduction to Deployment Configuration Nocalhost Basic Deployment Configuration . Combining with What configuration methods are supported by Nocalhost-place the configuration in configmap , we can get the configuration: We have prepared an demo for this, which will automatically deploy Nocalhost Dep , and use the way of ConfigMap to make the deployment configuration. Using the following commands to try out this demo (trying the Chart package requires ClusterAdmin) git clone https://github.com/nocalhost/bookinfo && git checkout config/example Then use Helm to install: helm dep build ./charts/bookinfo && helm install bookinfo ./charts/bookinfo The content of the deployment configuration itself will not be repeated here. let's take a look at charts/bookinfo/templates/nocalhost-app-config.yaml . apiVersion : v1 kind : ConfigMap metadata : # [Nocalhost]: nocalhost configmap should be named with dev.nocalhost.config.${appName} name : \"dev.nocalhost.config.{{ .Release.Name }}\" # [Nocalhost]: labels {dep-management: nocalhost} is also required labels : dep-management : nocalhost annotations : \"helm.sh/hook\" : pre-install data : config : |- {{ .Files.Get .Values.nocalhost.config.path | nindent 4 }} Danger This ConfigMap requires to apply to Api Server first. For example, in the Helm application scenario, it should be declared as pre-install . annotations : \"helm.sh/hook\" : pre-install It introduces .Values.nocalhost.config.path to render the main body of the deployment configuration. The configuration is actually declared in ./charts/bookinfo/example/config-from-cm/nocalhost-full-config.yaml , which is a standard Nocalhost deployment configuration without any additional modification: application : env : - name : APP_ENV_1 value : EXAMPLE - name : APP_ENV_2 value : EXAMPLE services : - name : productpage serviceType : deployment containers : - name : productpage install : env : - name : ENV_INJECT_EXAM value : BASE - name : details serviceType : deployment containers : - install : env : - name : ENV_INJECT_EXAM value : BASE - name : ratings serviceType : deployment dependLabelSelector : pods : - \"productpage\" containers : - install : env : - name : ENV_INJECT_EXAM value : BASE - name : reviews serviceType : deployment dependLabelSelector : pods : - \"productpage\" containers : - install : env : - name : ENV_INJECT_EXAM value : BASE - name : authors serviceType : deployment dependLabelSelector : pods : - \"productpage\" containers : - install : env : - name : ENV_INJECT_EXAM value : BASE \u4f7f\u7528\u6ce8\u91ca\u8fdb\u884c\u90e8\u7f72\u914d\u7f6e \u00b6 The method of usage is exactly the same as Which configuration methods Nocalhost supports-place the configuration in annotations . Extra attention Since Annotations closely follow the workload, some configurations at the application level are not supported. Only the configurations under application.services is supported. Again, use the same demo project: Use the following commands to get and try out this project (trying the Chart package requires ClusterAdmin) git clone https://github.com/nocalhost/bookinfo && git checkout config/example Then use Helm to install: helm dep build ./charts/bookinfo && helm install bookinfo ./charts/bookinfo -f ./charts/bookinfo/values-annotation-config.yaml We specified values-annotation-config.yaml as Values.yaml, which specifies the rendering of the local configuration file to the Annotations of the workload. Take ./charts/bookinfo/templates/microservice-details.yaml as an !!! example apiVersion : apps/v1 kind : Deployment metadata : name : details {{ - if .Values.nocalhost.annotations.path.details }} annotations : nocalhost.dev : |- {{ .Files.Get .Values.nocalhost.annotations.path.details | nindent 6 }} {{ - end }} labels : app : details Helm will render the path configured by .Values.nocalhost.annotations.path.details into yaml, whose content is as follows, that is, ./charts/bookinfo/example/config-from-annotations/details.yaml specified in Values : containers : - install : env : - name : ENV_INJECT_EXAM value : ANNOTATIONS \u5982\u4f55\u90e8\u7f72 Nocalhost Dep \u00b6 \u6211\u4eec\u5efa\u8bae\u4f7f\u7528 Nocalhost Server \u83b7\u53d6 Nocalhost Dep \u7684\u6240\u6709\u529f\u80fd\u3002 Danger \u5373\u5c06\u63a8\u51fa","title":"\u9ad8\u7ea7"},{"location":"config/deployment/advance/#configmap","text":"To make a simple deployment configuration is mentioned in Introduction to Deployment Configuration Nocalhost Basic Deployment Configuration . Combining with What configuration methods are supported by Nocalhost-place the configuration in configmap , we can get the configuration: We have prepared an demo for this, which will automatically deploy Nocalhost Dep , and use the way of ConfigMap to make the deployment configuration. Using the following commands to try out this demo (trying the Chart package requires ClusterAdmin) git clone https://github.com/nocalhost/bookinfo && git checkout config/example Then use Helm to install: helm dep build ./charts/bookinfo && helm install bookinfo ./charts/bookinfo The content of the deployment configuration itself will not be repeated here. let's take a look at charts/bookinfo/templates/nocalhost-app-config.yaml . apiVersion : v1 kind : ConfigMap metadata : # [Nocalhost]: nocalhost configmap should be named with dev.nocalhost.config.${appName} name : \"dev.nocalhost.config.{{ .Release.Name }}\" # [Nocalhost]: labels {dep-management: nocalhost} is also required labels : dep-management : nocalhost annotations : \"helm.sh/hook\" : pre-install data : config : |- {{ .Files.Get .Values.nocalhost.config.path | nindent 4 }} Danger This ConfigMap requires to apply to Api Server first. For example, in the Helm application scenario, it should be declared as pre-install . annotations : \"helm.sh/hook\" : pre-install It introduces .Values.nocalhost.config.path to render the main body of the deployment configuration. The configuration is actually declared in ./charts/bookinfo/example/config-from-cm/nocalhost-full-config.yaml , which is a standard Nocalhost deployment configuration without any additional modification: application : env : - name : APP_ENV_1 value : EXAMPLE - name : APP_ENV_2 value : EXAMPLE services : - name : productpage serviceType : deployment containers : - name : productpage install : env : - name : ENV_INJECT_EXAM value : BASE - name : details serviceType : deployment containers : - install : env : - name : ENV_INJECT_EXAM value : BASE - name : ratings serviceType : deployment dependLabelSelector : pods : - \"productpage\" containers : - install : env : - name : ENV_INJECT_EXAM value : BASE - name : reviews serviceType : deployment dependLabelSelector : pods : - \"productpage\" containers : - install : env : - name : ENV_INJECT_EXAM value : BASE - name : authors serviceType : deployment dependLabelSelector : pods : - \"productpage\" containers : - install : env : - name : ENV_INJECT_EXAM value : BASE","title":"\u4f7f\u7528 ConfigMap \u8fdb\u884c\u90e8\u7f72\u914d\u7f6e"},{"location":"config/deployment/advance/#_1","text":"The method of usage is exactly the same as Which configuration methods Nocalhost supports-place the configuration in annotations . Extra attention Since Annotations closely follow the workload, some configurations at the application level are not supported. Only the configurations under application.services is supported. Again, use the same demo project: Use the following commands to get and try out this project (trying the Chart package requires ClusterAdmin) git clone https://github.com/nocalhost/bookinfo && git checkout config/example Then use Helm to install: helm dep build ./charts/bookinfo && helm install bookinfo ./charts/bookinfo -f ./charts/bookinfo/values-annotation-config.yaml We specified values-annotation-config.yaml as Values.yaml, which specifies the rendering of the local configuration file to the Annotations of the workload. Take ./charts/bookinfo/templates/microservice-details.yaml as an !!! example apiVersion : apps/v1 kind : Deployment metadata : name : details {{ - if .Values.nocalhost.annotations.path.details }} annotations : nocalhost.dev : |- {{ .Files.Get .Values.nocalhost.annotations.path.details | nindent 6 }} {{ - end }} labels : app : details Helm will render the path configured by .Values.nocalhost.annotations.path.details into yaml, whose content is as follows, that is, ./charts/bookinfo/example/config-from-annotations/details.yaml specified in Values : containers : - install : env : - name : ENV_INJECT_EXAM value : ANNOTATIONS","title":"\u4f7f\u7528\u6ce8\u91ca\u8fdb\u884c\u90e8\u7f72\u914d\u7f6e"},{"location":"config/deployment/advance/#nocalhost-dep","text":"\u6211\u4eec\u5efa\u8bae\u4f7f\u7528 Nocalhost Server \u83b7\u53d6 Nocalhost Dep \u7684\u6240\u6709\u529f\u80fd\u3002 Danger \u5373\u5c06\u63a8\u51fa","title":"\u5982\u4f55\u90e8\u7f72 Nocalhost Dep"},{"location":"config/deployment/quickstart/","text":"\u60a8\u53ef\u4ee5\u914d\u7f6e\u9002\u5f53\u7684\u90e8\u7f72\u65b9\u6cd5\uff0c\u901a\u8fc7 Nocalhost IDE \u63d2\u4ef6\u90e8\u7f72 K8s \u5e94\u7528\u7a0b\u5e8f\u3002Nocalhost \u652f\u6301\u4ee5\u4e0b\u7c7b\u578b\u90e8\u7f72\u5e94\u7528: RawManifest Helm Kustomize \u90e8\u7f72\u914d\u7f6e\u7ed3\u6784 \u00b6 Dev Config is a part of Deploy Config. The simplest structure of Deploy Config is as follows: application : name : \"\" manifestType : \"\" resourcePath : [] application includes the application name, application type and the resource array. Application name will be displayed in Nocalhost plug-in. If the application type is Helm, it will be of the form Release.Name . Applications are generally divided into three types, RawManifest, Helm and Kustomize. The deployment methods are different for different types, which is why it is necessary to distinguish types. The last one is the resource path, which contains the paths of all the resources to be deployed. Deployment configuration is usually declared through config.yaml The name of Deploy Config is normally config.yaml , which is also the recommended name, but it is ok to use other names. config.yaml has to be placed in the .nocalhost folder in git root directory. \u251c\u2500\u2500 .nocalhost \u2502 \u2514\u2500\u2500 config.yaml \u2514\u2500\u2500 YourManifests ... \u5feb\u901f\u5f00\u59cb\u90e8\u7f72\u914d\u7f6e \u00b6 We use bookinfo as an example here to introduce Deploy Config of Nocalhost. RawManifest \u6700\u5c0f\u5316\u914d\u7f6e \u00b6 The following is an actual Nocalhost Deploy Config, indicating that this is a RawManifest application, resourcePath contains all resource paths, when deployed, they will be applied to the api server through kubectl apply . application : name : bookinfo manifestType : rawManifestGit resourcePath : [ \"manifest/templates\" ] The directories are as follows, .nocalhost folder is created in the root directory, and config.yaml file is under the folder. \u251c\u2500\u2500 .nocalhost \u2502 \u2514\u2500\u2500 config.yaml \u2514\u2500\u2500 manifest \u2514\u2500\u2500 templates \u251c\u2500\u2500 authors.yaml \u251c\u2500\u2500 bookinfo \u2502 \u2514\u2500\u2500 dep-job.yaml \u251c\u2500\u2500 detail.yaml \u251c\u2500\u2500 pre-install \u2502 \u251c\u2500\u2500 print-num-job-01.yaml \u2502 \u2514\u2500\u2500 print-num-job-02.yaml \u251c\u2500\u2500 pre-install-cm.yaml \u251c\u2500\u2500 productpage \u2502 \u2514\u2500\u2500 productpage.yaml \u251c\u2500\u2500 ratings.yaml \u2514\u2500\u2500 reviews.yaml Use the following commands to experience. git clone https://github.com/nocalhost/bookinfo && git checkout manifest/config/example \u901a\u8fc7 Nocalhost \u63d2\u4ef6\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f \u00b6 You can right-click any namespace on Nocalhost plug-in, then click Deploy Application and select clone from git . Enter https://github.com/nocalhost/bookinfo to Git URL column and manifest/config/example to the branch column. Nocalhost will deploy this RawManifest application after you click OK. Now, you can find bookinfo under namespace . \u81ea\u5b9a\u4e49 resourcePath \u548c ignoredPath \u00b6 resourcePath is an array used to specify the RawManifest files to be deployed. For example, for the above application, if you only want to apply *job*.yaml , you can change the configuration as follows. application : name : bookinfo manifestType : rawManifestGit resourcePath : [ \"manifest/templates/pre-install\" ] Moreover, Deploy Config also supports setting ignoredPath . For example, for the above application, if you only want to apply all manifest without *job*.yaml , you can change the configuration as follows. application : name : bookinfo manifestType : rawManifestGit resourcePath : [ \"manifest/templates\" ] ignorePath : [ \"manifest/templates/pre-install\" ] Kustomize \u6700\u5c0f\u5316\u914d\u7f6e \u00b6 Just like RawManifest, config.yaml for Kustomize type is as follows. It indicates that this is a Kustomize application named bookinfo-kustomize and resourcePath is the directory corresponding to kubectl apply -k . application: name: bookinfo-kustomize manifestType: kustomizeGit resourcePath: [ \"kustomize/base\" ] \u8be5\u9879\u76ee\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff0c kustomize/base \u5bf9\u5e94\u5230 kustomization.yaml \u6240\u5728\u7684\u76f8\u5bf9\u76ee\u5f55\uff1a Its directory structure is as follows, and kustomize/base corresponds to the directory containing kustomization.yaml . \u251c\u2500\u2500 .nocalhost \u2502 \u2514\u2500\u2500 config.yaml \u2514\u2500\u2500 kustomize \u2514\u2500\u2500 base \u251c\u2500\u2500 authors.yaml \u251c\u2500\u2500 dep-job.yaml \u251c\u2500\u2500 detail.yaml \u251c\u2500\u2500 kustomization.yaml \u251c\u2500\u2500 pre-install \u2502 \u251c\u2500\u2500 print-num-job-01.yaml \u2502 \u2514\u2500\u2500 print-num-job-02.yaml \u251c\u2500\u2500 pre-install-cm.yaml \u251c\u2500\u2500 productpage.yaml \u251c\u2500\u2500 ratings.yaml \u2514\u2500\u2500 reviews.yaml Use the following commands to experience. git clone https://github.com/nocalhost/bookinfo && git checkout kustomize/config/example Deploy this application by Nocalhost plug-in You can follow the above instructions in Deploy the application by Nocalhost plug-in and enter kustomize/config/example to the branch column. Helm \u6700\u5c0f\u5316\u914d\u7f6e \u00b6 Like Kustomize, config.yaml for Helm type is as follows. It indicates that this is a Helm application named bookinfo-helm and its resourcePath is the directory corresponding to helm install . application: name: bookinfo-helm manifestType: helmGit resourcePath: [ \"charts/bookinfo\" ] Its directory structure is as follows, and charts/bookinfo corresponds to the directory containing Chart.yaml . \u251c\u2500\u2500 .nocalhost \u2502 \u2514\u2500\u2500 config.yaml \u2514\u2500\u2500 charts \u2514\u2500\u2500 bookinfo \u251c\u2500\u2500 Chart.yaml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 templates \u2502 \u251c\u2500\u2500 _helpers.tpl \u2502 \u251c\u2500\u2500 dep-job.yaml \u2502 \u251c\u2500\u2500 microservice-authors.yaml \u2502 \u251c\u2500\u2500 microservice-details.yaml \u2502 \u251c\u2500\u2500 microservice-productpage.yaml \u2502 \u251c\u2500\u2500 microservice-ratings.yaml \u2502 \u2514\u2500\u2500 microservice-reviews.yaml \u251c\u2500\u2500 values.yaml \u2514\u2500\u2500 values_example.yaml Use the following commands to experience. git clone https://github.com/nocalhost/bookinfo && git checkout helm/config/example Deploy this application by Nocalhost plug-in You can follow the above instructions in Deploy the application by Nocalhost plug-in and enter helm/config/example to the branch column. \u5728\u201c\u90e8\u7f72\u914d\u7f6e\u201d\u4e2d\u9884\u914d\u7f6e Dev \u914d\u7f6e \u00b6 Info Please note that we assume that you have already known Dev Config before reading this section. Dev Config can be embedded in Deploy Config. That brings a benefit that Nocalhost configuration would be contained in the application deployment process, which eliminates the repeated configuration work in the new environment. There is no conflict here, because it is equivalent to automatically associating Dev Config with the service after the application is deployed. \u4f8b\u5b50 \u00b6 The bookinfo application we used above has several workloads which are deployment type. Now, let us configure them as follows. Apart from the above minimized configurations, we introduce an array named services, in which the elements are Dev Config . application : name : bookinfo manifestType : rawManifestGit resourcePath : [ \"manifest/templates\" ] services : - name : productpage serviceType : deployment containers : - name : productpage dev : gitUrl : https://e.coding.net/nocalhost/nocalhost/bookinfo-productpage.git image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/python:3.7.7-slim-productpage-with-pydevd shell : bash workDir : /home/nocalhost-dev command : run : - ./run.sh debug : - ./debug.sh debug : remoteDebugPort : 9009 sync : type : send filePattern : - ./ ignoreFilePattern : - \".git\" - \".github\" - \".idea\" portForward : - 39080:9080 resources : limits : cpu : \"1\" memory : 1Gi requests : cpu : \"0.5\" memory : 512Mi - name : details serviceType : deployment containers : - dev : gitUrl : https://e.coding.net/codingcorp/nocalhost/bookinfo-details.git image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/ruby:2.7.1-slim shell : bash workDir : /home/nocalhost-dev sync : type : send filePattern : - ./ ignoreFilePattern : - \".git\" - \".github\" env : - name : DEBUG value : \"true\" Use the QuickStart sample to experience The demo application embeds Dev Config in Deploy Config. After deploying demo application, just right-click a workload under this application, such as Deployment / details . You will find that it has been configured with a series of development configurations in advance, so you can directly enter the Dev Mode based on them.","title":"\u5feb\u901f\u542f\u52a8"},{"location":"config/deployment/quickstart/#_1","text":"Dev Config is a part of Deploy Config. The simplest structure of Deploy Config is as follows: application : name : \"\" manifestType : \"\" resourcePath : [] application includes the application name, application type and the resource array. Application name will be displayed in Nocalhost plug-in. If the application type is Helm, it will be of the form Release.Name . Applications are generally divided into three types, RawManifest, Helm and Kustomize. The deployment methods are different for different types, which is why it is necessary to distinguish types. The last one is the resource path, which contains the paths of all the resources to be deployed. Deployment configuration is usually declared through config.yaml The name of Deploy Config is normally config.yaml , which is also the recommended name, but it is ok to use other names. config.yaml has to be placed in the .nocalhost folder in git root directory. \u251c\u2500\u2500 .nocalhost \u2502 \u2514\u2500\u2500 config.yaml \u2514\u2500\u2500 YourManifests ...","title":"\u90e8\u7f72\u914d\u7f6e\u7ed3\u6784"},{"location":"config/deployment/quickstart/#_2","text":"We use bookinfo as an example here to introduce Deploy Config of Nocalhost.","title":"\u5feb\u901f\u5f00\u59cb\u90e8\u7f72\u914d\u7f6e"},{"location":"config/deployment/quickstart/#rawmanifest","text":"The following is an actual Nocalhost Deploy Config, indicating that this is a RawManifest application, resourcePath contains all resource paths, when deployed, they will be applied to the api server through kubectl apply . application : name : bookinfo manifestType : rawManifestGit resourcePath : [ \"manifest/templates\" ] The directories are as follows, .nocalhost folder is created in the root directory, and config.yaml file is under the folder. \u251c\u2500\u2500 .nocalhost \u2502 \u2514\u2500\u2500 config.yaml \u2514\u2500\u2500 manifest \u2514\u2500\u2500 templates \u251c\u2500\u2500 authors.yaml \u251c\u2500\u2500 bookinfo \u2502 \u2514\u2500\u2500 dep-job.yaml \u251c\u2500\u2500 detail.yaml \u251c\u2500\u2500 pre-install \u2502 \u251c\u2500\u2500 print-num-job-01.yaml \u2502 \u2514\u2500\u2500 print-num-job-02.yaml \u251c\u2500\u2500 pre-install-cm.yaml \u251c\u2500\u2500 productpage \u2502 \u2514\u2500\u2500 productpage.yaml \u251c\u2500\u2500 ratings.yaml \u2514\u2500\u2500 reviews.yaml Use the following commands to experience. git clone https://github.com/nocalhost/bookinfo && git checkout manifest/config/example","title":"RawManifest \u6700\u5c0f\u5316\u914d\u7f6e"},{"location":"config/deployment/quickstart/#nocalhost","text":"You can right-click any namespace on Nocalhost plug-in, then click Deploy Application and select clone from git . Enter https://github.com/nocalhost/bookinfo to Git URL column and manifest/config/example to the branch column. Nocalhost will deploy this RawManifest application after you click OK. Now, you can find bookinfo under namespace .","title":"\u901a\u8fc7 Nocalhost \u63d2\u4ef6\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f"},{"location":"config/deployment/quickstart/#resourcepath-ignoredpath","text":"resourcePath is an array used to specify the RawManifest files to be deployed. For example, for the above application, if you only want to apply *job*.yaml , you can change the configuration as follows. application : name : bookinfo manifestType : rawManifestGit resourcePath : [ \"manifest/templates/pre-install\" ] Moreover, Deploy Config also supports setting ignoredPath . For example, for the above application, if you only want to apply all manifest without *job*.yaml , you can change the configuration as follows. application : name : bookinfo manifestType : rawManifestGit resourcePath : [ \"manifest/templates\" ] ignorePath : [ \"manifest/templates/pre-install\" ]","title":"\u81ea\u5b9a\u4e49 resourcePath \u548c ignoredPath"},{"location":"config/deployment/quickstart/#kustomize","text":"Just like RawManifest, config.yaml for Kustomize type is as follows. It indicates that this is a Kustomize application named bookinfo-kustomize and resourcePath is the directory corresponding to kubectl apply -k . application: name: bookinfo-kustomize manifestType: kustomizeGit resourcePath: [ \"kustomize/base\" ] \u8be5\u9879\u76ee\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff0c kustomize/base \u5bf9\u5e94\u5230 kustomization.yaml \u6240\u5728\u7684\u76f8\u5bf9\u76ee\u5f55\uff1a Its directory structure is as follows, and kustomize/base corresponds to the directory containing kustomization.yaml . \u251c\u2500\u2500 .nocalhost \u2502 \u2514\u2500\u2500 config.yaml \u2514\u2500\u2500 kustomize \u2514\u2500\u2500 base \u251c\u2500\u2500 authors.yaml \u251c\u2500\u2500 dep-job.yaml \u251c\u2500\u2500 detail.yaml \u251c\u2500\u2500 kustomization.yaml \u251c\u2500\u2500 pre-install \u2502 \u251c\u2500\u2500 print-num-job-01.yaml \u2502 \u2514\u2500\u2500 print-num-job-02.yaml \u251c\u2500\u2500 pre-install-cm.yaml \u251c\u2500\u2500 productpage.yaml \u251c\u2500\u2500 ratings.yaml \u2514\u2500\u2500 reviews.yaml Use the following commands to experience. git clone https://github.com/nocalhost/bookinfo && git checkout kustomize/config/example Deploy this application by Nocalhost plug-in You can follow the above instructions in Deploy the application by Nocalhost plug-in and enter kustomize/config/example to the branch column.","title":"Kustomize \u6700\u5c0f\u5316\u914d\u7f6e"},{"location":"config/deployment/quickstart/#helm","text":"Like Kustomize, config.yaml for Helm type is as follows. It indicates that this is a Helm application named bookinfo-helm and its resourcePath is the directory corresponding to helm install . application: name: bookinfo-helm manifestType: helmGit resourcePath: [ \"charts/bookinfo\" ] Its directory structure is as follows, and charts/bookinfo corresponds to the directory containing Chart.yaml . \u251c\u2500\u2500 .nocalhost \u2502 \u2514\u2500\u2500 config.yaml \u2514\u2500\u2500 charts \u2514\u2500\u2500 bookinfo \u251c\u2500\u2500 Chart.yaml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 templates \u2502 \u251c\u2500\u2500 _helpers.tpl \u2502 \u251c\u2500\u2500 dep-job.yaml \u2502 \u251c\u2500\u2500 microservice-authors.yaml \u2502 \u251c\u2500\u2500 microservice-details.yaml \u2502 \u251c\u2500\u2500 microservice-productpage.yaml \u2502 \u251c\u2500\u2500 microservice-ratings.yaml \u2502 \u2514\u2500\u2500 microservice-reviews.yaml \u251c\u2500\u2500 values.yaml \u2514\u2500\u2500 values_example.yaml Use the following commands to experience. git clone https://github.com/nocalhost/bookinfo && git checkout helm/config/example Deploy this application by Nocalhost plug-in You can follow the above instructions in Deploy the application by Nocalhost plug-in and enter helm/config/example to the branch column.","title":"Helm \u6700\u5c0f\u5316\u914d\u7f6e"},{"location":"config/deployment/quickstart/#dev","text":"Info Please note that we assume that you have already known Dev Config before reading this section. Dev Config can be embedded in Deploy Config. That brings a benefit that Nocalhost configuration would be contained in the application deployment process, which eliminates the repeated configuration work in the new environment. There is no conflict here, because it is equivalent to automatically associating Dev Config with the service after the application is deployed.","title":"\u5728\u201c\u90e8\u7f72\u914d\u7f6e\u201d\u4e2d\u9884\u914d\u7f6e Dev \u914d\u7f6e"},{"location":"config/deployment/quickstart/#_3","text":"The bookinfo application we used above has several workloads which are deployment type. Now, let us configure them as follows. Apart from the above minimized configurations, we introduce an array named services, in which the elements are Dev Config . application : name : bookinfo manifestType : rawManifestGit resourcePath : [ \"manifest/templates\" ] services : - name : productpage serviceType : deployment containers : - name : productpage dev : gitUrl : https://e.coding.net/nocalhost/nocalhost/bookinfo-productpage.git image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/python:3.7.7-slim-productpage-with-pydevd shell : bash workDir : /home/nocalhost-dev command : run : - ./run.sh debug : - ./debug.sh debug : remoteDebugPort : 9009 sync : type : send filePattern : - ./ ignoreFilePattern : - \".git\" - \".github\" - \".idea\" portForward : - 39080:9080 resources : limits : cpu : \"1\" memory : 1Gi requests : cpu : \"0.5\" memory : 512Mi - name : details serviceType : deployment containers : - dev : gitUrl : https://e.coding.net/codingcorp/nocalhost/bookinfo-details.git image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/ruby:2.7.1-slim shell : bash workDir : /home/nocalhost-dev sync : type : send filePattern : - ./ ignoreFilePattern : - \".git\" - \".github\" env : - name : DEBUG value : \"true\" Use the QuickStart sample to experience The demo application embeds Dev Config in Deploy Config. After deploying demo application, just right-click a workload under this application, such as Deployment / details . You will find that it has been configured with a series of development configurations in advance, so you can directly enter the Dev Mode based on them.","title":"\u4f8b\u5b50"},{"location":"config/deployment/spec/","text":"Some configurations require additional components Some functions of the deployment configuration rely on the Nocalhost-Dep component . If you use Nocalhost Server, we will automatically install this component for you. Otherwise an additional installation is required. If the Nocalhost-Dep component is not installed, some functions will be restricted. This article will mark those functions that need Nocalhost-Dep . Startup dependency control ( component dependency ) \u00b6 Example application : name : example manifestType : rawManifestGit resourcePath : [ \"example\" ] services : - name : whatever serviceType : deployment dependLabelSelector : pods : - \"name=mariadb\" - \"app.kubernetes.io/name=example\" jobs : - \"job-name=init-job\" When a resource declares dependLabelSelector in the deployment configuration, the characters in the pods array represent the labels of the pods to be waited for. The format is key-value pairs. The characters in the jobs array represent the labels of the jods to be waited for. The format is also key-value pairs. Both pods and jobs are optional. When you actually deploy your application, it will generate an initContainer for the specified workload, wait for the status of all pods matching the label to be Ready , and wait for the status of all jobs matching the label to be Succeeded . Injecting Environment variable ( Component dependency ) \u00b6 Injecting Global variable \u00b6 Example application : name : example manifestType : rawManifestGit resourcePath : [ \"example\" ] ##### start env : - name : DEBUG value : false - name : DOMAIN value : nocalhost.dev envFrom : envFile : - path : relpath/to/env/file ##### end Injecting global variables needs to be declared at the level of application . During the deployment, it will inject the corresponding environment variables into all deployed Deployment , DaemonSet , ReplicaSet , StatefulSet , Job , and CronJob . Injecting variables supports two kinds syntax, which can be mixed The first one is to declare key-value pairs directly The second is to declare an env file relative to config.yaml , the content is line-by-line Key=Value : DEBUG=true DOMAIN=nocalhost.dev The priority of env is higher than that of envFrom Injecting variables at the level of container \u00b6 Example application : name : example manifestType : rawManifestGit resourcePath : [ \"example\" ] services : - name : whatever serviceType : deployment containers : - name : your-container-name install : ##### start env : - name : DEBUG value : false - name : DOMAIN value : nocalhost.dev envFrom : envFile : - path : relpath/to/env/file ##### end The container-level variable injection is declared in application.services[*].containers[*].install , indicating that the corresponding variables are injected into the corresponding container during deployment. The rules of env and envFrom are in line with the application level's. Automatic port forwarding after installation \u00b6 Example application : name : example manifestType : rawManifestGit resourcePath : [ \"example\" ] services : - name : whatever serviceType : deployment containers : - name : your-container-name install : ##### start portForward : - 5005:5005 - 3306:3306 ##### end The configuration rules are similar to the container and variable injection declarations, and need to be configured in application.services[*].containers[*].install . The port forwarding after installation is as it's name implies. After the application is installed, it can automatically forward port to the local for some services. For instance, database, MQ and other commonly used services' ports are suitable for automatic forwarding and configuration rules after installation. The port forwarding rules are consistent with K8s, namely local port: container port . Hook \u00b6 Example application : name : example manifestType : rawManifestGit resourcePath : [ \"example\" ] ##### start onPreInstall : - path : manifest/templates/pre-install/print-num-job-01.yaml weight : \"0\" - path : manifest/templates/hook/pre-install.yaml weight : \"1\" onPostInstall : - path : manifest/templates/hook/post-install.yaml weight : \"1\" onPreUpgrade : - path : manifest/templates/hook/pre-upgrade.yaml weight : \"1\" onPostUpgrade : - path : manifest/templates/hook/post-upgrade.yaml weight : \"1\" onPreDelete : - path : manifest/templates/hook/pre-delete.yaml weight : \"1\" onPostDelete : - path : manifest/templates/hook/post-delete.yaml weight : \"1\" ##### end Nocalhost supports injecting various hooks in the life cycle of the application. Hooks currently only support Job , where path is the RawManifest relative to the home directory , which must be the job type. weight is the weight. The lower ones are executed first. The limits on the Hook Hook is similar to Helm's Hook. Hook itself is to make up for the shortcomings of non-Helm applications, so ** Helm-type applications cannot configure Hook (You can use Helm's Hook directly)**. The explanation of Hook onPreInstall occurs before the employment of the application, including performing some initialization operations such as clusters and databases. The deployment will start after the job status is Successed . If it fails, the installation will be terminated. onPostInstall occurs after the application is deployed. When all resources are submitted to the K8s Api Server, this job will be executed. After the status is Successed , the deployment is successful. Otherwise, it will roll back and perform the uninstall operation. By analogy, the Upgrade Hook and Delete Hook will not roll back after the execution fails, and only prompt failure. The customization of the HelmValues \u00b6 Example application : name : example manifestType : rawManifestGit resourcePath : [ \"example\" ] ##### start helmValues : - key : nocalhost.example value : foo - key : nocalhost.deploy.example value : bar helmVals : nocalhost : !!! example foo deploy : !!! example { { Release.Name } } ##### end HelmValues supports two kinds of syntax The first syntax only supports pure strings and has a higher priority. The second syntax is the same as values.yaml and can be interspersed with Helm syntax.","title":"\u89c4\u683c"},{"location":"config/deployment/spec/#startup-dependency-control-component-dependency","text":"Example application : name : example manifestType : rawManifestGit resourcePath : [ \"example\" ] services : - name : whatever serviceType : deployment dependLabelSelector : pods : - \"name=mariadb\" - \"app.kubernetes.io/name=example\" jobs : - \"job-name=init-job\" When a resource declares dependLabelSelector in the deployment configuration, the characters in the pods array represent the labels of the pods to be waited for. The format is key-value pairs. The characters in the jobs array represent the labels of the jods to be waited for. The format is also key-value pairs. Both pods and jobs are optional. When you actually deploy your application, it will generate an initContainer for the specified workload, wait for the status of all pods matching the label to be Ready , and wait for the status of all jobs matching the label to be Succeeded .","title":"Startup dependency control (component dependency)"},{"location":"config/deployment/spec/#injecting-environment-variable-component-dependency","text":"","title":"Injecting Environment variable (Component dependency)"},{"location":"config/deployment/spec/#injecting-global-variable","text":"Example application : name : example manifestType : rawManifestGit resourcePath : [ \"example\" ] ##### start env : - name : DEBUG value : false - name : DOMAIN value : nocalhost.dev envFrom : envFile : - path : relpath/to/env/file ##### end Injecting global variables needs to be declared at the level of application . During the deployment, it will inject the corresponding environment variables into all deployed Deployment , DaemonSet , ReplicaSet , StatefulSet , Job , and CronJob . Injecting variables supports two kinds syntax, which can be mixed The first one is to declare key-value pairs directly The second is to declare an env file relative to config.yaml , the content is line-by-line Key=Value : DEBUG=true DOMAIN=nocalhost.dev The priority of env is higher than that of envFrom","title":"Injecting Global variable"},{"location":"config/deployment/spec/#injecting-variables-at-the-level-of-container","text":"Example application : name : example manifestType : rawManifestGit resourcePath : [ \"example\" ] services : - name : whatever serviceType : deployment containers : - name : your-container-name install : ##### start env : - name : DEBUG value : false - name : DOMAIN value : nocalhost.dev envFrom : envFile : - path : relpath/to/env/file ##### end The container-level variable injection is declared in application.services[*].containers[*].install , indicating that the corresponding variables are injected into the corresponding container during deployment. The rules of env and envFrom are in line with the application level's.","title":"Injecting variables at the level of container"},{"location":"config/deployment/spec/#automatic-port-forwarding-after-installation","text":"Example application : name : example manifestType : rawManifestGit resourcePath : [ \"example\" ] services : - name : whatever serviceType : deployment containers : - name : your-container-name install : ##### start portForward : - 5005:5005 - 3306:3306 ##### end The configuration rules are similar to the container and variable injection declarations, and need to be configured in application.services[*].containers[*].install . The port forwarding after installation is as it's name implies. After the application is installed, it can automatically forward port to the local for some services. For instance, database, MQ and other commonly used services' ports are suitable for automatic forwarding and configuration rules after installation. The port forwarding rules are consistent with K8s, namely local port: container port .","title":"Automatic port forwarding after installation"},{"location":"config/deployment/spec/#hook","text":"Example application : name : example manifestType : rawManifestGit resourcePath : [ \"example\" ] ##### start onPreInstall : - path : manifest/templates/pre-install/print-num-job-01.yaml weight : \"0\" - path : manifest/templates/hook/pre-install.yaml weight : \"1\" onPostInstall : - path : manifest/templates/hook/post-install.yaml weight : \"1\" onPreUpgrade : - path : manifest/templates/hook/pre-upgrade.yaml weight : \"1\" onPostUpgrade : - path : manifest/templates/hook/post-upgrade.yaml weight : \"1\" onPreDelete : - path : manifest/templates/hook/pre-delete.yaml weight : \"1\" onPostDelete : - path : manifest/templates/hook/post-delete.yaml weight : \"1\" ##### end Nocalhost supports injecting various hooks in the life cycle of the application. Hooks currently only support Job , where path is the RawManifest relative to the home directory , which must be the job type. weight is the weight. The lower ones are executed first. The limits on the Hook Hook is similar to Helm's Hook. Hook itself is to make up for the shortcomings of non-Helm applications, so ** Helm-type applications cannot configure Hook (You can use Helm's Hook directly)**. The explanation of Hook onPreInstall occurs before the employment of the application, including performing some initialization operations such as clusters and databases. The deployment will start after the job status is Successed . If it fails, the installation will be terminated. onPostInstall occurs after the application is deployed. When all resources are submitted to the K8s Api Server, this job will be executed. After the status is Successed , the deployment is successful. Otherwise, it will roll back and perform the uninstall operation. By analogy, the Upgrade Hook and Delete Hook will not roll back after the execution fails, and only prompt failure.","title":"Hook"},{"location":"config/deployment/spec/#the-customization-of-the-helmvalues","text":"Example application : name : example manifestType : rawManifestGit resourcePath : [ \"example\" ] ##### start helmValues : - key : nocalhost.example value : foo - key : nocalhost.deploy.example value : bar helmVals : nocalhost : !!! example foo deploy : !!! example { { Release.Name } } ##### end HelmValues supports two kinds of syntax The first syntax only supports pure strings and has a higher priority. The second syntax is the same as values.yaml and can be interspersed with Helm syntax.","title":"The customization of the HelmValues"},{"location":"config/deployment/syntax/","text":"Injecting environment variables in config.yaml \u00b6 config.yaml supports dynamic injection of environment variables. You can take advantage of this feature when you want to control something dynamically during deployment. The basic syntax of environment variables injection is ${ENV} . The actual values of the environment variables will be read from the current process. Setting default values for environment variables The syntax is ${ENV:-DEFAULT_VALUE} . The DEFAULT_VALUE will be used if the environment variable ENV was not found. Example \u00b6 - name : e-micro-agile serviceType : deployment dependPodsLabelSelector : - \"app=mariadb\" - \"app=rabbitmq\" dependJobsLabelSelector : - \"job-name=init-data-job\" gitUrl : ${CODING_GIT_URL:-git@e.coding.net:nocalhost/collaboration.git} devContainerImage : $CODING_GIT_SERVER_IMAGE workDir : ${WORK_DIR} persistentVolumeDirs : - path:${PERSISTENT_VOLUME_DIRS} buildCommand : [ $BUILD_COMMAND ] runCommand : [ $ { RUN_COMMAND : -\"./gradlew\" , \"bootRun\" }] debugCommand : [ $ { DEBUG_COMMAND : -\"./gradlew\" , \"bootRun\" , \"--debug-jvm\" }] syncFilePattern:${SYNC_FILE_PATTERN:- - \".\"} ignoreFilePattern:${IGNORE_FILE_PATTERN:- - \".git\" - \".nocalhost\"} testPriority : ${PRIORITY:-0} env: CODING_GIT_URL=git@e.coding.net:nocalhost/nocalhost.git PRIORITY=2 RESULT: - name : e-micro-agile serviceType : deployment dependPodsLabelSelector : - \"app=mariadb\" - \"app=rabbitmq\" dependJobsLabelSelector : - \"job-name=init-data-job\" gitUrl : git@e.coding.net:nocalhost/nocalhost.git devContainerImage : workDir : persistentVolumeDirs : - path : buildCommand : [] runCommand : [ \"./gradlew\" , \"bootRun\" ] debugCommand : [ \"./gradlew\" , \"bootRun\" , \"--debug-jvm\" ] syncFilePattern : - ./nocalhost - ./foo**bar - * .jar ignoreFilePattern : - \".\" testPriority : 2 Using the include syntax in config.yaml to introduce other file's content \u00b6 configuring with config.yaml supports the use of include syntax to achieve a high degree of encapsulation, such as \"abstraction\", \"inheritance\", \"rewriting\" and so on. The basic syntax of include is ${_INCLUDE_:- file/rel/path | nindent 2} , where nindent is the overall indentation when the file is imported. Example 1: Combining config.yaml with the include syntax \u00b6 Here we use Deployment configuration example to demonstrate. config.yaml: application : name : bookinfo manifestType : rawManifestGit resourcePath : [ \"manifest/templates\" ] service : ${_INCLUDE_:- ./service/productpage.yaml | nindent 4} ${_INCLUDE_:- ./service/details.yaml | nindent 4} /service/productpage.yaml: - name : productpage serviceType : deployment containers : - name : productpage dev : gitUrl : https://e.coding.net/nocalhost/nocalhost/bookinfo-productpage.git image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/python:3.7.7-slim-productpage-with-pydevd shell : bash workDir : /home/nocalhost-dev command : run : - ./run.sh debug : - ./debug.sh debug : remoteDebugPort : 9009 sync : type : send filePattern : - ./ ignoreFilePattern : - \".git\" - \".github\" - \".idea\" portForward : - 39080:9080 resources : limits : cpu : \"1\" memory : 1Gi requests : cpu : \"0.5\" memory : 512Mi /service/details.yaml: - name : details serviceType : deployment containers : - dev : gitUrl : https://e.coding.net/codingcorp/nocalhost/bookinfo-details.git image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/ruby:2.7.1-slim shell : bash workDir : /home/nocalhost-dev sync : type : send filePattern : - ./ ignoreFilePattern : - \".git\" - \".github\" env : - name : DEBUG value : \"true\" The structure of the directories is: \u251c\u2500\u2500 service \u2502 \u251c\u2500\u2500 details.yaml \u2502 \u2514\u2500\u2500 productpage.yaml \u251c\u2500\u2500 config.yaml How to verify You can use nhctl render ./config.yaml to verify the result, which will get the rendered result. Example 2: Abstracting the configuration \u00b6 The configuration of many services is likely to be similar. If you need to modify, then you must modify them altogether. For those common configurations, they can be abstracted: config.yaml: application : name : bookinfo manifestType : rawManifestGit resourcePath : [ \"manifest/templates\" ] service : ${_INCLUDE_:- ./service/productpage.yaml | nindent 4} ${_INCLUDE_:- ./service/details.yaml | nindent 4} /service/productpage.yaml: - name : productpage serviceType : deployment containers : - name : productpage dev : ${_INCLUDE_:- ../base/dev-config.yaml | nindent 8} /service/details.yaml: - name : details serviceType : deployment containers : - dev : ${_INCLUDE_:- ../base/dev-config.yaml | nindent 8} /base/dev-config.yaml: gitUrl : https://e.coding.net/codingcorp/nocalhost/bookinfo-details.git image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/ruby:2.7.1-slim shell : bash workDir : /home/nocalhost-dev sync : type : send filePattern : - ./ ignoreFilePattern : - \".git\" - \".github\" env : - name : DEBUG value : \"true\" The structure of the directories is: \u251c\u2500\u2500 service \u2502 \u251c\u2500\u2500 details.yaml \u2502 \u2514\u2500\u2500 productpage.yaml \u251c\u2500\u2500 base \u2502 \u2514\u2500\u2500 dev-config.yaml : \u251c\u2500\u2500 config.yaml Using nhctl render ./config.yaml to get the result: application : name : bookinfo manifestType : rawManifestGit resourcePath : [ \"manifest/templates\" ] service : - name : productpage serviceType : deployment containers : - name : productpage dev : gitUrl : https://e.coding.net/codingcorp/nocalhost/bookinfo-details.git image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/ruby:2.7.1-slim shell : bash workDir : /home/nocalhost-dev sync : type : send filePattern : - ./ ignoreFilePattern : - \".git\" - \".github\" env : - name : DEBUG value : \"true\" - name : details serviceType : deployment containers : - dev : gitUrl : https://e.coding.net/codingcorp/nocalhost/bookinfo-details.git image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/ruby:2.7.1-slim shell : bash workDir : /home/nocalhost-dev sync : type : send filePattern : - ./ ignoreFilePattern : - \".git\" - \".github\" env : - name : DEBUG value : \"true\" Example 3: \"Reloading\" the configuration \u00b6 The configurations may not be exactly identical. For example, the development image and startup command used by each service are different. How to customize them when use abstracted configuration? Taking Example 2 as an example, productpage uses the basic dev-config.yaml for the dev part. But at the same time, the definition of gitUrl and image overrides the already defined content in dev-config.yaml. In addition, resources is also defined to expand the dev-config.yaml. /service/productpage.yaml: - name : productpage serviceType : deployment containers : - name : productpage dev : ${_INCLUDE_:- ../base/dev-config.yaml | nindent 8} gitUrl : https://e.coding.net/nocalhost/nocalhost/bookinfo-productpage.git image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/python:3.7.7-slim-productpage-with-pydevd resources : limits : cpu : \"1\" memory : 1Gi requests : cpu : \"0.5\" memory : 512Mi /base/dev-config.yaml: gitUrl : https://e.coding.net/codingcorp/nocalhost/bookinfo-details.git image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/ruby:2.7.1-slim shell : bash workDir : /home/nocalhost-dev sync : type : send filePattern : - ./ ignoreFilePattern : - \".git\" - \".github\" env : - name : DEBUG value : \"true\" The structure of the directories is: \u251c\u2500\u2500 service \u2502 \u2514\u2500\u2500 productpage.yaml \u251c\u2500\u2500 base \u2502 \u2514\u2500\u2500 dev-config.yaml : Using nhctl render ./service/productpage.yaml to get the result: - name : productpage serviceType : deployment containers : - name : productpage dev : shell : bash workDir : /home/nocalhost-dev sync : type : send filePattern : - ./ ignoreFilePattern : - \".git\" - \".github\" env : - name : DEBUG value : \"true\" gitUrl : https://e.coding.net/nocalhost/nocalhost/bookinfo-productpage.git image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/python:3.7.7-slim-productpage-with-pydevd resources : limits : cpu : \"1\" memory : 1Gi requests : cpu : \"0.5\" memory : 512Mi","title":"\u7279\u6b8a\u8bed\u6cd5"},{"location":"config/deployment/syntax/#injecting-environment-variables-in-configyaml","text":"config.yaml supports dynamic injection of environment variables. You can take advantage of this feature when you want to control something dynamically during deployment. The basic syntax of environment variables injection is ${ENV} . The actual values of the environment variables will be read from the current process. Setting default values for environment variables The syntax is ${ENV:-DEFAULT_VALUE} . The DEFAULT_VALUE will be used if the environment variable ENV was not found.","title":"Injecting environment variables in config.yaml"},{"location":"config/deployment/syntax/#example","text":"- name : e-micro-agile serviceType : deployment dependPodsLabelSelector : - \"app=mariadb\" - \"app=rabbitmq\" dependJobsLabelSelector : - \"job-name=init-data-job\" gitUrl : ${CODING_GIT_URL:-git@e.coding.net:nocalhost/collaboration.git} devContainerImage : $CODING_GIT_SERVER_IMAGE workDir : ${WORK_DIR} persistentVolumeDirs : - path:${PERSISTENT_VOLUME_DIRS} buildCommand : [ $BUILD_COMMAND ] runCommand : [ $ { RUN_COMMAND : -\"./gradlew\" , \"bootRun\" }] debugCommand : [ $ { DEBUG_COMMAND : -\"./gradlew\" , \"bootRun\" , \"--debug-jvm\" }] syncFilePattern:${SYNC_FILE_PATTERN:- - \".\"} ignoreFilePattern:${IGNORE_FILE_PATTERN:- - \".git\" - \".nocalhost\"} testPriority : ${PRIORITY:-0} env: CODING_GIT_URL=git@e.coding.net:nocalhost/nocalhost.git PRIORITY=2 RESULT: - name : e-micro-agile serviceType : deployment dependPodsLabelSelector : - \"app=mariadb\" - \"app=rabbitmq\" dependJobsLabelSelector : - \"job-name=init-data-job\" gitUrl : git@e.coding.net:nocalhost/nocalhost.git devContainerImage : workDir : persistentVolumeDirs : - path : buildCommand : [] runCommand : [ \"./gradlew\" , \"bootRun\" ] debugCommand : [ \"./gradlew\" , \"bootRun\" , \"--debug-jvm\" ] syncFilePattern : - ./nocalhost - ./foo**bar - * .jar ignoreFilePattern : - \".\" testPriority : 2","title":"Example"},{"location":"config/deployment/syntax/#using-the-include-syntax-in-configyaml-to-introduce-other-files-content","text":"configuring with config.yaml supports the use of include syntax to achieve a high degree of encapsulation, such as \"abstraction\", \"inheritance\", \"rewriting\" and so on. The basic syntax of include is ${_INCLUDE_:- file/rel/path | nindent 2} , where nindent is the overall indentation when the file is imported.","title":"Using the include syntax in config.yaml to introduce other file's content"},{"location":"config/deployment/syntax/#example-1-combining-configyaml-with-the-include-syntax","text":"Here we use Deployment configuration example to demonstrate. config.yaml: application : name : bookinfo manifestType : rawManifestGit resourcePath : [ \"manifest/templates\" ] service : ${_INCLUDE_:- ./service/productpage.yaml | nindent 4} ${_INCLUDE_:- ./service/details.yaml | nindent 4} /service/productpage.yaml: - name : productpage serviceType : deployment containers : - name : productpage dev : gitUrl : https://e.coding.net/nocalhost/nocalhost/bookinfo-productpage.git image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/python:3.7.7-slim-productpage-with-pydevd shell : bash workDir : /home/nocalhost-dev command : run : - ./run.sh debug : - ./debug.sh debug : remoteDebugPort : 9009 sync : type : send filePattern : - ./ ignoreFilePattern : - \".git\" - \".github\" - \".idea\" portForward : - 39080:9080 resources : limits : cpu : \"1\" memory : 1Gi requests : cpu : \"0.5\" memory : 512Mi /service/details.yaml: - name : details serviceType : deployment containers : - dev : gitUrl : https://e.coding.net/codingcorp/nocalhost/bookinfo-details.git image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/ruby:2.7.1-slim shell : bash workDir : /home/nocalhost-dev sync : type : send filePattern : - ./ ignoreFilePattern : - \".git\" - \".github\" env : - name : DEBUG value : \"true\" The structure of the directories is: \u251c\u2500\u2500 service \u2502 \u251c\u2500\u2500 details.yaml \u2502 \u2514\u2500\u2500 productpage.yaml \u251c\u2500\u2500 config.yaml How to verify You can use nhctl render ./config.yaml to verify the result, which will get the rendered result.","title":"Example 1: Combining config.yaml with the include syntax"},{"location":"config/deployment/syntax/#example-2-abstracting-the-configuration","text":"The configuration of many services is likely to be similar. If you need to modify, then you must modify them altogether. For those common configurations, they can be abstracted: config.yaml: application : name : bookinfo manifestType : rawManifestGit resourcePath : [ \"manifest/templates\" ] service : ${_INCLUDE_:- ./service/productpage.yaml | nindent 4} ${_INCLUDE_:- ./service/details.yaml | nindent 4} /service/productpage.yaml: - name : productpage serviceType : deployment containers : - name : productpage dev : ${_INCLUDE_:- ../base/dev-config.yaml | nindent 8} /service/details.yaml: - name : details serviceType : deployment containers : - dev : ${_INCLUDE_:- ../base/dev-config.yaml | nindent 8} /base/dev-config.yaml: gitUrl : https://e.coding.net/codingcorp/nocalhost/bookinfo-details.git image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/ruby:2.7.1-slim shell : bash workDir : /home/nocalhost-dev sync : type : send filePattern : - ./ ignoreFilePattern : - \".git\" - \".github\" env : - name : DEBUG value : \"true\" The structure of the directories is: \u251c\u2500\u2500 service \u2502 \u251c\u2500\u2500 details.yaml \u2502 \u2514\u2500\u2500 productpage.yaml \u251c\u2500\u2500 base \u2502 \u2514\u2500\u2500 dev-config.yaml : \u251c\u2500\u2500 config.yaml Using nhctl render ./config.yaml to get the result: application : name : bookinfo manifestType : rawManifestGit resourcePath : [ \"manifest/templates\" ] service : - name : productpage serviceType : deployment containers : - name : productpage dev : gitUrl : https://e.coding.net/codingcorp/nocalhost/bookinfo-details.git image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/ruby:2.7.1-slim shell : bash workDir : /home/nocalhost-dev sync : type : send filePattern : - ./ ignoreFilePattern : - \".git\" - \".github\" env : - name : DEBUG value : \"true\" - name : details serviceType : deployment containers : - dev : gitUrl : https://e.coding.net/codingcorp/nocalhost/bookinfo-details.git image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/ruby:2.7.1-slim shell : bash workDir : /home/nocalhost-dev sync : type : send filePattern : - ./ ignoreFilePattern : - \".git\" - \".github\" env : - name : DEBUG value : \"true\"","title":"Example 2: Abstracting the configuration"},{"location":"config/deployment/syntax/#example-3-reloading-the-configuration","text":"The configurations may not be exactly identical. For example, the development image and startup command used by each service are different. How to customize them when use abstracted configuration? Taking Example 2 as an example, productpage uses the basic dev-config.yaml for the dev part. But at the same time, the definition of gitUrl and image overrides the already defined content in dev-config.yaml. In addition, resources is also defined to expand the dev-config.yaml. /service/productpage.yaml: - name : productpage serviceType : deployment containers : - name : productpage dev : ${_INCLUDE_:- ../base/dev-config.yaml | nindent 8} gitUrl : https://e.coding.net/nocalhost/nocalhost/bookinfo-productpage.git image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/python:3.7.7-slim-productpage-with-pydevd resources : limits : cpu : \"1\" memory : 1Gi requests : cpu : \"0.5\" memory : 512Mi /base/dev-config.yaml: gitUrl : https://e.coding.net/codingcorp/nocalhost/bookinfo-details.git image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/ruby:2.7.1-slim shell : bash workDir : /home/nocalhost-dev sync : type : send filePattern : - ./ ignoreFilePattern : - \".git\" - \".github\" env : - name : DEBUG value : \"true\" The structure of the directories is: \u251c\u2500\u2500 service \u2502 \u2514\u2500\u2500 productpage.yaml \u251c\u2500\u2500 base \u2502 \u2514\u2500\u2500 dev-config.yaml : Using nhctl render ./service/productpage.yaml to get the result: - name : productpage serviceType : deployment containers : - name : productpage dev : shell : bash workDir : /home/nocalhost-dev sync : type : send filePattern : - ./ ignoreFilePattern : - \".git\" - \".github\" env : - name : DEBUG value : \"true\" gitUrl : https://e.coding.net/nocalhost/nocalhost/bookinfo-productpage.git image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/python:3.7.7-slim-productpage-with-pydevd resources : limits : cpu : \"1\" memory : 1Gi requests : cpu : \"0.5\" memory : 512Mi","title":"Example 3: \"Reloading\" the configuration"},{"location":"faq/faq/","text":"\u5e38\u95ee\u95ee\u9898 \u00b6 \u5b89\u88c5 \u00b6 \u95ee\u9898 \u00b6 Linux \u7684\u6587\u4ef6\u540c\u6b65\u592a\u6162 \u00b6 \u5982\u679c\u60a8\u7684\u6587\u4ef6\u540c\u6b65\u5728 Linux \u7684\u901f\u5ea6\u592a\u6162\uff0c\u5219\u5f88\u53ef\u80fd\u662f\u7531\u4e8e\u5c40\u90e8\u9650\u5236\u3002 \u5982\u4f55\u589e\u52a0\u63d2\u56fe\u9650\u5236\u4ee5\u4f7f\u6211\u7684\u6587\u4ef6\u7cfb\u7edf\u89c2\u5bdf\u8005\u5de5\u4f5c\uff1f Linux\u901a\u5e38\u9650\u5236\u6bcf\u4e2a\u7528\u6237\u7684\u89c2\u6d4b\u91cf\uff08\u901a\u5e38\u4e3a8192\uff09\u3002\u5f53\u60a8\u6709\u66f4\u591a\u76ee\u5f55\u65f6\uff0c\u60a8\u9700\u8981\u8c03\u6574\u8be5\u6570\u5b57\u3002 \u5728\u8bb8\u591aLinux\u53d1\u884c\u7248\u4e2d\uff0c\u60a8\u53ef\u4ee5\u8fd0\u884c\u4ee5\u4e0b\u5185\u5bb9\u6765\u4fee\u590d\u5b83\uff1a echo \"fs.inotify.max_user_watches=204800\" | sudo tee -a /etc/sysctl.conf \u5728Arch Linux\u548c\u5176\u4ed6\u53ef\u80fd\u7684\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u9996\u9009\u5c06\u6b64\u884c\u5199\u5165\u5355\u72ec\u7684\u6587\u4ef6\uff0c\u5373\u60a8\u5e94\u8be5\u8fd0\u884c\uff1a echo \"fs.inotify.max_user_watches=204800\" | sudo tee -a /etc/sysctl.d/90-override.conf \u91cd\u65b0\u542f\u52a8\u540e\uff0c\u8fd9\u53ea\u4f1a\u751f\u6548\u3002\u8981\u7acb\u5373\u8c03\u6574\u9650\u5236\uff0c\u8bf7\u8fd0\u884c\uff1a sudo sh -c 'echo 204800 > /proc/sys/fs/inotify/max_user_watches' \u64cd\u4f5c \u00b6","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"faq/faq/#_1","text":"","title":"\u5e38\u95ee\u95ee\u9898"},{"location":"faq/faq/#_2","text":"","title":"\u5b89\u88c5"},{"location":"faq/faq/#_3","text":"","title":"\u95ee\u9898"},{"location":"faq/faq/#linux","text":"\u5982\u679c\u60a8\u7684\u6587\u4ef6\u540c\u6b65\u5728 Linux \u7684\u901f\u5ea6\u592a\u6162\uff0c\u5219\u5f88\u53ef\u80fd\u662f\u7531\u4e8e\u5c40\u90e8\u9650\u5236\u3002 \u5982\u4f55\u589e\u52a0\u63d2\u56fe\u9650\u5236\u4ee5\u4f7f\u6211\u7684\u6587\u4ef6\u7cfb\u7edf\u89c2\u5bdf\u8005\u5de5\u4f5c\uff1f Linux\u901a\u5e38\u9650\u5236\u6bcf\u4e2a\u7528\u6237\u7684\u89c2\u6d4b\u91cf\uff08\u901a\u5e38\u4e3a8192\uff09\u3002\u5f53\u60a8\u6709\u66f4\u591a\u76ee\u5f55\u65f6\uff0c\u60a8\u9700\u8981\u8c03\u6574\u8be5\u6570\u5b57\u3002 \u5728\u8bb8\u591aLinux\u53d1\u884c\u7248\u4e2d\uff0c\u60a8\u53ef\u4ee5\u8fd0\u884c\u4ee5\u4e0b\u5185\u5bb9\u6765\u4fee\u590d\u5b83\uff1a echo \"fs.inotify.max_user_watches=204800\" | sudo tee -a /etc/sysctl.conf \u5728Arch Linux\u548c\u5176\u4ed6\u53ef\u80fd\u7684\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u9996\u9009\u5c06\u6b64\u884c\u5199\u5165\u5355\u72ec\u7684\u6587\u4ef6\uff0c\u5373\u60a8\u5e94\u8be5\u8fd0\u884c\uff1a echo \"fs.inotify.max_user_watches=204800\" | sudo tee -a /etc/sysctl.d/90-override.conf \u91cd\u65b0\u542f\u52a8\u540e\uff0c\u8fd9\u53ea\u4f1a\u751f\u6548\u3002\u8981\u7acb\u5373\u8c03\u6574\u9650\u5236\uff0c\u8bf7\u8fd0\u884c\uff1a sudo sh -c 'echo 204800 > /proc/sys/fs/inotify/max_user_watches'","title":"Linux \u7684\u6587\u4ef6\u540c\u6b65\u592a\u6162"},{"location":"faq/faq/#_4","text":"","title":"\u64cd\u4f5c"},{"location":"guides/clear-pvc/","text":"Clear PVC \u00b6 COMING SOON :::","title":"Clear PVC"},{"location":"guides/clear-pvc/#clear-pvc","text":"COMING SOON :::","title":"Clear PVC"},{"location":"guides/hot-reload/","text":"\u70ed\u91cd\u8f7d \u00b6 \u4ec0\u4e48\u662f\u70ed\u91cd\u8f7d\uff1f \u00b6 \u60a8\u5728 IDE \u4e2d\u4fee\u6539\u7684\u6587\u4ef6\u5c06\u5b9e\u65f6\u540c\u6b65\u5230\u8fdc\u7a0b\u5bb9\u5668\uff0c\u5e76\u4e14\u60a8\u7684\u8fd0\u884c/\u8c03\u8bd5\u547d\u4ee4\u5c06\u91cd\u65b0\u6267\u884c\u3002 \u652f\u6301\u7684 IDE \u00b6 Language IDE Edition Required Plugin Java IntelliJ IDEA Ultimate N/A Go IntelliJ IDEA Ultimate Go plugin GoLand Professional N/A Python IntelliJ IDEA Ultimate Python plugin PyCharm Professional N/A PHP IntelliJ IDEA Ultimate PHP plugin PhpStorm Professional N/A Node.js IntelliJ IDEA Ultimate N/A WebStorm Professional N/A \u5982\u4f55\u542f\u7528\u70ed\u91cd\u8f7d\uff1f \u00b6 \u9009\u62e9\u8981\u8fd0\u884c/\u8c03\u8bd5\u7684\u5de5\u4f5c\u8d1f\u8f7d \u53f3\u952e\u5355\u51fb\u5de5\u4f5c\u91cf\u5e76\u9009\u62e9 Dev Config , \u914d\u7f6e hotReload: true \u793a\u4f8b\u914d\u7f6e \u00b6 Nocalhost Configs name : java-remote-run serviceType : deployment containers : - name : \"reviews\" dev : image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/java:latest shell : bash workDir : /home/nocalhost-dev command : debug : - ./gradlew - bootRun - --debug-jvm - --no-daemon hotReload : true debug : remoteDebugPort : 5005","title":"\u70ed\u52a0\u8f7d"},{"location":"guides/hot-reload/#_1","text":"","title":"\u70ed\u91cd\u8f7d"},{"location":"guides/hot-reload/#_2","text":"\u60a8\u5728 IDE \u4e2d\u4fee\u6539\u7684\u6587\u4ef6\u5c06\u5b9e\u65f6\u540c\u6b65\u5230\u8fdc\u7a0b\u5bb9\u5668\uff0c\u5e76\u4e14\u60a8\u7684\u8fd0\u884c/\u8c03\u8bd5\u547d\u4ee4\u5c06\u91cd\u65b0\u6267\u884c\u3002","title":"\u4ec0\u4e48\u662f\u70ed\u91cd\u8f7d\uff1f"},{"location":"guides/hot-reload/#ide","text":"Language IDE Edition Required Plugin Java IntelliJ IDEA Ultimate N/A Go IntelliJ IDEA Ultimate Go plugin GoLand Professional N/A Python IntelliJ IDEA Ultimate Python plugin PyCharm Professional N/A PHP IntelliJ IDEA Ultimate PHP plugin PhpStorm Professional N/A Node.js IntelliJ IDEA Ultimate N/A WebStorm Professional N/A","title":"\u652f\u6301\u7684 IDE"},{"location":"guides/hot-reload/#_3","text":"\u9009\u62e9\u8981\u8fd0\u884c/\u8c03\u8bd5\u7684\u5de5\u4f5c\u8d1f\u8f7d \u53f3\u952e\u5355\u51fb\u5de5\u4f5c\u91cf\u5e76\u9009\u62e9 Dev Config , \u914d\u7f6e hotReload: true","title":"\u5982\u4f55\u542f\u7528\u70ed\u91cd\u8f7d\uff1f"},{"location":"guides/hot-reload/#_4","text":"Nocalhost Configs name : java-remote-run serviceType : deployment containers : - name : \"reviews\" dev : image : codingcorp-docker.pkg.coding.net/nocalhost/dev-images/java:latest shell : bash workDir : /home/nocalhost-dev command : debug : - ./gradlew - bootRun - --debug-jvm - --no-daemon hotReload : true debug : remoteDebugPort : 5005","title":"\u793a\u4f8b\u914d\u7f6e"},{"location":"guides/manage-cluster/","text":"Manage Cluster \u00b6 \u8fde\u63a5\u5230 Kubernetes \u7fa4\u96c6 \u00b6 Nocalhost \u652f\u6301\u591a\u96c6\u7fa4\u7ba1\u7406\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e24\u79cd\u65b9\u6cd5\u8fde\u63a5\u5230 Kubernetes \u7fa4\u96c6\uff1a \u7531 kubeconfig \u8fde\u63a5 \u4ece\u4efb\u4f55\u672c\u5730\u76ee\u5f55\u4e2d\u9009\u62e9 KubeConfig \u6587\u4ef6\u3002 Default KubeConfig Nocalhost will try to load KubeConfig from your local ~/.kube/config by default. \u5c06 kubeconfig \u7c98\u8d34\u4e3a\u6587\u672c Paste the KubeConfig as a text. Get KubeConfig You can use the following command to view your KubeConfig , copy and paste to the Nocalhost plugin. kubectl config view --minify --raw --flatten vscode jet Remove Cluster \u00b6 KubeConfig Unchanged Nocalhost will only remove the cluster from inspector, it will not modify your KubeConfig . vscode jet View KubeConfig \u00b6 Right-click the specified cluster and select View KubeConfig , the Nocalhost plugin will open the KubeConfig of the cluster. vscode jet","title":"\u96c6\u7fa4\u7ba1\u7406"},{"location":"guides/manage-cluster/#manage-cluster","text":"","title":"Manage Cluster"},{"location":"guides/manage-cluster/#kubernetes","text":"Nocalhost \u652f\u6301\u591a\u96c6\u7fa4\u7ba1\u7406\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e24\u79cd\u65b9\u6cd5\u8fde\u63a5\u5230 Kubernetes \u7fa4\u96c6\uff1a \u7531 kubeconfig \u8fde\u63a5 \u4ece\u4efb\u4f55\u672c\u5730\u76ee\u5f55\u4e2d\u9009\u62e9 KubeConfig \u6587\u4ef6\u3002 Default KubeConfig Nocalhost will try to load KubeConfig from your local ~/.kube/config by default. \u5c06 kubeconfig \u7c98\u8d34\u4e3a\u6587\u672c Paste the KubeConfig as a text. Get KubeConfig You can use the following command to view your KubeConfig , copy and paste to the Nocalhost plugin. kubectl config view --minify --raw --flatten vscode jet","title":"\u8fde\u63a5\u5230 Kubernetes \u7fa4\u96c6"},{"location":"guides/manage-cluster/#remove-cluster","text":"KubeConfig Unchanged Nocalhost will only remove the cluster from inspector, it will not modify your KubeConfig . vscode jet","title":"Remove Cluster"},{"location":"guides/manage-cluster/#view-kubeconfig","text":"Right-click the specified cluster and select View KubeConfig , the Nocalhost plugin will open the KubeConfig of the cluster. vscode jet","title":"View KubeConfig"},{"location":"guides/remote-run/","text":"\u8fdc\u7a0b\u8fd0\u884c \u00b6 \u5f53\u60a8\u5728 Kubernetes \u7fa4\u96c6\u4e2d\u542f\u52a8\u65b0\u5bb9\u5668\u65f6\uff0cKubernetes \u5c06\u4e0d\u4f1a\u5728\u6b64\u5bb9\u5668\u4e2d\u542f\u52a8\u4efb\u4f55\u8fdb\u7a0b\u3002Nocalhost \u53ef\u4ee5\u4f7f\u7528\u8fd0\u884c\u914d\u7f6e\u5728 Kubernetes \u7fa4\u96c6\u4e2d\u8fd0\u884c\u4ee3\u7801\uff0c\u559c\u6b22\u5728 IDE \u5185\u4f7f\u7528\u8fd0\u884c\u529f\u80fd\u3002 \u652f\u6301\u7684 IDE \u00b6 Language IDE Edition Required Plugin Java IntelliJ IDEA Ultimate N/A Go IntelliJ IDEA Ultimate Go plugin GoLand Professional N/A Python IntelliJ IDEA Ultimate Python plugin PyCharm Professional N/A PHP IntelliJ IDEA Ultimate PHP plugin PHPStorm Professional N/A Node.js IntelliJ IDEA Ultimate Node.js plugin WebStrom Professional N/A \u8fdc\u7a0b\u8fd0\u884c\u8fc7\u7a0b \u00b6 \u9009\u62e9\u8981\u8fd0\u884c\u7684\u5de5\u4f5c\u8d1f\u8f7d Right-click the workload and select Dev Config , configure your run configuration Then right-click this workload again and select Remote Run Nocalhost will automatically enter the DevMode and start remote run IDE \u4e2d\u7684\u8fdc\u7a0b\u8fd0\u884c\u914d\u7f6e \u00b6 Before starting remote run, if you do not have a Nocalhost IDE run configuration under an existing workload, Nocalhost will create a new IDE run configuration according to your Nocalhost configuration . Different IDE has different configuration names and templates. Multi Configs If you already have a Nocalhost IDE run configuration under the existing workload, Nocalhost will use the first one to start running. You can change the order in the Run/Debug Configurations window within IDE. \u914d\u7f6e \u00b6 \u5f00\u53d1\u73af\u5883\u4e4b\u95f4\u7684\u5f00\u53d1\u73af\u5883\u4e0d\u540c\u3002\u60a8\u5e94\u8be5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u914d\u7f6e\u8fdc\u7a0b\u8fd0\u884c\u914d\u7f6e\u3002 \u793a\u4f8b\u914d\u7f6e \u00b6 java python go php node Nocalhost Configs name : java-remote-run serviceType : deployment containers : - name : \"\" dev : ... command : run : - /home/nocalhost-dev/gradlew - bootRun ... Nocalhost Configs name : python-remote-run serviceType : deployment containers : - name : \"\" dev : ... command : run : - ./run.sh ... run.sh #! /bin/sh pip3 install --no-cache-dir -r ./requirements.txt export DEBUG_DEV=0 export FLASK_DEBUG=0 export FLASK_ENV=development flask run --host=0.0.0.0 --port=9999 Nocalhost Configs name : go-remote-run serviceType : deployment containers : - name : \"\" dev : ... command : run : - ./run.sh ... run.sh #! /bin/sh export GOPROXY=https://goproxy.cn go run app.go Nocalhost Configs name : php-remote-run serviceType : deployment containers : - name : \"\" dev : ... command : run : - ./run.sh ... run.sh #\uff01/bin/sh php -t ./ -S 0.0.0.0:9999; Nocalhost Configs name : node-remote-run serviceType : deployment containers : - name : \"\" dev : ... command : run : - ./run.sh ... run.sh #\uff01/bin/sh npm install && node ratings.js 9080","title":"\u8fdc\u7a0b\u8fd0\u884c"},{"location":"guides/remote-run/#_1","text":"\u5f53\u60a8\u5728 Kubernetes \u7fa4\u96c6\u4e2d\u542f\u52a8\u65b0\u5bb9\u5668\u65f6\uff0cKubernetes \u5c06\u4e0d\u4f1a\u5728\u6b64\u5bb9\u5668\u4e2d\u542f\u52a8\u4efb\u4f55\u8fdb\u7a0b\u3002Nocalhost \u53ef\u4ee5\u4f7f\u7528\u8fd0\u884c\u914d\u7f6e\u5728 Kubernetes \u7fa4\u96c6\u4e2d\u8fd0\u884c\u4ee3\u7801\uff0c\u559c\u6b22\u5728 IDE \u5185\u4f7f\u7528\u8fd0\u884c\u529f\u80fd\u3002","title":"\u8fdc\u7a0b\u8fd0\u884c"},{"location":"guides/remote-run/#ide","text":"Language IDE Edition Required Plugin Java IntelliJ IDEA Ultimate N/A Go IntelliJ IDEA Ultimate Go plugin GoLand Professional N/A Python IntelliJ IDEA Ultimate Python plugin PyCharm Professional N/A PHP IntelliJ IDEA Ultimate PHP plugin PHPStorm Professional N/A Node.js IntelliJ IDEA Ultimate Node.js plugin WebStrom Professional N/A","title":"\u652f\u6301\u7684 IDE"},{"location":"guides/remote-run/#_2","text":"\u9009\u62e9\u8981\u8fd0\u884c\u7684\u5de5\u4f5c\u8d1f\u8f7d Right-click the workload and select Dev Config , configure your run configuration Then right-click this workload again and select Remote Run Nocalhost will automatically enter the DevMode and start remote run","title":"\u8fdc\u7a0b\u8fd0\u884c\u8fc7\u7a0b"},{"location":"guides/remote-run/#ide_1","text":"Before starting remote run, if you do not have a Nocalhost IDE run configuration under an existing workload, Nocalhost will create a new IDE run configuration according to your Nocalhost configuration . Different IDE has different configuration names and templates. Multi Configs If you already have a Nocalhost IDE run configuration under the existing workload, Nocalhost will use the first one to start running. You can change the order in the Run/Debug Configurations window within IDE.","title":"IDE \u4e2d\u7684\u8fdc\u7a0b\u8fd0\u884c\u914d\u7f6e"},{"location":"guides/remote-run/#_3","text":"\u5f00\u53d1\u73af\u5883\u4e4b\u95f4\u7684\u5f00\u53d1\u73af\u5883\u4e0d\u540c\u3002\u60a8\u5e94\u8be5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u914d\u7f6e\u8fdc\u7a0b\u8fd0\u884c\u914d\u7f6e\u3002","title":"\u914d\u7f6e"},{"location":"guides/remote-run/#_4","text":"java python go php node Nocalhost Configs name : java-remote-run serviceType : deployment containers : - name : \"\" dev : ... command : run : - /home/nocalhost-dev/gradlew - bootRun ... Nocalhost Configs name : python-remote-run serviceType : deployment containers : - name : \"\" dev : ... command : run : - ./run.sh ... run.sh #! /bin/sh pip3 install --no-cache-dir -r ./requirements.txt export DEBUG_DEV=0 export FLASK_DEBUG=0 export FLASK_ENV=development flask run --host=0.0.0.0 --port=9999 Nocalhost Configs name : go-remote-run serviceType : deployment containers : - name : \"\" dev : ... command : run : - ./run.sh ... run.sh #! /bin/sh export GOPROXY=https://goproxy.cn go run app.go Nocalhost Configs name : php-remote-run serviceType : deployment containers : - name : \"\" dev : ... command : run : - ./run.sh ... run.sh #\uff01/bin/sh php -t ./ -S 0.0.0.0:9999; Nocalhost Configs name : node-remote-run serviceType : deployment containers : - name : \"\" dev : ... command : run : - ./run.sh ... run.sh #\uff01/bin/sh npm install && node ratings.js 9080","title":"\u793a\u4f8b\u914d\u7f6e"},{"location":"guides/debug/_debug-configuration/","text":"Configuration \u00b6 The development environment is different between developers. You should configure remote debug configurations according to the actual situation. Sample Configuration \u00b6 ```yaml {8,11} title=\"Nocalhost Configs\" name: java-remote-debugging serviceType: deployment containers: - name: \"\" dev: ... command: debug: - ./debug.sh debug: remoteDebugPort: 5005 ... #### Maven Example The shell command for **Maven** !!! example ```bash title=\"jdk >= 1.8 and springBoot >=2.2.1.RELEASE\" mvn spring-boot:run -Dspring-boot.run.jvmArguments=\"-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005\" For jdk <=1.7 you should replace -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 with -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005 For lower version of the springBoot you should replace -Drun.jvmArguments with -Dspring-boot.run.jvmArguments Gradle Example \u00b6 The startup command for Gradle !!! example Gradle's debug.sh ./gradlew bootRun --debug-jvm --no-daemon ```yaml {8,11} title=\"Nocalhost Configs\" name: python-remote-debugging serviceType: deployment containers: - name: \"\" dev: ... command: debug: - ./debug.sh debug: remoteDebugPort: 9009 ... <Tabs defaultValue={props.name} values={[ {label: 'VSCode', value: 'vscode'}, {label: 'Jetbrains', value: 'jetbrains'}, ]}> <TabItem value=\"jetbrains\"> ```yaml title=\"debug.sh\" #! /bin/sh pip3 install --no-cache-dir -r ./requirements.txt export DEBUG_DEV=0 export FLASK_DEBUG=0 export FLASK_ENV=development flask run --host=0.0.0.0 --port=9999 debug.sh #! /bin/sh pip3 install --no-cache-dir -r ./requirements.txt python -m debugpy --listen 9009 --wait-for-client productpage.py 9080 How does it Works? Nocalhost using pydevd to debug Python application. ```yaml {8,11} title=\"Nocalhost Configs\" name: go-remote-debugging serviceType: deployment containers: - name: \"\" dev: ... command: debug: - ./debug.sh debug: remoteDebugPort: 9009 ... ```yaml title=\"debug.sh\" #! /bin/sh export GOPROXY=https://goproxy.cn dlv --headless --log --listen :9009 --api-version 2 --accept-multiclient debug app.go ```yaml {8,11} title=\"Nocalhost Configs\" name: php-remote-debugging serviceType: deployment containers: - name: \"\" dev: ... command: debug: - ./debug.sh debug: remoteDebugPort: 9003 ... ```yaml title=\"debug.sh\" #\uff01/bin/sh php -t ./ -S 0.0.0.0:9999; How does it works? Nocalhost using Xdebug to debug PHP applications. ```yaml {8,11} title=\"Nocalhost Configs\" name: nodejs-remote-debugging serviceType: deployment containers: - name: \"\" dev: ... command: debug: - ./debug.sh debug: remoteDebugPort: 9229 ... ```yaml title=\"debug.sh\" #\uff01/bin/sh npm install node --inspect=0.0.0.0:9229 ./index.js ```yaml {8,11} title=\"Nocalhost Configs\" name: nodejs-remote-debugging serviceType: deployment containers: - name: \"\" dev: ... command: debug: - ./debug.sh debug: remoteDebugPort: 9001 ... ```yaml title=\"debug.sh\" #\uff01/bin/sh rdebug-ide -h 0.0.0.0 -p 9001 -- details.rb 9080","title":" debug configuration"},{"location":"guides/debug/_debug-configuration/#configuration","text":"The development environment is different between developers. You should configure remote debug configurations according to the actual situation.","title":"Configuration"},{"location":"guides/debug/_debug-configuration/#sample-configuration","text":"```yaml {8,11} title=\"Nocalhost Configs\" name: java-remote-debugging serviceType: deployment containers: - name: \"\" dev: ... command: debug: - ./debug.sh debug: remoteDebugPort: 5005 ... #### Maven Example The shell command for **Maven** !!! example ```bash title=\"jdk >= 1.8 and springBoot >=2.2.1.RELEASE\" mvn spring-boot:run -Dspring-boot.run.jvmArguments=\"-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005\" For jdk <=1.7 you should replace -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 with -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005 For lower version of the springBoot you should replace -Drun.jvmArguments with -Dspring-boot.run.jvmArguments","title":"Sample Configuration"},{"location":"guides/debug/_debug-configuration/#gradle-example","text":"The startup command for Gradle !!! example Gradle's debug.sh ./gradlew bootRun --debug-jvm --no-daemon ```yaml {8,11} title=\"Nocalhost Configs\" name: python-remote-debugging serviceType: deployment containers: - name: \"\" dev: ... command: debug: - ./debug.sh debug: remoteDebugPort: 9009 ... <Tabs defaultValue={props.name} values={[ {label: 'VSCode', value: 'vscode'}, {label: 'Jetbrains', value: 'jetbrains'}, ]}> <TabItem value=\"jetbrains\"> ```yaml title=\"debug.sh\" #! /bin/sh pip3 install --no-cache-dir -r ./requirements.txt export DEBUG_DEV=0 export FLASK_DEBUG=0 export FLASK_ENV=development flask run --host=0.0.0.0 --port=9999 debug.sh #! /bin/sh pip3 install --no-cache-dir -r ./requirements.txt python -m debugpy --listen 9009 --wait-for-client productpage.py 9080 How does it Works? Nocalhost using pydevd to debug Python application. ```yaml {8,11} title=\"Nocalhost Configs\" name: go-remote-debugging serviceType: deployment containers: - name: \"\" dev: ... command: debug: - ./debug.sh debug: remoteDebugPort: 9009 ... ```yaml title=\"debug.sh\" #! /bin/sh export GOPROXY=https://goproxy.cn dlv --headless --log --listen :9009 --api-version 2 --accept-multiclient debug app.go ```yaml {8,11} title=\"Nocalhost Configs\" name: php-remote-debugging serviceType: deployment containers: - name: \"\" dev: ... command: debug: - ./debug.sh debug: remoteDebugPort: 9003 ... ```yaml title=\"debug.sh\" #\uff01/bin/sh php -t ./ -S 0.0.0.0:9999; How does it works? Nocalhost using Xdebug to debug PHP applications. ```yaml {8,11} title=\"Nocalhost Configs\" name: nodejs-remote-debugging serviceType: deployment containers: - name: \"\" dev: ... command: debug: - ./debug.sh debug: remoteDebugPort: 9229 ... ```yaml title=\"debug.sh\" #\uff01/bin/sh npm install node --inspect=0.0.0.0:9229 ./index.js ```yaml {8,11} title=\"Nocalhost Configs\" name: nodejs-remote-debugging serviceType: deployment containers: - name: \"\" dev: ... command: debug: - ./debug.sh debug: remoteDebugPort: 9001 ... ```yaml title=\"debug.sh\" #\uff01/bin/sh rdebug-ide -h 0.0.0.0 -p 9001 -- details.rb 9080","title":"Gradle Example"},{"location":"guides/debug/access-terminal/","text":"\u8bbf\u95ee\u5bb9\u5668\u7684\u7ec8\u7aef \u00b6 Nocalhost \u63d0\u4f9b\u4e86\u4e24\u79cd\u6a21\u5f0f\u6765\u8bbf\u95ee\u76ee\u6807\u5bb9\u5668\u7684\u7aef\u5b50\u3002 \u6253\u5f00\u8fdc\u7a0b\u7ec8\u7aef: \u8bbf\u95ee IDE \u6784\u5efa\u7ec8\u7aef\u5185\u7684\u5bb9\u5668\u7ec8\u7aef\u3002 \u590d\u5236\u7ec8\u7aef\u6267\u884c\u547d\u4ee4: Nocalhost \u5c06\u590d\u5236\u8fdc\u7a0b\u7ec8\u7aef\u7684\u6267\u884c\u547d\u4ee4\uff0c\u60a8\u53ef\u4ee5\u5c06\u6b64\u547d\u4ee4\u7c98\u8d34\u5230\u4efb\u4f55\u7ec8\u7aef\u5de5\u5177\u4e2d\uff0c\u7136\u540e\u8fd0\u884c\u5b83\uff0c\u7136\u540e\u8bbf\u95ee\u5bb9\u5668\u7684\u7ec8\u7aef\u3002 VS Code \u00b6 open copy JetBrains \u00b6 jb-open jb-copy","title":"\u8bbf\u95ee\u5bb9\u5668\u7684\u7ec8\u7aef"},{"location":"guides/debug/access-terminal/#_1","text":"Nocalhost \u63d0\u4f9b\u4e86\u4e24\u79cd\u6a21\u5f0f\u6765\u8bbf\u95ee\u76ee\u6807\u5bb9\u5668\u7684\u7aef\u5b50\u3002 \u6253\u5f00\u8fdc\u7a0b\u7ec8\u7aef: \u8bbf\u95ee IDE \u6784\u5efa\u7ec8\u7aef\u5185\u7684\u5bb9\u5668\u7ec8\u7aef\u3002 \u590d\u5236\u7ec8\u7aef\u6267\u884c\u547d\u4ee4: Nocalhost \u5c06\u590d\u5236\u8fdc\u7a0b\u7ec8\u7aef\u7684\u6267\u884c\u547d\u4ee4\uff0c\u60a8\u53ef\u4ee5\u5c06\u6b64\u547d\u4ee4\u7c98\u8d34\u5230\u4efb\u4f55\u7ec8\u7aef\u5de5\u5177\u4e2d\uff0c\u7136\u540e\u8fd0\u884c\u5b83\uff0c\u7136\u540e\u8bbf\u95ee\u5bb9\u5668\u7684\u7ec8\u7aef\u3002","title":"\u8bbf\u95ee\u5bb9\u5668\u7684\u7ec8\u7aef"},{"location":"guides/debug/access-terminal/#vs-code","text":"open copy","title":"VS Code"},{"location":"guides/debug/access-terminal/#jetbrains","text":"jb-open jb-copy","title":"JetBrains"},{"location":"guides/debug/jetbrains-debug/","text":"Jetbrains Remote Debugging \u00b6 Supported IDEs \u00b6 Language IDE Edition Required Plugin Java IntelliJ IDEA Ultimate N/A Go IntelliJ IDEA Ultimate Go plugin GoLand Professional N/A Python IntelliJ IDEA Ultimate Python plugin PyCharm Professional N/A PHP IntelliJ IDEA Ultimate PHP plugin PHPStorm Professional N/A Node.js IntelliJ IDEA Ultimate Node.js plugin WebStrom Professional N/A Debugging Process \u00b6 Select the workload that you want to debug Right-click the workload and select Dev Config , configure your debugging configuration Then right-click this workload again and select Remote Debug Nocalhost will automatically enter the DevMode and start remote debugging Debugging Configurations in IDE \u00b6 Before entering debug mode, if you do not have a Nocalhost IDE debug configuration under an existing workload, Nocalhost will create a new IDE debug configuration according to your Nocalhost configuration . Different IDE has different configuration names and templates. Multi Configs If you already have a Nocalhost IDE debug configuration under the existing workload, Nocalhost will use the first one to start debugging. You can change the order in the Run/Debug Configurations window within IDE. :::","title":"Jetbrains \u8fdc\u7a0b\u8c03\u8bd5"},{"location":"guides/debug/jetbrains-debug/#jetbrains-remote-debugging","text":"","title":"Jetbrains Remote Debugging"},{"location":"guides/debug/jetbrains-debug/#supported-ides","text":"Language IDE Edition Required Plugin Java IntelliJ IDEA Ultimate N/A Go IntelliJ IDEA Ultimate Go plugin GoLand Professional N/A Python IntelliJ IDEA Ultimate Python plugin PyCharm Professional N/A PHP IntelliJ IDEA Ultimate PHP plugin PHPStorm Professional N/A Node.js IntelliJ IDEA Ultimate Node.js plugin WebStrom Professional N/A","title":"Supported IDEs"},{"location":"guides/debug/jetbrains-debug/#debugging-process","text":"Select the workload that you want to debug Right-click the workload and select Dev Config , configure your debugging configuration Then right-click this workload again and select Remote Debug Nocalhost will automatically enter the DevMode and start remote debugging","title":"Debugging Process"},{"location":"guides/debug/jetbrains-debug/#debugging-configurations-in-ide","text":"Before entering debug mode, if you do not have a Nocalhost IDE debug configuration under an existing workload, Nocalhost will create a new IDE debug configuration according to your Nocalhost configuration . Different IDE has different configuration names and templates. Multi Configs If you already have a Nocalhost IDE debug configuration under the existing workload, Nocalhost will use the first one to start debugging. You can change the order in the Run/Debug Configurations window within IDE. :::","title":"Debugging Configurations in IDE"},{"location":"guides/debug/log-viewer/","text":"\u67e5\u770b\u65e5\u5fd7 \u00b6 Nocalhost \u914d\u5907\u4e86\u5185\u7f6e\u7684\u65e5\u5fd7\u89c2\u770b\u5668\uff0c\u53ef\u5e2e\u52a9\u60a8\u5728 IDE \u4e2d\u4f7f\u7528\u4efb\u4f55 Kubernetes \u5bb9\u5668\u76d1\u89c6\u548c\u8c03\u8bd5\u95ee\u9898\u3002 vscode jb","title":"\u67e5\u770b\u65e5\u5fd7"},{"location":"guides/debug/log-viewer/#_1","text":"Nocalhost \u914d\u5907\u4e86\u5185\u7f6e\u7684\u65e5\u5fd7\u89c2\u770b\u5668\uff0c\u53ef\u5e2e\u52a9\u60a8\u5728 IDE \u4e2d\u4f7f\u7528\u4efb\u4f55 Kubernetes \u5bb9\u5668\u76d1\u89c6\u548c\u8c03\u8bd5\u95ee\u9898\u3002 vscode jb","title":"\u67e5\u770b\u65e5\u5fd7"},{"location":"guides/debug/overview/","text":"\u6982\u8ff0 \u00b6 Nocalhost \u5373\u4f7f\u5728\u8fdc\u7a0b Kubernetes \u7fa4\u96c6\u4e2d\u8c03\u8bd5\u65f6\uff0c\u4e5f\u63d0\u4f9b\u4e86\u60a8\u5728 IDE \u4e2d\u4f7f\u7528\u7684\u8c03\u8bd5\u4f53\u9a8c\u3002 \u60a8\u53ef\u4ee5 \u8fdc\u7a0b\u8c03\u8bd5 kubernetes workloads \uff0c \u8bbf\u95ee\u5bb9\u5668\u7684\u7ec8\u7aef \u548c \u67e5\u770b\u5bb9\u5668\u65e5\u5fd7 \u5728\u60a8\u559c\u6b22\u7684 IDES \u4e2d\u3002","title":"\u6982\u89c8"},{"location":"guides/debug/overview/#_1","text":"Nocalhost \u5373\u4f7f\u5728\u8fdc\u7a0b Kubernetes \u7fa4\u96c6\u4e2d\u8c03\u8bd5\u65f6\uff0c\u4e5f\u63d0\u4f9b\u4e86\u60a8\u5728 IDE \u4e2d\u4f7f\u7528\u7684\u8c03\u8bd5\u4f53\u9a8c\u3002 \u60a8\u53ef\u4ee5 \u8fdc\u7a0b\u8c03\u8bd5 kubernetes workloads \uff0c \u8bbf\u95ee\u5bb9\u5668\u7684\u7ec8\u7aef \u548c \u67e5\u770b\u5bb9\u5668\u65e5\u5fd7 \u5728\u60a8\u559c\u6b22\u7684 IDES \u4e2d\u3002","title":"\u6982\u8ff0"},{"location":"guides/debug/vscode-debug/","text":"VSCODE \u8fdc\u7a0b\u8c03\u8bd5 \u00b6 \u652f\u6301\u7684\u8bed\u8a00 \u00b6 Language Required Plugin Dev Image Required Java Debugger for Java N/A Go Go dlv Python Python debugpy PHP PHP Debug xdebug Node.js N/A N/A Ruby Ruby ruby-debug-ide \u63d2\u4ef6\u914d\u7f6e \u00b6 java go Java\u5f00\u53d1\u5957\u4ef6\u7684\u8def\u5f84\u53ef\u4ee5\u901a\u8fc7VS\u4ee3\u7801\u8bbe\u7f6e\u4e2d\u7684 java.home \u8bbe\u7f6e\u6307\u5b9a (workspace/user settings). \u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u6309\u4ee5\u4e0b\u987a\u5e8f\u641c\u7d22\uff0c\u76f4\u5230JDK\u6ee1\u8db3\u5f53\u524d\u7684\u6700\u4f4e\u8981\u6c42\uff0c\u6709\u5173\u6269\u5c55JDK\u914d\u7f6e\uff0c\u8bf7\u53c2\u89c1 \u8bbe\u7f6eJDK . JDK_HOME \u73af\u5883\u53d8\u91cf JAVA_HOME \u73af\u5883\u53d8\u91cf \u5728\u5f53\u524d\u7cfb\u7edf\u8def\u5f84\u4e0a The extension uses a few command-line tools developed by the Go community\u3002in particular, go , gopls , and dlv must be installed for this extension to work correctly. See the tools documentation for a complete list of tools the extension depends on. In order to locate these command-line tools, the extension searches GOPATH/bin and directories specified in the PATH environment variable (or Path on Windows) with which the VS Code process has started. If the tools are not found, the extension will prompt you to install the missing tools and show the \"\u26a0\ufe0f Analysis Tools Missing\" warning in the bottom right corner. Please install them by responding to the warning notification, or by manually running the Go: Install/Update Tools command . \u8c03\u8bd5\u8fc7\u7a0b \u00b6 Select the workload that you want to debug Right-click the workload and select Dev Config , configure your debugging configuration Then right-click this workload again and select Remote Debug Nocalhost will automatically install the dependencies on the first debug Nocalhost will automatically enter the DevMode and start remote debugging IDE \u4e2d\u8c03\u8bd5\u914d\u7f6e \u00b6 VSCODE \u8c03\u8bd5\u914d\u7f6e \u00b6 nocalhost will automatically configure launch.json of vscode when debug is finished, next time you can launch debug directly with shortcut key F5 \u8c03\u8bd5\u53c2\u6570 \u00b6 debug supports custom parameters to start, you just need to add parameters under configurations in launch.json , and the plugin will pass the parameters to the debugger when debug is launched. If you need to enable diagnostic output when debugging a Node.js application, you just need to change the following configuration. launch.json { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"type\" : \"nocalhost\" , \"request\" : \"attach\" , \"name\" : \"Nocalhost Debug\" , \"trace\" : true } ] } \u652f\u6301\u7684\u8c03\u8bd5\u53c2\u6570 \u00b6 Java: Debugger for Java Go: Go Python: Python PHP: PHP Debug Node.js: VSCode Ruby: Ruby \u5e38\u95ee\u95ee\u9898 \u00b6 Java \u8c03\u8bd5\u5668\u505c\u5728 java.lang.reflect.Method.class \u6587\u4ef6\u4e2d\u7684 return ma.invoke(obj, args); \u4e2d\u3002 Execute the Java: Clean the Java language server workspace command","title":"VSCode \u8fdc\u7a0b\u8c03\u8bd5"},{"location":"guides/debug/vscode-debug/#vscode","text":"","title":"VSCODE \u8fdc\u7a0b\u8c03\u8bd5"},{"location":"guides/debug/vscode-debug/#_1","text":"Language Required Plugin Dev Image Required Java Debugger for Java N/A Go Go dlv Python Python debugpy PHP PHP Debug xdebug Node.js N/A N/A Ruby Ruby ruby-debug-ide","title":"\u652f\u6301\u7684\u8bed\u8a00"},{"location":"guides/debug/vscode-debug/#_2","text":"java go Java\u5f00\u53d1\u5957\u4ef6\u7684\u8def\u5f84\u53ef\u4ee5\u901a\u8fc7VS\u4ee3\u7801\u8bbe\u7f6e\u4e2d\u7684 java.home \u8bbe\u7f6e\u6307\u5b9a (workspace/user settings). \u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u6309\u4ee5\u4e0b\u987a\u5e8f\u641c\u7d22\uff0c\u76f4\u5230JDK\u6ee1\u8db3\u5f53\u524d\u7684\u6700\u4f4e\u8981\u6c42\uff0c\u6709\u5173\u6269\u5c55JDK\u914d\u7f6e\uff0c\u8bf7\u53c2\u89c1 \u8bbe\u7f6eJDK . JDK_HOME \u73af\u5883\u53d8\u91cf JAVA_HOME \u73af\u5883\u53d8\u91cf \u5728\u5f53\u524d\u7cfb\u7edf\u8def\u5f84\u4e0a The extension uses a few command-line tools developed by the Go community\u3002in particular, go , gopls , and dlv must be installed for this extension to work correctly. See the tools documentation for a complete list of tools the extension depends on. In order to locate these command-line tools, the extension searches GOPATH/bin and directories specified in the PATH environment variable (or Path on Windows) with which the VS Code process has started. If the tools are not found, the extension will prompt you to install the missing tools and show the \"\u26a0\ufe0f Analysis Tools Missing\" warning in the bottom right corner. Please install them by responding to the warning notification, or by manually running the Go: Install/Update Tools command .","title":"\u63d2\u4ef6\u914d\u7f6e"},{"location":"guides/debug/vscode-debug/#_3","text":"Select the workload that you want to debug Right-click the workload and select Dev Config , configure your debugging configuration Then right-click this workload again and select Remote Debug Nocalhost will automatically install the dependencies on the first debug Nocalhost will automatically enter the DevMode and start remote debugging","title":"\u8c03\u8bd5\u8fc7\u7a0b"},{"location":"guides/debug/vscode-debug/#ide","text":"","title":"IDE \u4e2d\u8c03\u8bd5\u914d\u7f6e"},{"location":"guides/debug/vscode-debug/#vscode_1","text":"nocalhost will automatically configure launch.json of vscode when debug is finished, next time you can launch debug directly with shortcut key F5","title":"VSCODE \u8c03\u8bd5\u914d\u7f6e"},{"location":"guides/debug/vscode-debug/#_4","text":"debug supports custom parameters to start, you just need to add parameters under configurations in launch.json , and the plugin will pass the parameters to the debugger when debug is launched. If you need to enable diagnostic output when debugging a Node.js application, you just need to change the following configuration. launch.json { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"type\" : \"nocalhost\" , \"request\" : \"attach\" , \"name\" : \"Nocalhost Debug\" , \"trace\" : true } ] }","title":"\u8c03\u8bd5\u53c2\u6570"},{"location":"guides/debug/vscode-debug/#_5","text":"Java: Debugger for Java Go: Go Python: Python PHP: PHP Debug Node.js: VSCode Ruby: Ruby","title":"\u652f\u6301\u7684\u8c03\u8bd5\u53c2\u6570"},{"location":"guides/debug/vscode-debug/#_6","text":"Java \u8c03\u8bd5\u5668\u505c\u5728 java.lang.reflect.Method.class \u6587\u4ef6\u4e2d\u7684 return ma.invoke(obj, args); \u4e2d\u3002 Execute the Java: Clean the Java language server workspace command","title":"\u5e38\u95ee\u95ee\u9898"},{"location":"guides/deploy/deploy-app/","text":"\u4e0e Nocalhost \u90e8\u7f72 \u00b6 Nocalhost provides an easy way to help you manager Kubernetes applications deployment within IDE. \u4ec0\u4e48\u662f default \uff1f \u00b6 When you expand any Kubernetes namespace in Nocalhost plugin, you may have questions seeing something name default and icon. In Kubernetes, a workload is an application, whether your workload is a single component or several that work together. But in the actual world, we have a more complicated scenario. A microservices architectural application is composed of many workloads. Think about if you have a hundred of these applications. There will be a very long workload list in a namespace that is hard to read and search. Nocalhost uses annotation to compose related workloads into a single application . When you deploy a configured Nocalhost application or Helm application, Nocalhost can identify it as an application and group all relative workloads. Otherwise, Nocalhost will group all unidentified workloads into the default application . Difference A configured Nocalhost application is still single or grouped of Kubernetes manifest. It does not change the original Kubernetes manifest architect. It just adds some configurations which only using by Nocalhost. Corresponding to the above description, you can deploy different configured Kubernetes applications with Nocalhost. Deploy Kubernetes Manifest \u00b6 You can deploy Kubernetes manifests or Kustomizations by using Nocalhost plugin. This is similar to kubectl apply -f . Deploy within Application You can only deploy Kubernetes manifest within a application . You can deploy to default application if you do note have any application within namespace. Process \u00b6 Right-click any namespace and select Apply Manifest Select a Kubernetes manifest file or a folder that contains group of manifest files Deploy an Configured Nocalhost Application \u00b6 Configuration Required You need to have configured config.yaml before deploy applications. Learn how to configure application deployment . vscode jet Select a namespace Click on the icon to deploy application Choose the installation source Right click a namespace, click Install Application Choose the installation source Installation Source \u00b6 Nocalhost supports to install application from local directory, Git repository and Helm repository. From Local Directory and From Git Repository Nocalhost will analyze the deployment configuration in the .nocalhost folder in your application directory or Git repository, looking for clues on how to deploy your application. From Helm Repository Nocalhost will run the helm install to deploy your helmChart. Read more to learn about helm install Helm Needed You need to install Helm in your computer before you can install by Helm","title":"\u4f7f\u7528 Nocalhost \u8fdb\u884c\u5e94\u7528\u90e8\u7f72"},{"location":"guides/deploy/deploy-app/#nocalhost","text":"Nocalhost provides an easy way to help you manager Kubernetes applications deployment within IDE.","title":"\u4e0e Nocalhost \u90e8\u7f72"},{"location":"guides/deploy/deploy-app/#default","text":"When you expand any Kubernetes namespace in Nocalhost plugin, you may have questions seeing something name default and icon. In Kubernetes, a workload is an application, whether your workload is a single component or several that work together. But in the actual world, we have a more complicated scenario. A microservices architectural application is composed of many workloads. Think about if you have a hundred of these applications. There will be a very long workload list in a namespace that is hard to read and search. Nocalhost uses annotation to compose related workloads into a single application . When you deploy a configured Nocalhost application or Helm application, Nocalhost can identify it as an application and group all relative workloads. Otherwise, Nocalhost will group all unidentified workloads into the default application . Difference A configured Nocalhost application is still single or grouped of Kubernetes manifest. It does not change the original Kubernetes manifest architect. It just adds some configurations which only using by Nocalhost. Corresponding to the above description, you can deploy different configured Kubernetes applications with Nocalhost.","title":"\u4ec0\u4e48\u662fdefault\uff1f"},{"location":"guides/deploy/deploy-app/#deploy-kubernetes-manifest","text":"You can deploy Kubernetes manifests or Kustomizations by using Nocalhost plugin. This is similar to kubectl apply -f . Deploy within Application You can only deploy Kubernetes manifest within a application . You can deploy to default application if you do note have any application within namespace.","title":"Deploy Kubernetes Manifest"},{"location":"guides/deploy/deploy-app/#process","text":"Right-click any namespace and select Apply Manifest Select a Kubernetes manifest file or a folder that contains group of manifest files","title":"Process"},{"location":"guides/deploy/deploy-app/#deploy-an-configured-nocalhost-application","text":"Configuration Required You need to have configured config.yaml before deploy applications. Learn how to configure application deployment . vscode jet Select a namespace Click on the icon to deploy application Choose the installation source Right click a namespace, click Install Application Choose the installation source","title":"Deploy an Configured Nocalhost Application"},{"location":"guides/deploy/deploy-app/#installation-source","text":"Nocalhost supports to install application from local directory, Git repository and Helm repository. From Local Directory and From Git Repository Nocalhost will analyze the deployment configuration in the .nocalhost folder in your application directory or Git repository, looking for clues on how to deploy your application. From Helm Repository Nocalhost will run the helm install to deploy your helmChart. Read more to learn about helm install Helm Needed You need to install Helm in your computer before you can install by Helm","title":"Installation Source"},{"location":"guides/deploy/deploy-demo/","text":"\u90e8\u7f72\u6f14\u793a\u5e94\u7528\u7a0b\u5e8f \u00b6 Nocalhost IDE plugin has built-in demo application, you can quickly install it through the following steps: Select any namespace from the cluster tree Click on the icon to deploy application Select Install Quick Demo to install the demo application Access Demo Quick demo application comes with port-forward configured. After demo has successfully deployed (check the deployment status from the cluster tree), you can access the demo from your local web browser by visiting http://127.0.0.1:39080","title":"\u90e8\u7f72\u793a\u4f8b\u5e94\u7528"},{"location":"guides/deploy/deploy-demo/#_1","text":"Nocalhost IDE plugin has built-in demo application, you can quickly install it through the following steps: Select any namespace from the cluster tree Click on the icon to deploy application Select Install Quick Demo to install the demo application Access Demo Quick demo application comes with port-forward configured. After demo has successfully deployed (check the deployment status from the cluster tree), you can access the demo from your local web browser by visiting http://127.0.0.1:39080","title":"\u90e8\u7f72\u6f14\u793a\u5e94\u7528\u7a0b\u5e8f"},{"location":"guides/deploy/deploy-from-helm/","text":"Deploy from Helm \u00b6 Coming Soon :::","title":"Deploy from Helm"},{"location":"guides/deploy/deploy-from-helm/#deploy-from-helm","text":"Coming Soon :::","title":"Deploy from Helm"},{"location":"guides/develop/service-crd-en/","text":"Develop CustomResources \u00b6 Nocalhost not only support developing the built-in resources such as Deployment, StatefulSet and Job, but also support developing the CustomResources . How it works \u00b6 Under the hood, Nocalhost replaces the container image of pod controlled by K8s Controller with developing container image and upload local source code into the developing container to achieve the developing of Kubernetes resources. When develop a specific kind of Controller (including both Built-in Resources and CustomResources), Nocalhost requires the following three aspects of information: Pod template path in the Controller's definition. For instance, the template path of the built-in Deployment is /spec/template . Nocalhost could use that path to get the Pod template and modify that template by replacing the business images with developing images. Do you want Nocalhost to modify the Controller's original Pod template definition or to create a new Deployment based on the original Pod template definition? Since not all of the Controller's Pod template definition could be modified. Job, for example, is unmodifiable. In such a condition, Nocalhost create a new Deployment with the original Pod template definition(which is transparent to users). The Pod template of the newly created Deployment use the developing image instead of the original image. Local source code will be uploaded into that Pod. How to make sure the cluster's traffic only visit the developing image in DevMode? A Controller usually manage many Pods. If there are still many Pods after entering DevMode, Nocalhost couldn't make sure that all the cluster's traffic goes through the developing Pod. Hence, Nocalhost will reduce the Pod replicas into 1 in most situations. In terms of the Custom Resources that need to create new Deployment for developing, Nocalhost will reduce the number of the Pod replicas in the original Controller into 0. Take DaemonSet as an example, Nocalhost will delete DaemonSet's Pods altogether through setting the NodeName of DaemonSet's Pods into a non-existent Node. Nocalhost define how to develop CustomResources by DevModeAction . The three fields of DevModeAction offer the above three aspects of information. Users can add DevModeAction in ~/.nh/nhctl/config to empower Nocalhost with the ability of developing specific CustomResources. An example of how to configure ~/.nh/nhctl/config is shown below: crdDevModeActions : - crdType : statefulsets.v1beta1.apps.kruise.io devModeAction : podTemplatePath : /spec/template create : false scalePatches : - type : json patch : '[{\"op\":\"replace\",\"path\":\"/spec/replicas\",\"value\":1}]' notes: crdType: The form is resource.version.group . The resource/version/group are the resource/version/group of CustomResources respectively, namely GVR in reverse, which is used to specify the corresponding CustomResources type of DevModeAction . devModeAction: Used to control the actions to take when specific CustomResources objects enter DevMode podTemplatePath: Specify the path of Pod template definition. Nocalhost will modify that template. For example, replace the containers' image with develop image, add sidcar containers, etc. create: Specify if a new Deployment is created in order to develop when CustomResources objects enter DevMode . If it's set into true , Nocalhost will use the Pod template definition in podTemplatePath to create a new Deployment. All of the operations in DevMode will be done in that Deployment. If it's set into false , Nocalhost will modify the Pod template definition of the CustomResources object directly. All of the operations done in DevMode will be applied to the CustomeResources object. scalePatches: It specifies the patch that configure the CustomResources object to reduce the amount of replicas into 1 before entering DevMode . If the amount of replicas has already been 1 or you don't mean to reduce the amount, then you can ignore this piece of config(refering to How to make sure the cluster's traffic only visit the developing image in DevMode? ). Besides, Nocalhost also has built-in support for several common open-source CustomResources, which includes CloneSet of Kruise , Advanced StatefulSet , Advanced DaemonSet etc. You can use Nocalhost to develop these CustomResources without configuration. How to use \u00b6 Find the CustomResources tab in Nocalhost IDE plugin. Expand that tab and you will see the CustomResources list. Right click the CustomeResources that you want to develop. A selection box will pop up. Click the Start DevMode to develop: The operations of CustomResources objects are in line with built-in resources in Workloads like Deployment/StatefulSet etc.","title":"CustomResources"},{"location":"guides/develop/service-crd-en/#develop-customresources","text":"Nocalhost not only support developing the built-in resources such as Deployment, StatefulSet and Job, but also support developing the CustomResources .","title":"Develop CustomResources"},{"location":"guides/develop/service-crd-en/#how-it-works","text":"Under the hood, Nocalhost replaces the container image of pod controlled by K8s Controller with developing container image and upload local source code into the developing container to achieve the developing of Kubernetes resources. When develop a specific kind of Controller (including both Built-in Resources and CustomResources), Nocalhost requires the following three aspects of information: Pod template path in the Controller's definition. For instance, the template path of the built-in Deployment is /spec/template . Nocalhost could use that path to get the Pod template and modify that template by replacing the business images with developing images. Do you want Nocalhost to modify the Controller's original Pod template definition or to create a new Deployment based on the original Pod template definition? Since not all of the Controller's Pod template definition could be modified. Job, for example, is unmodifiable. In such a condition, Nocalhost create a new Deployment with the original Pod template definition(which is transparent to users). The Pod template of the newly created Deployment use the developing image instead of the original image. Local source code will be uploaded into that Pod. How to make sure the cluster's traffic only visit the developing image in DevMode? A Controller usually manage many Pods. If there are still many Pods after entering DevMode, Nocalhost couldn't make sure that all the cluster's traffic goes through the developing Pod. Hence, Nocalhost will reduce the Pod replicas into 1 in most situations. In terms of the Custom Resources that need to create new Deployment for developing, Nocalhost will reduce the number of the Pod replicas in the original Controller into 0. Take DaemonSet as an example, Nocalhost will delete DaemonSet's Pods altogether through setting the NodeName of DaemonSet's Pods into a non-existent Node. Nocalhost define how to develop CustomResources by DevModeAction . The three fields of DevModeAction offer the above three aspects of information. Users can add DevModeAction in ~/.nh/nhctl/config to empower Nocalhost with the ability of developing specific CustomResources. An example of how to configure ~/.nh/nhctl/config is shown below: crdDevModeActions : - crdType : statefulsets.v1beta1.apps.kruise.io devModeAction : podTemplatePath : /spec/template create : false scalePatches : - type : json patch : '[{\"op\":\"replace\",\"path\":\"/spec/replicas\",\"value\":1}]' notes: crdType: The form is resource.version.group . The resource/version/group are the resource/version/group of CustomResources respectively, namely GVR in reverse, which is used to specify the corresponding CustomResources type of DevModeAction . devModeAction: Used to control the actions to take when specific CustomResources objects enter DevMode podTemplatePath: Specify the path of Pod template definition. Nocalhost will modify that template. For example, replace the containers' image with develop image, add sidcar containers, etc. create: Specify if a new Deployment is created in order to develop when CustomResources objects enter DevMode . If it's set into true , Nocalhost will use the Pod template definition in podTemplatePath to create a new Deployment. All of the operations in DevMode will be done in that Deployment. If it's set into false , Nocalhost will modify the Pod template definition of the CustomResources object directly. All of the operations done in DevMode will be applied to the CustomeResources object. scalePatches: It specifies the patch that configure the CustomResources object to reduce the amount of replicas into 1 before entering DevMode . If the amount of replicas has already been 1 or you don't mean to reduce the amount, then you can ignore this piece of config(refering to How to make sure the cluster's traffic only visit the developing image in DevMode? ). Besides, Nocalhost also has built-in support for several common open-source CustomResources, which includes CloneSet of Kruise , Advanced StatefulSet , Advanced DaemonSet etc. You can use Nocalhost to develop these CustomResources without configuration.","title":"How it works"},{"location":"guides/develop/service-crd-en/#how-to-use","text":"Find the CustomResources tab in Nocalhost IDE plugin. Expand that tab and you will see the CustomResources list. Right click the CustomeResources that you want to develop. A selection box will pop up. Click the Start DevMode to develop: The operations of CustomResources objects are in line with built-in resources in Workloads like Deployment/StatefulSet etc.","title":"How to use"},{"location":"guides/develop/service-crd/","text":"\u5f00\u53d1\u652f\u6301 \u00b6 Nocalhost \u9664\u4e86\u652f\u6301\u5bf9 Deployment/StatefulSet/Job \u7b49\u5185\u7f6e\u8d44\u6e90\u8fdb\u884c\u5f00\u53d1\uff0c\u4e5f\u652f\u6301\u5bf9 CustomResources \u8fdb\u884c\u5f00\u53d1\u3002 \u600e\u4e48\u8fd0\u884c\u7684 \u00b6 Nocalhost \u5bf9 K8s \u8d44\u6e90\u5bf9\u8c61\u7684\u5f00\u53d1\u672c\u8d28\u4e0a\u662f\u5c06 K8s Controller \u63a7\u5236\u7684 Pod \u7684\u4e1a\u52a1\u5bb9\u5668\u955c\u50cf\u66ff\u6362\u4e3a\u5f00\u53d1\u5bb9\u5668\u955c\u50cf\uff0c\u518d\u5c06\u672c\u5730\u7684\u6e90\u4ee3\u7801\u540c\u6b65\u5230\u5f00\u53d1\u5bb9\u5668\u4e2d\u53bb\u3002\u5728\u5bf9\u67d0\u79cd\u7279\u5b9a\u7c7b\u578b\u7684\u63a7\u5236\u5668\uff08\u5305\u62ec\u5185\u7f6e\u7c7b\u578b\u548c CustomResources \u7c7b\u578b\uff09\u8fdb\u884c\u5f00\u53d1\u65f6\uff0cNocalhost \u9700\u8981\u77e5\u9053\u4ee5\u4e0b 3 \u4e2a\u4fe1\u606f\uff1a Pod \u6a21\u677f\u5b9a\u4e49\u5728 Controller \u5b9a\u4e49\u4e2d\u7684\u8def\u5f84\u3002\u5982\u5185\u7f6e\u7c7b\u578b\u7684 Deployment \u7684 Pod \u6a21\u677f\u5b9a\u4e49\u8def\u5f84\u4e3a /spec/template \uff0cNocalhost \u901a\u8fc7\u8be5\u8def\u5f84\u53ef\u4ee5\u83b7\u53d6\u5230 Pod \u6a21\u677f\u5e76\u5bf9\u6a21\u677f\u8fdb\u884c\u4fee\u6539\uff0c\u5c06\u4e1a\u52a1\u5bb9\u5668\u955c\u50cf\u66ff\u6362\u6210\u5f00\u53d1\u5bb9\u5668\u955c\u50cf \u662f\u5728\u539f Controller \u7684 Pod \u6a21\u677f\u5b9a\u4e49\u4e0a\u76f4\u63a5\u4fee\u6539\uff0c\u8fd8\u662f\u4f7f\u7528\u8be5 Pod \u6a21\u677f\u5b9a\u4e49\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Deployment\u3002\u8fd9\u662f\u56e0\u4e3a\u5e76\u4e0d\u662f\u6240\u6709 Controller \u7684 Pod \u6a21\u677f\u90fd\u662f\u53ef\u4ee5\u4fee\u6539\u7684\uff0c\u5982 Job\uff0c\u5728\u8fd9\u79cd\u573a\u666f\u4e0b\uff0cNocalhost \u4f7f\u7528\u539f Controller \u7684 Pod \u6a21\u677f\u5b9a\u4e49\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Deployment\uff08\u8be5 Deployment \u5bf9\u7528\u6237\u900f\u660e\uff09\uff0c\u8be5 Deployment \u7684 Pod \u6a21\u677f\u5b9a\u4e49\u7684\u5bb9\u5668\u955c\u50cf\u4f1a\u88ab\u4fee\u6539\u4e3a\u5f00\u53d1\u5bb9\u5668\u955c\u50cf\uff0c\u672c\u5730\u7684\u6e90\u4ee3\u7801\u4e5f\u4f1a\u88ab\u540c\u6b65\u5230\u8be5 Pod \u91cc\u3002 \u5982\u4f55\u4fdd\u8bc1\u8fdb\u5165\u5f00\u53d1\u6a21\u5f0f\u4e4b\u540e\u96c6\u7fa4\u6d41\u91cf\u53ea\u4f1a\u8bbf\u95ee\u5230\u5f00\u53d1\u5bb9\u5668\u3002Controller \u5e38\u5e38\u4f1a\u7ba1\u7406\u591a\u4e2a Pod\uff0c\u5982\u679c\u8fdb\u5165\u5f00\u53d1\u6a21\u5f0f\u4e4b\u540e\u8fd8\u5b58\u5728\u591a\u4e2a Pod \u7684\u8bdd\uff0c\u6211\u4eec\u65e0\u6cd5\u4fdd\u8bc1\u96c6\u7fa4\u7684\u6d41\u91cf\u90fd\u53ea\u8bbf\u95ee\u6b63\u5728\u5f00\u53d1\u4e2d\u7684\u90a3\u4e2a Pod\uff0c\u6240\u4ee5\u4e00\u822c\u6211\u4eec\u9700\u8981\u5c06 Pod \u7684\u526f\u672c\u6570\u7f29\u51cf\u4e3a 1\u3002\u53e6\u5916\uff0c\u5bf9\u4e8e\u521b\u5efa\u65b0\u7684 Deployment \u8fdb\u884c\u5f00\u53d1\u7684 CustomResources\uff0c\u5219\u9700\u8981\u8ba9\u539f Controller \u7684 Pod \u526f\u672c\u6570\u7f29\u51cf\u4e3a 0\uff0c\u5982 DaemonSet,\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06 Pod \u7684 NodeName \u6307\u5b9a\u4e3a\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684 Node \u6765\u5c06 DaemonSet \u7ba1\u7406\u7684 Pod \u5168\u90e8\u5220\u6389\u3002 Nocalhost \u901a\u8fc7 DevModeAction \u6765\u5b9a\u4e49\u5982\u4f55\u5bf9 CustomResources \u8fdb\u884c\u5f00\u53d1\uff0c DevModeAction \u7684\u4e09\u4e2a\u5b57\u6bb5\u5206\u522b\u5411 Nocalhost \u63d0\u4f9b\u4e86\u4e0a\u8ff0 3 \u4e2a\u4fe1\u606f\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5728 ~/.nh/nhctl/config \u4e2d\u6dfb\u52a0 DevModeAction \u6765\u4f7f Nocalhost \u83b7\u5f97\u5f00\u53d1\u6307\u5b9a CustomResources \u7684\u80fd\u529b\uff0c ~/.nh/nhctl/config \u7684\u914d\u7f6e\u6837\u4f8b\u5982\u4e0b\uff1a crdDevModeActions : - crdType : statefulsets.v1beta1.apps.kruise.io devModeAction : podTemplatePath : /spec/template create : false scalePatches : - type : json patch : '[{\"op\":\"replace\",\"path\":\"/spec/replicas\",\"value\":1}]' \u5176\u4e2d\uff1a crdType: \u4e3a resource.version.group \u7684\u5f62\u5f0f\uff0cresource/version/group \u5206\u522b\u662f CustomResources \u7684 Resource/Version/Group\uff0c\u5373 GVR \u53cd\u8fc7\u6765\u5199\uff0c\u6307\u5b9a\u8be5 DevModeAction \u5bf9\u5e94\u7684 CustomResources \u7c7b\u578b devModeAction: \u7528\u4e8e\u63a7\u5236 Nocalhost \u8ba9\u6307\u5b9a CustomResources \u5bf9\u8c61\u8fdb\u5165 DevMode \u65f6\u7684\u884c\u4e3a podTemplatePath: \u6307\u5b9a Pod \u6a21\u677f\u5b9a\u4e49\u6240\u5728\u7684\u8def\u5f84\uff0cNocalhost \u4f1a\u4fee\u6539\u8be5\u6a21\u677f\uff0c\u5982\u5c06\u5bb9\u5668\u955c\u50cf\u4fee\u6539\u6210\u5f00\u53d1\u955c\u50cf\uff0c\u6dfb\u52a0 sidecar \u5bb9\u5668\u7b49 create: \u6307\u660e CustomResources \u5bf9\u8c61\u5728\u8fdb\u5165 DevMode \u65f6\uff0c\u662f\u5426\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Deployment\uff0c\u5728\u8be5 Deployment \u4e0a\u8fdb\u884c\u5f00\u53d1 \u5982\u679c\u4e3a true \uff0cNocalhost \u4f1a\u4f7f\u7528\u5728 podTemplatePath \u4e2d\u627e\u5230\u7684 Pod \u6a21\u677f\u5b9a\u4e49\u6765\u521b\u5efa\u4e00\u4e2a Deployment\uff0c DevMode \u4e0b\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u5728\u6539 Deployment \u4e2d\u8fdb\u884c \u5982\u679c\u4e3a false \uff0cNocalhost \u4f1a\u76f4\u63a5\u4fee\u6539 CustomResources \u5bf9\u8c61\u7684 Pod \u6a21\u677f\u5b9a\u4e49\uff0c DevMode \u4e0b\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u5728\u8be5 CustomResources \u5bf9\u8c61\u4e0a\u8fdb\u884c scalePatches: \u4e00\u822c\u4e3a\u914d\u7f6e CustomResources \u5bf9\u8c61\u5728\u8fdb\u5165\u5f00\u53d1\u6a21\u5f0f\u524d\u5c06\u526f\u672c\u6570\u7f29\u4e3a 1 \u7684 patch\uff0c\u5982\u679c\u526f\u672c\u6570\u5df2\u7ecf\u4e3a 1 \u6216\u4e0d\u9700\u8981\u5c06\u526f\u672c\u6570\u7f29\u4e3a 1\uff0c\u6b64\u9879\u53ef\u4e0d\u914d\u7f6e (\u53c2\u8003\u4e0a\u8ff0\u5173\u4e8e \u5982\u4f55\u4fdd\u8bc1\u8fdb\u5165\u5f00\u53d1\u6a21\u5f0f\u4e4b\u540e\u96c6\u7fa4\u6d41\u91cf\u53ea\u4f1a\u8bbf\u95ee\u5230\u5f00\u53d1\u5bb9\u5668 \u7684\u8bf4\u660e) \u53e6\u5916\uff0cNocalhost \u5bf9\u5e38\u89c1\u7684\u5f00\u6e90 CustomResources \u8fdb\u884c\u4e86\u5185\u7f6e\u652f\u6301\uff0c\u5982 Kruise \u7684 CloneSet \u3001 Advanced StatefulSet \u3001 Advanced DaemonSet \u7b49\uff0c\u5bf9\u4e8e\u5185\u7f6e\u652f\u6301\u7684 CustomResources\uff0c\u65e0\u9700\u8fdb\u884c\u914d\u7f6e\u4fbf\u76f4\u63a5\u4f7f\u7528 Nocalhost \u5bf9\u5176\u8fdb\u884c\u5f00\u53d1\u3002 \u5982\u4f55\u4f7f\u7528 \u00b6 \u5728 IDE \u63d2\u4ef6\u4e2d\u627e\u5230 CustomResources \u9009\u9879\u5361\uff0c\u5c55\u5f00\u8be5\u9009\u9879\u5361\u53ef\u4ee5\u67e5\u770b CustomResources \u8d44\u6e90\u5217\u8868\uff1a \u5728\u8981\u5f00\u53d1\u7684 CustomResources \u8d44\u6e90\u5bf9\u8c61\u4e0a\u70b9\u51fb\u53f3\u952e\uff0c\u5f39\u51fa\u9009\u9879\u6846\uff0c\u70b9\u51fb Start DevMode \u6216 Start DevMode(Duplicate) \u5373\u53ef\u8fdb\u5165\u5f00\u53d1\u6a21\u5f0f\uff1a CustomResources \u5bf9\u8c61\u7684\u5404\u4e2a\u64cd\u4f5c\u548c Workloads \u4e2d\u7684 Deployment/StatefulSet \u7b49 K8s \u5185\u7f6e\u8d44\u6e90\u5bf9\u8c61\u57fa\u672c\u4e00\u81f4","title":"CustomResources"},{"location":"guides/develop/service-crd/#_1","text":"Nocalhost \u9664\u4e86\u652f\u6301\u5bf9 Deployment/StatefulSet/Job \u7b49\u5185\u7f6e\u8d44\u6e90\u8fdb\u884c\u5f00\u53d1\uff0c\u4e5f\u652f\u6301\u5bf9 CustomResources \u8fdb\u884c\u5f00\u53d1\u3002","title":"\u5f00\u53d1\u652f\u6301"},{"location":"guides/develop/service-crd/#_2","text":"Nocalhost \u5bf9 K8s \u8d44\u6e90\u5bf9\u8c61\u7684\u5f00\u53d1\u672c\u8d28\u4e0a\u662f\u5c06 K8s Controller \u63a7\u5236\u7684 Pod \u7684\u4e1a\u52a1\u5bb9\u5668\u955c\u50cf\u66ff\u6362\u4e3a\u5f00\u53d1\u5bb9\u5668\u955c\u50cf\uff0c\u518d\u5c06\u672c\u5730\u7684\u6e90\u4ee3\u7801\u540c\u6b65\u5230\u5f00\u53d1\u5bb9\u5668\u4e2d\u53bb\u3002\u5728\u5bf9\u67d0\u79cd\u7279\u5b9a\u7c7b\u578b\u7684\u63a7\u5236\u5668\uff08\u5305\u62ec\u5185\u7f6e\u7c7b\u578b\u548c CustomResources \u7c7b\u578b\uff09\u8fdb\u884c\u5f00\u53d1\u65f6\uff0cNocalhost \u9700\u8981\u77e5\u9053\u4ee5\u4e0b 3 \u4e2a\u4fe1\u606f\uff1a Pod \u6a21\u677f\u5b9a\u4e49\u5728 Controller \u5b9a\u4e49\u4e2d\u7684\u8def\u5f84\u3002\u5982\u5185\u7f6e\u7c7b\u578b\u7684 Deployment \u7684 Pod \u6a21\u677f\u5b9a\u4e49\u8def\u5f84\u4e3a /spec/template \uff0cNocalhost \u901a\u8fc7\u8be5\u8def\u5f84\u53ef\u4ee5\u83b7\u53d6\u5230 Pod \u6a21\u677f\u5e76\u5bf9\u6a21\u677f\u8fdb\u884c\u4fee\u6539\uff0c\u5c06\u4e1a\u52a1\u5bb9\u5668\u955c\u50cf\u66ff\u6362\u6210\u5f00\u53d1\u5bb9\u5668\u955c\u50cf \u662f\u5728\u539f Controller \u7684 Pod \u6a21\u677f\u5b9a\u4e49\u4e0a\u76f4\u63a5\u4fee\u6539\uff0c\u8fd8\u662f\u4f7f\u7528\u8be5 Pod \u6a21\u677f\u5b9a\u4e49\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Deployment\u3002\u8fd9\u662f\u56e0\u4e3a\u5e76\u4e0d\u662f\u6240\u6709 Controller \u7684 Pod \u6a21\u677f\u90fd\u662f\u53ef\u4ee5\u4fee\u6539\u7684\uff0c\u5982 Job\uff0c\u5728\u8fd9\u79cd\u573a\u666f\u4e0b\uff0cNocalhost \u4f7f\u7528\u539f Controller \u7684 Pod \u6a21\u677f\u5b9a\u4e49\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Deployment\uff08\u8be5 Deployment \u5bf9\u7528\u6237\u900f\u660e\uff09\uff0c\u8be5 Deployment \u7684 Pod \u6a21\u677f\u5b9a\u4e49\u7684\u5bb9\u5668\u955c\u50cf\u4f1a\u88ab\u4fee\u6539\u4e3a\u5f00\u53d1\u5bb9\u5668\u955c\u50cf\uff0c\u672c\u5730\u7684\u6e90\u4ee3\u7801\u4e5f\u4f1a\u88ab\u540c\u6b65\u5230\u8be5 Pod \u91cc\u3002 \u5982\u4f55\u4fdd\u8bc1\u8fdb\u5165\u5f00\u53d1\u6a21\u5f0f\u4e4b\u540e\u96c6\u7fa4\u6d41\u91cf\u53ea\u4f1a\u8bbf\u95ee\u5230\u5f00\u53d1\u5bb9\u5668\u3002Controller \u5e38\u5e38\u4f1a\u7ba1\u7406\u591a\u4e2a Pod\uff0c\u5982\u679c\u8fdb\u5165\u5f00\u53d1\u6a21\u5f0f\u4e4b\u540e\u8fd8\u5b58\u5728\u591a\u4e2a Pod \u7684\u8bdd\uff0c\u6211\u4eec\u65e0\u6cd5\u4fdd\u8bc1\u96c6\u7fa4\u7684\u6d41\u91cf\u90fd\u53ea\u8bbf\u95ee\u6b63\u5728\u5f00\u53d1\u4e2d\u7684\u90a3\u4e2a Pod\uff0c\u6240\u4ee5\u4e00\u822c\u6211\u4eec\u9700\u8981\u5c06 Pod \u7684\u526f\u672c\u6570\u7f29\u51cf\u4e3a 1\u3002\u53e6\u5916\uff0c\u5bf9\u4e8e\u521b\u5efa\u65b0\u7684 Deployment \u8fdb\u884c\u5f00\u53d1\u7684 CustomResources\uff0c\u5219\u9700\u8981\u8ba9\u539f Controller \u7684 Pod \u526f\u672c\u6570\u7f29\u51cf\u4e3a 0\uff0c\u5982 DaemonSet,\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06 Pod \u7684 NodeName \u6307\u5b9a\u4e3a\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684 Node \u6765\u5c06 DaemonSet \u7ba1\u7406\u7684 Pod \u5168\u90e8\u5220\u6389\u3002 Nocalhost \u901a\u8fc7 DevModeAction \u6765\u5b9a\u4e49\u5982\u4f55\u5bf9 CustomResources \u8fdb\u884c\u5f00\u53d1\uff0c DevModeAction \u7684\u4e09\u4e2a\u5b57\u6bb5\u5206\u522b\u5411 Nocalhost \u63d0\u4f9b\u4e86\u4e0a\u8ff0 3 \u4e2a\u4fe1\u606f\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5728 ~/.nh/nhctl/config \u4e2d\u6dfb\u52a0 DevModeAction \u6765\u4f7f Nocalhost \u83b7\u5f97\u5f00\u53d1\u6307\u5b9a CustomResources \u7684\u80fd\u529b\uff0c ~/.nh/nhctl/config \u7684\u914d\u7f6e\u6837\u4f8b\u5982\u4e0b\uff1a crdDevModeActions : - crdType : statefulsets.v1beta1.apps.kruise.io devModeAction : podTemplatePath : /spec/template create : false scalePatches : - type : json patch : '[{\"op\":\"replace\",\"path\":\"/spec/replicas\",\"value\":1}]' \u5176\u4e2d\uff1a crdType: \u4e3a resource.version.group \u7684\u5f62\u5f0f\uff0cresource/version/group \u5206\u522b\u662f CustomResources \u7684 Resource/Version/Group\uff0c\u5373 GVR \u53cd\u8fc7\u6765\u5199\uff0c\u6307\u5b9a\u8be5 DevModeAction \u5bf9\u5e94\u7684 CustomResources \u7c7b\u578b devModeAction: \u7528\u4e8e\u63a7\u5236 Nocalhost \u8ba9\u6307\u5b9a CustomResources \u5bf9\u8c61\u8fdb\u5165 DevMode \u65f6\u7684\u884c\u4e3a podTemplatePath: \u6307\u5b9a Pod \u6a21\u677f\u5b9a\u4e49\u6240\u5728\u7684\u8def\u5f84\uff0cNocalhost \u4f1a\u4fee\u6539\u8be5\u6a21\u677f\uff0c\u5982\u5c06\u5bb9\u5668\u955c\u50cf\u4fee\u6539\u6210\u5f00\u53d1\u955c\u50cf\uff0c\u6dfb\u52a0 sidecar \u5bb9\u5668\u7b49 create: \u6307\u660e CustomResources \u5bf9\u8c61\u5728\u8fdb\u5165 DevMode \u65f6\uff0c\u662f\u5426\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Deployment\uff0c\u5728\u8be5 Deployment \u4e0a\u8fdb\u884c\u5f00\u53d1 \u5982\u679c\u4e3a true \uff0cNocalhost \u4f1a\u4f7f\u7528\u5728 podTemplatePath \u4e2d\u627e\u5230\u7684 Pod \u6a21\u677f\u5b9a\u4e49\u6765\u521b\u5efa\u4e00\u4e2a Deployment\uff0c DevMode \u4e0b\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u5728\u6539 Deployment \u4e2d\u8fdb\u884c \u5982\u679c\u4e3a false \uff0cNocalhost \u4f1a\u76f4\u63a5\u4fee\u6539 CustomResources \u5bf9\u8c61\u7684 Pod \u6a21\u677f\u5b9a\u4e49\uff0c DevMode \u4e0b\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u5728\u8be5 CustomResources \u5bf9\u8c61\u4e0a\u8fdb\u884c scalePatches: \u4e00\u822c\u4e3a\u914d\u7f6e CustomResources \u5bf9\u8c61\u5728\u8fdb\u5165\u5f00\u53d1\u6a21\u5f0f\u524d\u5c06\u526f\u672c\u6570\u7f29\u4e3a 1 \u7684 patch\uff0c\u5982\u679c\u526f\u672c\u6570\u5df2\u7ecf\u4e3a 1 \u6216\u4e0d\u9700\u8981\u5c06\u526f\u672c\u6570\u7f29\u4e3a 1\uff0c\u6b64\u9879\u53ef\u4e0d\u914d\u7f6e (\u53c2\u8003\u4e0a\u8ff0\u5173\u4e8e \u5982\u4f55\u4fdd\u8bc1\u8fdb\u5165\u5f00\u53d1\u6a21\u5f0f\u4e4b\u540e\u96c6\u7fa4\u6d41\u91cf\u53ea\u4f1a\u8bbf\u95ee\u5230\u5f00\u53d1\u5bb9\u5668 \u7684\u8bf4\u660e) \u53e6\u5916\uff0cNocalhost \u5bf9\u5e38\u89c1\u7684\u5f00\u6e90 CustomResources \u8fdb\u884c\u4e86\u5185\u7f6e\u652f\u6301\uff0c\u5982 Kruise \u7684 CloneSet \u3001 Advanced StatefulSet \u3001 Advanced DaemonSet \u7b49\uff0c\u5bf9\u4e8e\u5185\u7f6e\u652f\u6301\u7684 CustomResources\uff0c\u65e0\u9700\u8fdb\u884c\u914d\u7f6e\u4fbf\u76f4\u63a5\u4f7f\u7528 Nocalhost \u5bf9\u5176\u8fdb\u884c\u5f00\u53d1\u3002","title":"\u600e\u4e48\u8fd0\u884c\u7684"},{"location":"guides/develop/service-crd/#_3","text":"\u5728 IDE \u63d2\u4ef6\u4e2d\u627e\u5230 CustomResources \u9009\u9879\u5361\uff0c\u5c55\u5f00\u8be5\u9009\u9879\u5361\u53ef\u4ee5\u67e5\u770b CustomResources \u8d44\u6e90\u5217\u8868\uff1a \u5728\u8981\u5f00\u53d1\u7684 CustomResources \u8d44\u6e90\u5bf9\u8c61\u4e0a\u70b9\u51fb\u53f3\u952e\uff0c\u5f39\u51fa\u9009\u9879\u6846\uff0c\u70b9\u51fb Start DevMode \u6216 Start DevMode(Duplicate) \u5373\u53ef\u8fdb\u5165\u5f00\u53d1\u6a21\u5f0f\uff1a CustomResources \u5bf9\u8c61\u7684\u5404\u4e2a\u64cd\u4f5c\u548c Workloads \u4e2d\u7684 Deployment/StatefulSet \u7b49 K8s \u5185\u7f6e\u8d44\u6e90\u5bf9\u8c61\u57fa\u672c\u4e00\u81f4","title":"\u5982\u4f55\u4f7f\u7528"},{"location":"guides/develop/service-dup-en/","text":"Why Duplicate DevMode \u00b6 Replace DevMode is the default development mode of Nocalhost. When developing a workload, the container image of the original workload will be replaced with the development image. As shown below: Using Replace DevMode can well maintain the original call relations between services and transfer the traffic of other services in the cluster to the service being developed. However, there are also some shortcomings: 1. It may destroy the original environment. The problems in the service being developed may cause problems to the whole environment. 2. It may affect the normal use of the environment by other team members. Other members may only want to access the normal environment rather than the development environment. 3. Multiple team members cannot develop the same service in the same K8s cluster at the same time. To solve these problems, we can use Duplicate DevMode . How it works \u00b6 In Duplicate DevMode , instead of modifying the original workload, Nocalhost creates a duplicate of the original workload and further develops on it. Duplicate DevMode can be run on different devices to create the duplicate of the workload for development at the same time. Nocalhost will mark the device ID on the duplicate to identify which device is developing which duplicate. (Note that the device ID is automatically generated by Nocalhost and invisible to all users. Different devices will not have the same ID). Moreover, the duplicates will not affect each other. As shown below: The duplicate and the pod managed by it will use different labels from the original workload, so it will not receive any traffic that wants to access the original workload. The reason for doing so is that Duplicate DevMode enables you to enter the development mode on many devices, which is different from Replace DevMode , so if both the duplicate and the original workload can receive the online traffic, we cannot know which duplicate is being used and the result of accessing the environment will be unpredictable. If the microservice application uses a third-party service discovery component (such as NACOS) instead of K8s Service, it is still possible that other services in the cluster access the duplicates created by Duplicate Mode . That also makes the result of accessing the environment unpredictable. In this case, you need to decide whether to register the service in the duplicate to the registration center. Duplicate Mode and Replace Mode can be run in different devices in the same time, but you can only choose one for development on one device. When we need to access the service being developed in the duplicate, we can forward the local port to the target port of the remote service by the port forwarding function of Nocalhost. Then the service can be accessed locally through lcoalhost:[local port] . The created duplicate is invisible to users, so it will not be displayed in the workload list of VS Code and Jetbrains How to use \u00b6 Right-click Start DevMode(duplicate) on the Jetbrains and VS Code extension to enter Duplicate DevMode : Enter Duplicate DevMode and you will see the corresponding icon of the workload, indicating that the workload is in Duplicate DevMode . Other operations in Duplicate DevMode are the same as the default development mode. Just like in the default development mode, if you need to access the service being developed through the local port, right-click Port Forward to use the port forwarding function of Nocalhost. FAQ \u00b6 \u00b6 Since the traffic from other services will not be received in Duplicate Mode , what's the difference between it and running and developing the program locally? \u00b6 Running the program locally might need to import many environment variables. Especially if the workload needs other K8s resources in the cluster, such as (configmap / secrets), it will be more complicated to deal with. Because the local programs is in a different network from the cluster, some specific configurations are required to access other services in the cluster (such as mysql, redis, etc.). Although the duplicate created by Duplicate Mode cannot be accessed by other services, it can directly access other services in the cluster. In addition, developing the program in the container can maintain good consistency with the production environment. Is there a limitation on the number of duplicates? \u00b6 There is no limitation on the number of duplicates in Nocalhost. Theoretically, Duplicate Mode can be run on any number of devices to create their own duplicates for development. However, it may be limited by cluster resources in real scenarios.","title":"DevMode(Duplicate)"},{"location":"guides/develop/service-dup-en/#why-duplicate-devmode","text":"Replace DevMode is the default development mode of Nocalhost. When developing a workload, the container image of the original workload will be replaced with the development image. As shown below: Using Replace DevMode can well maintain the original call relations between services and transfer the traffic of other services in the cluster to the service being developed. However, there are also some shortcomings: 1. It may destroy the original environment. The problems in the service being developed may cause problems to the whole environment. 2. It may affect the normal use of the environment by other team members. Other members may only want to access the normal environment rather than the development environment. 3. Multiple team members cannot develop the same service in the same K8s cluster at the same time. To solve these problems, we can use Duplicate DevMode .","title":"Why Duplicate DevMode"},{"location":"guides/develop/service-dup-en/#how-it-works","text":"In Duplicate DevMode , instead of modifying the original workload, Nocalhost creates a duplicate of the original workload and further develops on it. Duplicate DevMode can be run on different devices to create the duplicate of the workload for development at the same time. Nocalhost will mark the device ID on the duplicate to identify which device is developing which duplicate. (Note that the device ID is automatically generated by Nocalhost and invisible to all users. Different devices will not have the same ID). Moreover, the duplicates will not affect each other. As shown below: The duplicate and the pod managed by it will use different labels from the original workload, so it will not receive any traffic that wants to access the original workload. The reason for doing so is that Duplicate DevMode enables you to enter the development mode on many devices, which is different from Replace DevMode , so if both the duplicate and the original workload can receive the online traffic, we cannot know which duplicate is being used and the result of accessing the environment will be unpredictable. If the microservice application uses a third-party service discovery component (such as NACOS) instead of K8s Service, it is still possible that other services in the cluster access the duplicates created by Duplicate Mode . That also makes the result of accessing the environment unpredictable. In this case, you need to decide whether to register the service in the duplicate to the registration center. Duplicate Mode and Replace Mode can be run in different devices in the same time, but you can only choose one for development on one device. When we need to access the service being developed in the duplicate, we can forward the local port to the target port of the remote service by the port forwarding function of Nocalhost. Then the service can be accessed locally through lcoalhost:[local port] . The created duplicate is invisible to users, so it will not be displayed in the workload list of VS Code and Jetbrains","title":"How it works"},{"location":"guides/develop/service-dup-en/#how-to-use","text":"Right-click Start DevMode(duplicate) on the Jetbrains and VS Code extension to enter Duplicate DevMode : Enter Duplicate DevMode and you will see the corresponding icon of the workload, indicating that the workload is in Duplicate DevMode . Other operations in Duplicate DevMode are the same as the default development mode. Just like in the default development mode, if you need to access the service being developed through the local port, right-click Port Forward to use the port forwarding function of Nocalhost.","title":"How to use"},{"location":"guides/develop/service-dup-en/#faq","text":"","title":"FAQ"},{"location":"guides/develop/service-dup-en/#_1","text":"","title":""},{"location":"guides/develop/service-dup-en/#since-the-traffic-from-other-services-will-not-be-received-in-duplicate-mode-whats-the-difference-between-it-and-running-and-developing-the-program-locally","text":"Running the program locally might need to import many environment variables. Especially if the workload needs other K8s resources in the cluster, such as (configmap / secrets), it will be more complicated to deal with. Because the local programs is in a different network from the cluster, some specific configurations are required to access other services in the cluster (such as mysql, redis, etc.). Although the duplicate created by Duplicate Mode cannot be accessed by other services, it can directly access other services in the cluster. In addition, developing the program in the container can maintain good consistency with the production environment.","title":"Since the traffic from other services will not be received in Duplicate Mode , what's the difference between it and running and developing the program locally?"},{"location":"guides/develop/service-dup-en/#is-there-a-limitation-on-the-number-of-duplicates","text":"There is no limitation on the number of duplicates in Nocalhost. Theoretically, Duplicate Mode can be run on any number of devices to create their own duplicates for development. However, it may be limited by cluster resources in real scenarios.","title":"Is there a limitation on the number of duplicates?"},{"location":"guides/develop/service-dup-mesh/","text":"\u4e3a\u4ec0\u4e48\u8981\u7f51\u683c DevMode \u00b6 \u8003\u8651\u591a\u4e2a\u7528\u6237\u53ef\u80fd\u9700\u8981\u540c\u65f6\u5f00\u53d1\u4e00\u9879\u670d\u52a1\uff0c\u4f46\u662f\u5982\u679c\u4f7f\u7528 DevMode \u91cd\u590d\uff0c\u5b83\u5c06\u4e0d\u4f1a\u63a5\u6536\u6d41\u91cf\uff0c\u5982\u679c\u4f7f\u7528 DevMode \u66ff\u6362\uff0c\u5b83\u53ea\u80fd\u7531\u4e00\u4e2a\u7528\u6237 Dev\uff0c\u56e0\u6b64\u6211\u4eec\u521b\u5efa\u53e6\u4e00\u4e2a\u79f0\u4e3a MESH DEVMODE \u7684 DevMode\uff0c\u8bf7\u4f7f\u7528\u7279\u6b8a\u7684\u6807\u9898\u5c06\u8def\u7531\u5230\u60a8\u7684 Devmode Pod\uff0c\u5176\u4ed6\u6d41\u91cf\u5c06\u8def\u7531\u5230\u539f\u59cb POD\u3002 \u600e\u4e48\u8fd0\u884c\u7684 \u00b6 \u4f7f\u7528\u7279\u4f7f\u5c06\u6d41\u91cf\u4e0e\u6807\u5934\u8def\u7531\uff0c\u6211\u4eec\u5236\u4f5c\u4e00\u4e2a\u63a7\u5236\u5e73\u9762\u4ee5\u5206\u53d1\u8def\u7ebf\u89c4\u5219\u3002 Like the picture below: Service A is original, receive inbound traffic Service A' is created by one user enter mesh devMode with special header Header: a=1 Service A'' is created by another user enter mesh devMode with special header Header: a=2 Traffic with header Header: a=1 will route to Service A' Traffic with header Header: a=2 will route to Service A'' Otherwise, traffic will other header, like Header: b=1 or Header: c=2 or without header, will handle by Service A \u5982\u4f55\u4f7f\u7528 \u00b6 Right-click Start Mesh(Duplicate) on the Jetbrains and VS Code extension to enter Mesh DevMode : Then, you need to set a header to indicate traffic with this header will route to this pod. Enter Mesh DevMode and you will see the corresponding icon of the workload, indicating that the workload is in Mesh DevMode . \u5e38\u95ee\u95ee\u9898 \u00b6 \u6211\u4eec\u662f\u5426\u9700\u8981\u5b89\u88c5 ISTIO \u6765\u4f7f\u7528\u7f51\u683c Devmode\uff1f No, Mesh DevMode use envoy as data-plane, not depends on istio. Duplicate DevMode Replace DevMode \u548c Mesh DevMode \u6709\u4ec0\u4e48\u533a\u522b? Mesh DevMode \u662f\u5426\u652f\u6301\u6240\u6709\u534f\u8bae? No, it just supports HTTP/GRPC. \u91cd\u590d\u6570\u91cf\u662f\u5426\u6709\u9650\u5236\uff1f There is no limitation on the number of duplicates in Nocalhost. Theoretically, Mesh DevMode can be run on any number of devices to create their own duplicates for development. However, it may be limited by cluster resources in real scenarios. \u5982\u4f55\u9a8c\u8bc1\u7f51\u683c devmode \u6b63\u5e38\u5de5\u4f5c\uff1f You can not use port-forward to verify Mesh devMode, because of localhost traffic will route to local, you can use two ways to verify it: enter another pod terminal, use command line curl to send request to origin pod with special header to verify Mesh DevMode. port-forward service to local, access this service with special header to verify Mesh DevMode.","title":"DevMode Mesh"},{"location":"guides/develop/service-dup-mesh/#devmode","text":"\u8003\u8651\u591a\u4e2a\u7528\u6237\u53ef\u80fd\u9700\u8981\u540c\u65f6\u5f00\u53d1\u4e00\u9879\u670d\u52a1\uff0c\u4f46\u662f\u5982\u679c\u4f7f\u7528 DevMode \u91cd\u590d\uff0c\u5b83\u5c06\u4e0d\u4f1a\u63a5\u6536\u6d41\u91cf\uff0c\u5982\u679c\u4f7f\u7528 DevMode \u66ff\u6362\uff0c\u5b83\u53ea\u80fd\u7531\u4e00\u4e2a\u7528\u6237 Dev\uff0c\u56e0\u6b64\u6211\u4eec\u521b\u5efa\u53e6\u4e00\u4e2a\u79f0\u4e3a MESH DEVMODE \u7684 DevMode\uff0c\u8bf7\u4f7f\u7528\u7279\u6b8a\u7684\u6807\u9898\u5c06\u8def\u7531\u5230\u60a8\u7684 Devmode Pod\uff0c\u5176\u4ed6\u6d41\u91cf\u5c06\u8def\u7531\u5230\u539f\u59cb POD\u3002","title":"\u4e3a\u4ec0\u4e48\u8981\u7f51\u683c DevMode"},{"location":"guides/develop/service-dup-mesh/#_1","text":"\u4f7f\u7528\u7279\u4f7f\u5c06\u6d41\u91cf\u4e0e\u6807\u5934\u8def\u7531\uff0c\u6211\u4eec\u5236\u4f5c\u4e00\u4e2a\u63a7\u5236\u5e73\u9762\u4ee5\u5206\u53d1\u8def\u7ebf\u89c4\u5219\u3002 Like the picture below: Service A is original, receive inbound traffic Service A' is created by one user enter mesh devMode with special header Header: a=1 Service A'' is created by another user enter mesh devMode with special header Header: a=2 Traffic with header Header: a=1 will route to Service A' Traffic with header Header: a=2 will route to Service A'' Otherwise, traffic will other header, like Header: b=1 or Header: c=2 or without header, will handle by Service A","title":"\u600e\u4e48\u8fd0\u884c\u7684"},{"location":"guides/develop/service-dup-mesh/#_2","text":"Right-click Start Mesh(Duplicate) on the Jetbrains and VS Code extension to enter Mesh DevMode : Then, you need to set a header to indicate traffic with this header will route to this pod. Enter Mesh DevMode and you will see the corresponding icon of the workload, indicating that the workload is in Mesh DevMode .","title":"\u5982\u4f55\u4f7f\u7528"},{"location":"guides/develop/service-dup-mesh/#_3","text":"\u6211\u4eec\u662f\u5426\u9700\u8981\u5b89\u88c5 ISTIO \u6765\u4f7f\u7528\u7f51\u683c Devmode\uff1f No, Mesh DevMode use envoy as data-plane, not depends on istio. Duplicate DevMode Replace DevMode \u548c Mesh DevMode \u6709\u4ec0\u4e48\u533a\u522b? Mesh DevMode \u662f\u5426\u652f\u6301\u6240\u6709\u534f\u8bae? No, it just supports HTTP/GRPC. \u91cd\u590d\u6570\u91cf\u662f\u5426\u6709\u9650\u5236\uff1f There is no limitation on the number of duplicates in Nocalhost. Theoretically, Mesh DevMode can be run on any number of devices to create their own duplicates for development. However, it may be limited by cluster resources in real scenarios. \u5982\u4f55\u9a8c\u8bc1\u7f51\u683c devmode \u6b63\u5e38\u5de5\u4f5c\uff1f You can not use port-forward to verify Mesh devMode, because of localhost traffic will route to local, you can use two ways to verify it: enter another pod terminal, use command line curl to send request to origin pod with special header to verify Mesh DevMode. port-forward service to local, access this service with special header to verify Mesh DevMode.","title":"\u5e38\u95ee\u95ee\u9898"},{"location":"guides/develop/service-dup/","text":"\u4e3a\u4ec0\u4e48\u8981\u91cd\u590d DevMode \u00b6 Nocalhost \u9ed8\u8ba4\u7684\u5f00\u53d1\u6a21\u5f0f\u662f\u66ff\u6362\u955c\u50cf( Replace DevMode )\u7684\u65b9\u5f0f\uff0c\u5f53\u5bf9\u67d0\u4e2a\u5de5\u4f5c\u8d1f\u8f7d\u8fdb\u884c\u5f00\u53d1\u7684\u65f6\u5019\uff0c\u4f1a\u628a\u539f\u6709\u7684\u5de5\u4f5c\u8d1f\u8f7d\u7684\u5bb9\u5668\u955c\u50cf\u66ff\u6362\u6210\u5f00\u53d1\u955c\u50cf\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4f7f\u7528\u76f4\u63a5\u66ff\u6362\u955c\u50cf\u7684\u65b9\u5f0f\u53ef\u4ee5\u5f88\u597d\u5730\u4fdd\u6301\u539f\u6709\u7684\u670d\u52a1\u95f4\u8c03\u7528\u5173\u7cfb\uff0c\u8ba9\u96c6\u7fa4\u4e2d\u5176\u5b83\u670d\u52a1\u7684\u6d41\u91cf\u6253\u5230\u6b63\u5728\u5f00\u53d1\u7684\u670d\u52a1\u4e0a\uff0c\u4f46\u662f\u4e5f\u5b58\u5728\u4ee5\u4e0b\u4e0d\u8db3: \u5bb9\u6613\u7834\u574f\u539f\u6709\u7684\u73af\u5883\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5f00\u53d1\u4e2d\u7684\u670d\u52a1\u51fa\u73b0\u95ee\u9898\u800c\u5bfc\u81f4\u6574\u4e2a\u73af\u5883\u51fa\u95ee\u9898 \u5bb9\u6613\u5f71\u54cd\u5176\u5b83\u56e2\u961f\u6210\u5458\u5bf9\u73af\u5883\u7684\u6b63\u5e38\u4f7f\u7528\uff0c\u5176\u5b83\u56e2\u961f\u6210\u5458\u53ef\u80fd\u53ea\u60f3\u8bbf\u95ee\u6b63\u5e38\u7684\u7684\u73af\u5883\uff0c\u800c\u4e0d\u662f\u5904\u4e8e\u5f00\u53d1\u4e2d\u7684\u73af\u5883 \u591a\u4e2a\u56e2\u961f\u6210\u5458\u65e0\u6cd5\u5bf9\u540c\u4e00\u5957\u73af\u5883\u7684\u540c\u4e00\u4e2a\u670d\u52a1\u8fdb\u884c\u5f00\u53d1 \u4e3a\u4e86\u89e3\u51b3\u4ee5\u4e0a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Duplicate DevMode \u8fdb\u884c\u5f00\u53d1\u3002 \u600e\u4e48\u8fd0\u884c\u7684 \u00b6 \u5728 Duplicate DevMode \u4e2d\uff0cNocalhost \u4e0d\u4f1a\u5bf9\u539f\u6709\u539f\u6709\u5de5\u4f5c\u8d1f\u8f7d\u8fdb\u884c\u4efb\u4f55\u4fee\u6539\uff0c\u800c\u662f\u521b\u5efa\u4e00\u4e2a\u539f\u6709\u5de5\u4f5c\u8d1f\u8f7d\u7684\u526f\u672c\uff0c\u5728\u8be5\u526f\u672c\u4e0a\u8fdb\u884c\u5f00\u53d1\u3002\u5728\u4e0d\u540c\u8bbe\u5907\u4e0a\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528 Duplicate DevMode \u521b\u5efa\u5de5\u4f5c\u8d1f\u8f7d\u7684\u526f\u672c\u8fdb\u884c\u5f00\u53d1\uff0c\u526f\u672c\u4e0a\u4f1a\u88ab Nocalhost \u6253\u4e0a\u8bbe\u5907\u7684 ID (\u8bbe\u5907 ID \u7531 Nocalhost \u81ea\u52a8\u751f\u6210\uff0c\u5bf9\u7528\u6237\u900f\u660e\uff0c\u5e76\u4fdd\u8bc1\u4e0d\u540c\u8bbe\u5907\u4e0a\u7684\u8bbe\u5907 ID \u4e0d\u4f1a\u91cd\u590d)\u4ee5\u6807\u8bc6\u8be5\u526f\u672c\u662f\u54ea\u4e2a\u8bbe\u5907\u5728\u8fdb\u884c\u5f00\u53d1\uff0c\u5404\u4e2a\u526f\u672c\u4e4b\u95f4\u4e92\u4e0d\u5f71\u54cd\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u526f\u672c\u53ca\u5176\u7ba1\u7406\u7684 Pod \u4f1a\u4f7f\u7528\u548c\u539f\u6709\u5de5\u4f5c\u8d1f\u8f7d\u4e0d\u4e00\u6837\u7684 labels\uff0c\u6240\u4ee5\u5b83\u4e0d\u4f1a\u63a5\u6536\u4efb\u4f55\u8bbf\u95ee\u539f\u6709\u5de5\u4f5c\u8d1f\u8f7d\u7684\u6d41\u91cf\u3002\u8fd9\u4e48\u505a\u7684\u539f\u56e0\u662f\uff0c\u548c Replace DevMode \u4e0d\u540c\uff0c Duplicate DevMode \u662f\u5141\u8bb8\u5728\u591a\u53f0\u8bbe\u5907\u4e0a\u540c\u65f6\u8fdb\u5165\u5f00\u53d1\u6a21\u5f0f\u7684\uff0c\u5982\u679c\u526f\u672c\u548c\u539f\u6709\u5de5\u4f5c\u8d1f\u8f7d\u4e00\u6837\u90fd\u63a5\u6536\u6765\u81ea\u7ebf\u4e0a\u6d41\u91cf\u7684\u8bdd\uff0c\u6211\u4eec\u65e0\u6cd5\u77e5\u9053\u5f53\u524d\u8bbf\u95ee\u7684\u73af\u5883\u4f7f\u7528\u7684\u54ea\u4e2a\u8bbe\u5907\u4e0a\u6b63\u5728\u5f00\u53d1\u7684\u670d\u52a1\uff0c\u4ece\u800c\u4f1a\u5bfc\u81f4\u8bbf\u95ee\u73af\u5883\u7684\u7ed3\u679c\u53d8\u5f97\u4e0d\u53ef\u9884\u671f\u3002 Caution \u5982\u679c\u5fae\u670d\u52a1\u5e94\u7528\u4f7f\u7528\u4e86\u7b2c\u4e09\u65b9\u7684\u670d\u52a1\u53d1\u73b0\u7ec4\u4ef6(\u5982 NACOS)\uff0c\u800c\u4e0d\u662f\u4f7f\u7528 K8s \u7684 Service \u6765\u8fdb\u884c\u670d\u52a1\u53d1\u73b0\uff0c\u90a3\u4e48\u4ecd\u7136\u53ef\u80fd\u51fa\u73b0\u96c6\u7fa4\u4e2d\u5176\u5b83\u670d\u52a1\u8bbf\u95ee\u5230 Duplicate Mode \u521b\u5efa\u7684\u526f\u672c\uff0c\u4ece\u800c\u5bfc\u81f4\u8bbf\u95ee\u73af\u5883\u7684\u7ed3\u679c\u53d8\u5f97\u4e0d\u53ef\u9884\u671f\u3002\u8fd9\u79cd\u573a\u666f\u9700\u8981\u81ea\u884c\u63a7\u5236\u542f\u52a8\u7684\u670d\u52a1\u662f\u5426\u9700\u8981\u6ce8\u518c\u5230\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3 Duplicate Mode \u548c Replace Mode \u53ef\u4ee5\u5728\u4e0d\u540c\u8bbe\u5907\u4e0a\u540c\u65f6\u4f7f\u7528\uff0c\u4f46\u540c\u4e00\u8bbe\u5907\u4e0a\uff0c\u4ec5\u80fd\u9009\u62e9\u5176\u4e2d\u4e00\u79cd\u8fdb\u5165\u5f00\u53d1\u3002 \u5f53\u6211\u4eec\u9700\u8981\u8bbf\u95ee\u526f\u672c\u4e2d\u6b63\u5728\u5f00\u53d1\u7684\u670d\u52a1\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 Nocalhost \u7684\u7aef\u53e3\u8f6c\u53d1\u529f\u80fd\u5c06\u672c\u5730\u7aef\u53e3\u8f6c\u53d1\u5230\u8fdc\u7aef\u670d\u52a1\u7684\u76ee\u6807\u7aef\u53e3\uff0c\u5728\u672c\u5730\u901a\u8fc7 lcoalhost:[\u672c\u5730\u7aef\u53e3] \u7684\u65b9\u5f0f\u6765\u8bbf\u95ee\u670d\u52a1 Tip \u521b\u5efa\u51fa\u6765\u7684\u526f\u672c\u5bf9\u7528\u6237\u900f\u660e\uff0c\u4e0d\u4f1a\u663e\u793a\u5728 VS Code \u548c Jetbrains \u7684\u5de5\u4f5c\u8d1f\u8f7d\u5217\u8868\u4e2d \u5982\u4f55\u4f7f\u7528 \u00b6 \u5728 Jetbrains \u548c VS Code \u63d2\u4ef6\u4e0a\uff0c\u53f3\u952e\u70b9\u51fb Start DevMode(duplicate) \u5373\u53ef\u8fdb\u5165 Duplicate DevMode : \u8fdb\u5165 Duplicate DevMode \u4e4b\u540e\u76f8\u5e94\u7684\u5de5\u4f5c\u8d1f\u8f7d\u4f1a\u663e\u793a\u76f8\u5e94\u56fe\u6807\u8868\u660e\u8be5\u5de5\u4f5c\u8d1f\u8f7d\u5904\u4e8e Duplicate DevMode \uff1a \u8fdb\u5165 Duplicate DevMode \u540e\u7684\u5176\u5b83\u64cd\u4f5c\u548c\u9ed8\u8ba4\u7684\u5f00\u53d1\u6a21\u5f0f\u4e00\u6837\u3002 Tip \u548c\u9ed8\u8ba4\u7684\u5f00\u53d1\u65b9\u5f0f\u4e00\u6837\uff0c\u5982\u679c\u9700\u8981\u901a\u8fc7\u672c\u5730\u7aef\u53e3\u8bbf\u95ee\u5f00\u53d1\u4e2d\u7684\u670d\u52a1\uff0c\u53f3\u952e\u70b9\u51fb Port Forward \u4f7f\u7528 Nocalhost \u7684\u7aef\u53e3\u8f6c\u53d1\u529f\u80fd\u5373\u53ef \u5e38\u95ee\u95ee\u9898 \u00b6 \u65e2\u7136\u4e0d\u80fd\u63a5\u6536\u5176\u4ed6\u670d\u52a1\u7684\u6d41\u91cf\uff0c\u90a3\u548c\u5728\u672c\u5730\u76f4\u63a5\u628a\u7a0b\u5e8f\u8dd1\u8d77\u6765\u5f00\u53d1\u6709\u4ec0\u4e48\u533a\u522b? \u00b6 \u5728\u672c\u5730\u76f4\u63a5\u8fd0\u884c\u7a0b\u5e8f\u53ef\u80fd\u9700\u8981\u5bfc\u5165\u5f88\u591a\u73af\u5883\u53d8\u91cf\uff0c\u5982\u679c\u5de5\u4f5c\u8d1f\u8f7d\u4f9d\u8d56\u96c6\u7fa4\u4e2d\u7684\u5176\u4ed6 k8s \u8d44\u6e90\uff0c\u5982(configmap/secrets)\uff0c\u5904\u7406\u8d77\u6765\u5c31\u4f1a\u66f4\u9ebb\u70e6\u3002 \u672c\u5730\u7a0b\u5e8f\u56e0\u4e3a\u548c\u96c6\u7fa4\u5904\u4e8e\u4e0d\u540c\u7684\u7f51\u7edc\u4e4b\u4e0b\uff0c\u8bbf\u95ee\u96c6\u7fa4\u4e2d\u7684\u5176\u5b83\u670d\u52a1(\u5982 mysql, redis \u7b49)\uff0c\u4e5f\u9700\u8981\u7279\u6b8a\u7684\u914d\u7f6e\uff0c\u800c Duplicate Mode \u521b\u5efa\u51fa\u6765\u7684\u526f\u672c\u867d\u7136\u4e0d\u80fd\u88ab\u5176\u5b83\u670d\u52a1\u8bbf\u95ee\uff0c\u4f46\u662f\u662f\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u96c6\u7fa4\u4e2d\u7684\u5176\u5b83\u670d\u52a1\u7684\u3002 \u53e6\u5916\uff0c\u5728\u5bb9\u5668\u4e2d\u5f00\u53d1\u53ef\u4ee5\u66f4\u597d\u5730\u4e0e\u751f\u4ea7\u73af\u5883\u4fdd\u6301\u4e00\u81f4\u6027\u3002 \u526f\u672c\u6570\u91cf\u6709\u9650\u5236\u5417? \u00b6 Nocalhost \u6ca1\u6709\u5bf9\u526f\u672c\u6570\u91cf\u8fdb\u884c\u9650\u5236\uff0c\u7406\u8bba\u4e0a\u4efb\u610f\u6570\u91cf\u7684\u8bbe\u5907\u90fd\u53ef\u4ee5\u4f7f\u7528 Duplicate Mode \u521b\u5efa\u5c5e\u4e8e\u81ea\u5df1\u7684\u526f\u672c\u8fdb\u884c\u5f00\u53d1\uff0c\u5b9e\u9645\u573a\u666f\u53ef\u80fd\u53d7\u9650\u4e8e\u96c6\u7fa4\u8d44\u6e90\u7b49\u3002","title":"DevMode(Duplicate)"},{"location":"guides/develop/service-dup/#devmode","text":"Nocalhost \u9ed8\u8ba4\u7684\u5f00\u53d1\u6a21\u5f0f\u662f\u66ff\u6362\u955c\u50cf( Replace DevMode )\u7684\u65b9\u5f0f\uff0c\u5f53\u5bf9\u67d0\u4e2a\u5de5\u4f5c\u8d1f\u8f7d\u8fdb\u884c\u5f00\u53d1\u7684\u65f6\u5019\uff0c\u4f1a\u628a\u539f\u6709\u7684\u5de5\u4f5c\u8d1f\u8f7d\u7684\u5bb9\u5668\u955c\u50cf\u66ff\u6362\u6210\u5f00\u53d1\u955c\u50cf\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4f7f\u7528\u76f4\u63a5\u66ff\u6362\u955c\u50cf\u7684\u65b9\u5f0f\u53ef\u4ee5\u5f88\u597d\u5730\u4fdd\u6301\u539f\u6709\u7684\u670d\u52a1\u95f4\u8c03\u7528\u5173\u7cfb\uff0c\u8ba9\u96c6\u7fa4\u4e2d\u5176\u5b83\u670d\u52a1\u7684\u6d41\u91cf\u6253\u5230\u6b63\u5728\u5f00\u53d1\u7684\u670d\u52a1\u4e0a\uff0c\u4f46\u662f\u4e5f\u5b58\u5728\u4ee5\u4e0b\u4e0d\u8db3: \u5bb9\u6613\u7834\u574f\u539f\u6709\u7684\u73af\u5883\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5f00\u53d1\u4e2d\u7684\u670d\u52a1\u51fa\u73b0\u95ee\u9898\u800c\u5bfc\u81f4\u6574\u4e2a\u73af\u5883\u51fa\u95ee\u9898 \u5bb9\u6613\u5f71\u54cd\u5176\u5b83\u56e2\u961f\u6210\u5458\u5bf9\u73af\u5883\u7684\u6b63\u5e38\u4f7f\u7528\uff0c\u5176\u5b83\u56e2\u961f\u6210\u5458\u53ef\u80fd\u53ea\u60f3\u8bbf\u95ee\u6b63\u5e38\u7684\u7684\u73af\u5883\uff0c\u800c\u4e0d\u662f\u5904\u4e8e\u5f00\u53d1\u4e2d\u7684\u73af\u5883 \u591a\u4e2a\u56e2\u961f\u6210\u5458\u65e0\u6cd5\u5bf9\u540c\u4e00\u5957\u73af\u5883\u7684\u540c\u4e00\u4e2a\u670d\u52a1\u8fdb\u884c\u5f00\u53d1 \u4e3a\u4e86\u89e3\u51b3\u4ee5\u4e0a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Duplicate DevMode \u8fdb\u884c\u5f00\u53d1\u3002","title":"\u4e3a\u4ec0\u4e48\u8981\u91cd\u590d DevMode"},{"location":"guides/develop/service-dup/#_1","text":"\u5728 Duplicate DevMode \u4e2d\uff0cNocalhost \u4e0d\u4f1a\u5bf9\u539f\u6709\u539f\u6709\u5de5\u4f5c\u8d1f\u8f7d\u8fdb\u884c\u4efb\u4f55\u4fee\u6539\uff0c\u800c\u662f\u521b\u5efa\u4e00\u4e2a\u539f\u6709\u5de5\u4f5c\u8d1f\u8f7d\u7684\u526f\u672c\uff0c\u5728\u8be5\u526f\u672c\u4e0a\u8fdb\u884c\u5f00\u53d1\u3002\u5728\u4e0d\u540c\u8bbe\u5907\u4e0a\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528 Duplicate DevMode \u521b\u5efa\u5de5\u4f5c\u8d1f\u8f7d\u7684\u526f\u672c\u8fdb\u884c\u5f00\u53d1\uff0c\u526f\u672c\u4e0a\u4f1a\u88ab Nocalhost \u6253\u4e0a\u8bbe\u5907\u7684 ID (\u8bbe\u5907 ID \u7531 Nocalhost \u81ea\u52a8\u751f\u6210\uff0c\u5bf9\u7528\u6237\u900f\u660e\uff0c\u5e76\u4fdd\u8bc1\u4e0d\u540c\u8bbe\u5907\u4e0a\u7684\u8bbe\u5907 ID \u4e0d\u4f1a\u91cd\u590d)\u4ee5\u6807\u8bc6\u8be5\u526f\u672c\u662f\u54ea\u4e2a\u8bbe\u5907\u5728\u8fdb\u884c\u5f00\u53d1\uff0c\u5404\u4e2a\u526f\u672c\u4e4b\u95f4\u4e92\u4e0d\u5f71\u54cd\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u526f\u672c\u53ca\u5176\u7ba1\u7406\u7684 Pod \u4f1a\u4f7f\u7528\u548c\u539f\u6709\u5de5\u4f5c\u8d1f\u8f7d\u4e0d\u4e00\u6837\u7684 labels\uff0c\u6240\u4ee5\u5b83\u4e0d\u4f1a\u63a5\u6536\u4efb\u4f55\u8bbf\u95ee\u539f\u6709\u5de5\u4f5c\u8d1f\u8f7d\u7684\u6d41\u91cf\u3002\u8fd9\u4e48\u505a\u7684\u539f\u56e0\u662f\uff0c\u548c Replace DevMode \u4e0d\u540c\uff0c Duplicate DevMode \u662f\u5141\u8bb8\u5728\u591a\u53f0\u8bbe\u5907\u4e0a\u540c\u65f6\u8fdb\u5165\u5f00\u53d1\u6a21\u5f0f\u7684\uff0c\u5982\u679c\u526f\u672c\u548c\u539f\u6709\u5de5\u4f5c\u8d1f\u8f7d\u4e00\u6837\u90fd\u63a5\u6536\u6765\u81ea\u7ebf\u4e0a\u6d41\u91cf\u7684\u8bdd\uff0c\u6211\u4eec\u65e0\u6cd5\u77e5\u9053\u5f53\u524d\u8bbf\u95ee\u7684\u73af\u5883\u4f7f\u7528\u7684\u54ea\u4e2a\u8bbe\u5907\u4e0a\u6b63\u5728\u5f00\u53d1\u7684\u670d\u52a1\uff0c\u4ece\u800c\u4f1a\u5bfc\u81f4\u8bbf\u95ee\u73af\u5883\u7684\u7ed3\u679c\u53d8\u5f97\u4e0d\u53ef\u9884\u671f\u3002 Caution \u5982\u679c\u5fae\u670d\u52a1\u5e94\u7528\u4f7f\u7528\u4e86\u7b2c\u4e09\u65b9\u7684\u670d\u52a1\u53d1\u73b0\u7ec4\u4ef6(\u5982 NACOS)\uff0c\u800c\u4e0d\u662f\u4f7f\u7528 K8s \u7684 Service \u6765\u8fdb\u884c\u670d\u52a1\u53d1\u73b0\uff0c\u90a3\u4e48\u4ecd\u7136\u53ef\u80fd\u51fa\u73b0\u96c6\u7fa4\u4e2d\u5176\u5b83\u670d\u52a1\u8bbf\u95ee\u5230 Duplicate Mode \u521b\u5efa\u7684\u526f\u672c\uff0c\u4ece\u800c\u5bfc\u81f4\u8bbf\u95ee\u73af\u5883\u7684\u7ed3\u679c\u53d8\u5f97\u4e0d\u53ef\u9884\u671f\u3002\u8fd9\u79cd\u573a\u666f\u9700\u8981\u81ea\u884c\u63a7\u5236\u542f\u52a8\u7684\u670d\u52a1\u662f\u5426\u9700\u8981\u6ce8\u518c\u5230\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3 Duplicate Mode \u548c Replace Mode \u53ef\u4ee5\u5728\u4e0d\u540c\u8bbe\u5907\u4e0a\u540c\u65f6\u4f7f\u7528\uff0c\u4f46\u540c\u4e00\u8bbe\u5907\u4e0a\uff0c\u4ec5\u80fd\u9009\u62e9\u5176\u4e2d\u4e00\u79cd\u8fdb\u5165\u5f00\u53d1\u3002 \u5f53\u6211\u4eec\u9700\u8981\u8bbf\u95ee\u526f\u672c\u4e2d\u6b63\u5728\u5f00\u53d1\u7684\u670d\u52a1\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 Nocalhost \u7684\u7aef\u53e3\u8f6c\u53d1\u529f\u80fd\u5c06\u672c\u5730\u7aef\u53e3\u8f6c\u53d1\u5230\u8fdc\u7aef\u670d\u52a1\u7684\u76ee\u6807\u7aef\u53e3\uff0c\u5728\u672c\u5730\u901a\u8fc7 lcoalhost:[\u672c\u5730\u7aef\u53e3] \u7684\u65b9\u5f0f\u6765\u8bbf\u95ee\u670d\u52a1 Tip \u521b\u5efa\u51fa\u6765\u7684\u526f\u672c\u5bf9\u7528\u6237\u900f\u660e\uff0c\u4e0d\u4f1a\u663e\u793a\u5728 VS Code \u548c Jetbrains \u7684\u5de5\u4f5c\u8d1f\u8f7d\u5217\u8868\u4e2d","title":"\u600e\u4e48\u8fd0\u884c\u7684"},{"location":"guides/develop/service-dup/#_2","text":"\u5728 Jetbrains \u548c VS Code \u63d2\u4ef6\u4e0a\uff0c\u53f3\u952e\u70b9\u51fb Start DevMode(duplicate) \u5373\u53ef\u8fdb\u5165 Duplicate DevMode : \u8fdb\u5165 Duplicate DevMode \u4e4b\u540e\u76f8\u5e94\u7684\u5de5\u4f5c\u8d1f\u8f7d\u4f1a\u663e\u793a\u76f8\u5e94\u56fe\u6807\u8868\u660e\u8be5\u5de5\u4f5c\u8d1f\u8f7d\u5904\u4e8e Duplicate DevMode \uff1a \u8fdb\u5165 Duplicate DevMode \u540e\u7684\u5176\u5b83\u64cd\u4f5c\u548c\u9ed8\u8ba4\u7684\u5f00\u53d1\u6a21\u5f0f\u4e00\u6837\u3002 Tip \u548c\u9ed8\u8ba4\u7684\u5f00\u53d1\u65b9\u5f0f\u4e00\u6837\uff0c\u5982\u679c\u9700\u8981\u901a\u8fc7\u672c\u5730\u7aef\u53e3\u8bbf\u95ee\u5f00\u53d1\u4e2d\u7684\u670d\u52a1\uff0c\u53f3\u952e\u70b9\u51fb Port Forward \u4f7f\u7528 Nocalhost \u7684\u7aef\u53e3\u8f6c\u53d1\u529f\u80fd\u5373\u53ef","title":"\u5982\u4f55\u4f7f\u7528"},{"location":"guides/develop/service-dup/#_3","text":"","title":"\u5e38\u95ee\u95ee\u9898"},{"location":"guides/develop/service-dup/#_4","text":"\u5728\u672c\u5730\u76f4\u63a5\u8fd0\u884c\u7a0b\u5e8f\u53ef\u80fd\u9700\u8981\u5bfc\u5165\u5f88\u591a\u73af\u5883\u53d8\u91cf\uff0c\u5982\u679c\u5de5\u4f5c\u8d1f\u8f7d\u4f9d\u8d56\u96c6\u7fa4\u4e2d\u7684\u5176\u4ed6 k8s \u8d44\u6e90\uff0c\u5982(configmap/secrets)\uff0c\u5904\u7406\u8d77\u6765\u5c31\u4f1a\u66f4\u9ebb\u70e6\u3002 \u672c\u5730\u7a0b\u5e8f\u56e0\u4e3a\u548c\u96c6\u7fa4\u5904\u4e8e\u4e0d\u540c\u7684\u7f51\u7edc\u4e4b\u4e0b\uff0c\u8bbf\u95ee\u96c6\u7fa4\u4e2d\u7684\u5176\u5b83\u670d\u52a1(\u5982 mysql, redis \u7b49)\uff0c\u4e5f\u9700\u8981\u7279\u6b8a\u7684\u914d\u7f6e\uff0c\u800c Duplicate Mode \u521b\u5efa\u51fa\u6765\u7684\u526f\u672c\u867d\u7136\u4e0d\u80fd\u88ab\u5176\u5b83\u670d\u52a1\u8bbf\u95ee\uff0c\u4f46\u662f\u662f\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u96c6\u7fa4\u4e2d\u7684\u5176\u5b83\u670d\u52a1\u7684\u3002 \u53e6\u5916\uff0c\u5728\u5bb9\u5668\u4e2d\u5f00\u53d1\u53ef\u4ee5\u66f4\u597d\u5730\u4e0e\u751f\u4ea7\u73af\u5883\u4fdd\u6301\u4e00\u81f4\u6027\u3002","title":"\u65e2\u7136\u4e0d\u80fd\u63a5\u6536\u5176\u4ed6\u670d\u52a1\u7684\u6d41\u91cf\uff0c\u90a3\u548c\u5728\u672c\u5730\u76f4\u63a5\u628a\u7a0b\u5e8f\u8dd1\u8d77\u6765\u5f00\u53d1\u6709\u4ec0\u4e48\u533a\u522b?"},{"location":"guides/develop/service-dup/#_5","text":"Nocalhost \u6ca1\u6709\u5bf9\u526f\u672c\u6570\u91cf\u8fdb\u884c\u9650\u5236\uff0c\u7406\u8bba\u4e0a\u4efb\u610f\u6570\u91cf\u7684\u8bbe\u5907\u90fd\u53ef\u4ee5\u4f7f\u7528 Duplicate Mode \u521b\u5efa\u5c5e\u4e8e\u81ea\u5df1\u7684\u526f\u672c\u8fdb\u884c\u5f00\u53d1\uff0c\u5b9e\u9645\u573a\u666f\u53ef\u80fd\u53d7\u9650\u4e8e\u96c6\u7fa4\u8d44\u6e90\u7b49\u3002","title":"\u526f\u672c\u6570\u91cf\u6709\u9650\u5236\u5417?"},{"location":"guides/develop/service-replace-en/","text":"Replace DevMode \u00b6 Nocalhost currently supports two development modes, Replace DevMode and Duplicate DevMode . This section will mainly focus on Replace DevMode . For information about Duplicate DevMode , please see Duplicate DevMode . When entering Replace DevMode , Nocalhost will do the following work on the workload. 1.**Reduce the number of duplicates to 1. The application only needs to be developed in one container. If there are multiple duplicates, we cannot ensure that when accessing the workload by Service , all traffic will be transferred to the duplicate we are developing. Therefore, Nocalhost will firstly reduce the number of duplicates to 1. **2. Replace the container image with a DevImage. Containers for production usually use lightweight images, which only have the basic components for program execution, but lack relevant tools for compiling and building programs (such as JDK). Hence, when developing a workload, Nocalhost will replace the container image with a DevImage that contains complete development tools. 3. Add a sidecar container. To synchronize the local source code to the container, a file synchronization server needs to be run in the container. In order to decouple the file synchronization process from the business process, Nocalhost runs the file synchronization server in a separate sidecar container. This sidecar container mounts the same synchronization directory as the development container. Therefore, the development container can also access the source code synchronized to the sidecar container. 4. Forward a local port to the file synchronization server. The file synchronization server will listen on a port of the container, which cannot be directly accessed from the local. Therefore, Nocalhost will forward a random local port to the port of the container. 5. Initiate the local file synchronization client server. The client server will establish the connection with the file synchronization server through the local random port forwarded in the last step. Then it will initiate file synchronization. 6. Enter the remote terminal. After the container is replaced successfully, Nocalhost will automatically enter the terminal of the remote container. You can run the synchronized source code in the container by this terminal. Note that the development container will not retain the previous work after entering DevMode, so all traffic in the cluster requesting access to that workload will fail. Therefore, you need to run the business process in the development container. Nocalhost will automatically synchronize the local source code to the development container, so you can see that the changes will take effect after compiling and running the code, as shown below.","title":"DevMode(Replace)"},{"location":"guides/develop/service-replace-en/#replace-devmode","text":"Nocalhost currently supports two development modes, Replace DevMode and Duplicate DevMode . This section will mainly focus on Replace DevMode . For information about Duplicate DevMode , please see Duplicate DevMode . When entering Replace DevMode , Nocalhost will do the following work on the workload. 1.**Reduce the number of duplicates to 1. The application only needs to be developed in one container. If there are multiple duplicates, we cannot ensure that when accessing the workload by Service , all traffic will be transferred to the duplicate we are developing. Therefore, Nocalhost will firstly reduce the number of duplicates to 1. **2. Replace the container image with a DevImage. Containers for production usually use lightweight images, which only have the basic components for program execution, but lack relevant tools for compiling and building programs (such as JDK). Hence, when developing a workload, Nocalhost will replace the container image with a DevImage that contains complete development tools. 3. Add a sidecar container. To synchronize the local source code to the container, a file synchronization server needs to be run in the container. In order to decouple the file synchronization process from the business process, Nocalhost runs the file synchronization server in a separate sidecar container. This sidecar container mounts the same synchronization directory as the development container. Therefore, the development container can also access the source code synchronized to the sidecar container. 4. Forward a local port to the file synchronization server. The file synchronization server will listen on a port of the container, which cannot be directly accessed from the local. Therefore, Nocalhost will forward a random local port to the port of the container. 5. Initiate the local file synchronization client server. The client server will establish the connection with the file synchronization server through the local random port forwarded in the last step. Then it will initiate file synchronization. 6. Enter the remote terminal. After the container is replaced successfully, Nocalhost will automatically enter the terminal of the remote container. You can run the synchronized source code in the container by this terminal. Note that the development container will not retain the previous work after entering DevMode, so all traffic in the cluster requesting access to that workload will fail. Therefore, you need to run the business process in the development container. Nocalhost will automatically synchronize the local source code to the development container, so you can see that the changes will take effect after compiling and running the code, as shown below.","title":"Replace DevMode"},{"location":"guides/develop/service-replace/","text":"Replace DevMode \u00b6 Nocalhost \u76ee\u524d\u652f\u6301\u4e24\u79cd\u5f00\u53d1\u6a21\u5f0f\uff0c Replace DevMode \u548c Duplicate DevMode \uff0c\u672c\u8282\u4e3b\u8981\u4ecb\u7ecd Replace DevMode \u7684\u57fa\u672c\u539f\u7406\uff0c\u5173\u4e8e Duplicate DevMode \u7684\u4ecb\u7ecd\uff0c\u8be6\u89c1\uff1a Duplicate DevMode \u3002 \u5728\u8fdb\u5165 Replace DevMode \u65f6\uff0cNocalhost \u4f1a\u5bf9\u5de5\u4f5c\u8d1f\u8f7d\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u5c06\u526f\u672c\u6570\u7f29\u51cf\u4e3a 1\u3002\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u53ea\u9700\u8981\u5728\u4e00\u4e2a\u5bb9\u5668\u91cc\u8fd0\u884c\u6b63\u5728\u5f00\u53d1\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5982\u679c\u5b58\u5728\u591a\u4e2a\u526f\u672c\uff0c\u6211\u4eec\u901a\u8fc7 Service \u8bbf\u95ee\u8be5\u5de5\u4f5c\u8d1f\u8f7d\u65f6\uff0c\u5c31\u65e0\u6cd5\u63a7\u5236\u6d41\u91cf\u53ea\u8bbf\u95ee\u5230\u6211\u4eec\u6b63\u5728\u5f00\u53d1\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u8fd0\u884c\u7684\u90a3\u4e2a\u526f\u672c\uff0c\u6240\u4ee5 Nocalhost \u9700\u8981\u5148\u5c06\u5de5\u4f5c\u8d1f\u8f7d\u7684\u526f\u672c\u6570\u7f29\u51cf\u4e3a 1\u3002 \u66ff\u6362\u5bb9\u5668\u7684\u955c\u50cf\u4e3a\u5f00\u53d1\u955c\u50cf\u3002\u751f\u4ea7\u73af\u5883\u8fd0\u884c\u7684\u5bb9\u5668\u5f80\u5f80\u4f1a\u4f7f\u7528\u5f88\u8f7b\u91cf\u7ea7\u7684\u955c\u50cf\uff0c\u955c\u50cf\u91cc\u4ec5\u5305\u542b\u8fd0\u884c\u4e1a\u52a1\u7a0b\u5e8f\u6240\u5fc5\u987b\u7684\u7ec4\u4ef6\uff0c\u800c\u7f3a\u5c11\u7f16\u8bd1\u6784\u5efa\u4e1a\u52a1\u7a0b\u5e8f\u7684\u76f8\u5173\u5de5\u5177(\u5982 JDK)\uff0c\u6240\u4ee5\u5728\u5bf9\u67d0\u4e2a\u5de5\u4f5c\u8d1f\u8f7d\u8fdb\u884c\u5f00\u53d1\u7684\u65f6\u5019\uff0cNocalhost \u4f1a\u5c06\u5bb9\u5668\u955c\u50cf\u66ff\u6362\u6210\u5305\u542b\u5b8c\u6574\u5f00\u53d1\u5de5\u5177\u7684\u5f00\u53d1\u955c\u50cf\u3002 \u589e\u52a0\u4e00\u4e2a sidecar \u5bb9\u5668\u3002\u4e3a\u4e86\u5c06\u672c\u5730\u7684\u6e90\u4ee3\u7801\u6539\u52a8\u540c\u6b65\u5230\u5bb9\u5668\u4e2d\uff0c\u9700\u8981\u5728\u5bb9\u5668\u91cc\u8fd0\u884c\u4e00\u4e2a\u6587\u4ef6\u540c\u6b65\u670d\u52a1\u5668\u3002\u4e3a\u4e86\u4f7f\u6587\u4ef6\u540c\u6b65\u670d\u52a1\u5668\u8fdb\u7a0b\u548c\u4e1a\u52a1\u8fdb\u7a0b\u89e3\u8026\uff0cNocalhost \u5c06\u6587\u4ef6\u540c\u6b65\u670d\u52a1\u5668\u8fd0\u884c\u5728\u4e00\u4e2a\u72ec\u7acb\u7684 sidecar \u5bb9\u5668\u4e2d\uff0c\u8be5\u5bb9\u5668\u4e0e\u4e1a\u52a1\u5bb9\u5668\u6302\u8f7d\u76f8\u540c\u7684\u540c\u6b65\u76ee\u5f55\uff0c\u56e0\u6b64\uff0c\u540c\u6b65\u5230 sidecar \u5bb9\u5668\u4e2d\u7684\u6e90\u4ee3\u7801\u5728\u4e1a\u52a1\u5bb9\u5668\u4e2d\u4e5f\u53ef\u4ee5\u8bbf\u95ee\u3002 \u8f6c\u53d1\u4e00\u4e2a\u672c\u5730\u7aef\u53e3\u5230\u6587\u4ef6\u540c\u6b65\u670d\u52a1\u5668\u3002\u6587\u4ef6\u540c\u6b65\u670d\u52a1\u5668\u76d1\u542c\u5728\u5bb9\u5668\u91cc\u7684\u67d0\u4e2a\u7aef\u53e3\uff0c\u6211\u4eec\u5728\u672c\u5730\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee\uff0c\u6240\u4ee5 Nocalhost \u4f1a\u628a\u4e00\u4e2a\u672c\u5730\u968f\u673a\u7aef\u53e3\u8f6c\u53d1\u5230\u5bb9\u5668\u91cc\u6587\u4ef6\u540c\u6b65\u670d\u52a1\u5668\u76d1\u542c\u7684\u7aef\u53e3\u3002 \u542f\u52a8\u672c\u5730\u6587\u4ef6\u540c\u6b65\u5ba2\u6237\u7aef\u3002\u6587\u4ef6\u540c\u6b65\u5ba2\u6237\u7aef\u542f\u52a8\u540e\u4f1a\u901a\u8fc7\u4e0a\u4e00\u6b65\u8f6c\u53d1\u7684\u672c\u5730\u968f\u673a\u7aef\u53e3\u548c\u6587\u4ef6\u540c\u6b65\u670d\u52a1\u5668\u5efa\u7acb\u901a\u4fe1\uff0c\u4e4b\u540e\u4fbf\u4f1a\u5f00\u59cb\u8fdb\u884c\u6587\u4ef6\u7684\u540c\u6b65\u3002 \u6253\u5f00\u8fdc\u7a0b\u7ec8\u7aef\u3002\u5728\u5bb9\u5668\u66ff\u6362\u6210\u529f\u4e4b\u540e\uff0cNocalhost \u4f1a\u81ea\u52a8\u6253\u5f00\u4e00\u4e2a\u8fdb\u5165\u5230\u8fdc\u7a0b\u5bb9\u5668\u7684\u7ec8\u7aef\uff0c\u901a\u8fc7\u8be5\u7ec8\u7aef\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u540c\u6b65\u5230\u5bb9\u5668\u91cc\u5230\u6e90\u4ee3\u7801\u76f4\u63a5\u8fd0\u884c\u8d77\u6765\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u8fdb\u5165\u5f00\u53d1\u6a21\u5f0f\u4ee5\u540e\uff0c\u5f00\u53d1\u5bb9\u5668\u5e76\u4e0d\u4f1a\u8fd0\u884c\u539f\u6765\u7684\u4e1a\u52a1\u8fdb\u7a0b\uff0c\u6b64\u65f6\u96c6\u7fa4\u4e2d\u8bbf\u95ee\u8be5\u5de5\u4f5c\u8d1f\u8f7d\u7684\u6d41\u91cf\u90fd\u5c06\u5931\u8d25\uff0c\u6211\u4eec\u9700\u8981\u5728\u5f00\u53d1\u5bb9\u5668\u91cc\u628a\u4e1a\u52a1\u8fdb\u7a0b\u8fd0\u884c\u8d77\u6765\u3002\u7531\u4e8e Nocalhost \u4f1a\u5b9e\u65f6\u5730\u628a\u672c\u5730\u7684\u6e90\u7801\u6539\u52a8\u540c\u6b65\u5230\u5f00\u53d1\u5bb9\u5668\u4e2d\uff0c\u5f53\u6211\u4eec\u5728\u672c\u5730\u6539\u5b8c\u4ee3\u7801\u4e4b\u540e\uff0c\u5728\u5f00\u53d1\u5bb9\u5668\u91cc\u5c06\u4ee3\u7801\u7f16\u8bd1\u6784\u5efa\u540e\u8fd0\u884c\u8d77\u6765\uff0c\u96c6\u7fa4\u4e2d\u4fbf\u80fd\u770b\u5230\u6539\u52a8\u5df2\u7ecf\u751f\u6548\uff0c\u5982\u4e0b\u56fe\uff1a","title":"DevMode(Replace)"},{"location":"guides/develop/service-replace/#replace-devmode","text":"Nocalhost \u76ee\u524d\u652f\u6301\u4e24\u79cd\u5f00\u53d1\u6a21\u5f0f\uff0c Replace DevMode \u548c Duplicate DevMode \uff0c\u672c\u8282\u4e3b\u8981\u4ecb\u7ecd Replace DevMode \u7684\u57fa\u672c\u539f\u7406\uff0c\u5173\u4e8e Duplicate DevMode \u7684\u4ecb\u7ecd\uff0c\u8be6\u89c1\uff1a Duplicate DevMode \u3002 \u5728\u8fdb\u5165 Replace DevMode \u65f6\uff0cNocalhost \u4f1a\u5bf9\u5de5\u4f5c\u8d1f\u8f7d\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u5c06\u526f\u672c\u6570\u7f29\u51cf\u4e3a 1\u3002\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u53ea\u9700\u8981\u5728\u4e00\u4e2a\u5bb9\u5668\u91cc\u8fd0\u884c\u6b63\u5728\u5f00\u53d1\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5982\u679c\u5b58\u5728\u591a\u4e2a\u526f\u672c\uff0c\u6211\u4eec\u901a\u8fc7 Service \u8bbf\u95ee\u8be5\u5de5\u4f5c\u8d1f\u8f7d\u65f6\uff0c\u5c31\u65e0\u6cd5\u63a7\u5236\u6d41\u91cf\u53ea\u8bbf\u95ee\u5230\u6211\u4eec\u6b63\u5728\u5f00\u53d1\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u8fd0\u884c\u7684\u90a3\u4e2a\u526f\u672c\uff0c\u6240\u4ee5 Nocalhost \u9700\u8981\u5148\u5c06\u5de5\u4f5c\u8d1f\u8f7d\u7684\u526f\u672c\u6570\u7f29\u51cf\u4e3a 1\u3002 \u66ff\u6362\u5bb9\u5668\u7684\u955c\u50cf\u4e3a\u5f00\u53d1\u955c\u50cf\u3002\u751f\u4ea7\u73af\u5883\u8fd0\u884c\u7684\u5bb9\u5668\u5f80\u5f80\u4f1a\u4f7f\u7528\u5f88\u8f7b\u91cf\u7ea7\u7684\u955c\u50cf\uff0c\u955c\u50cf\u91cc\u4ec5\u5305\u542b\u8fd0\u884c\u4e1a\u52a1\u7a0b\u5e8f\u6240\u5fc5\u987b\u7684\u7ec4\u4ef6\uff0c\u800c\u7f3a\u5c11\u7f16\u8bd1\u6784\u5efa\u4e1a\u52a1\u7a0b\u5e8f\u7684\u76f8\u5173\u5de5\u5177(\u5982 JDK)\uff0c\u6240\u4ee5\u5728\u5bf9\u67d0\u4e2a\u5de5\u4f5c\u8d1f\u8f7d\u8fdb\u884c\u5f00\u53d1\u7684\u65f6\u5019\uff0cNocalhost \u4f1a\u5c06\u5bb9\u5668\u955c\u50cf\u66ff\u6362\u6210\u5305\u542b\u5b8c\u6574\u5f00\u53d1\u5de5\u5177\u7684\u5f00\u53d1\u955c\u50cf\u3002 \u589e\u52a0\u4e00\u4e2a sidecar \u5bb9\u5668\u3002\u4e3a\u4e86\u5c06\u672c\u5730\u7684\u6e90\u4ee3\u7801\u6539\u52a8\u540c\u6b65\u5230\u5bb9\u5668\u4e2d\uff0c\u9700\u8981\u5728\u5bb9\u5668\u91cc\u8fd0\u884c\u4e00\u4e2a\u6587\u4ef6\u540c\u6b65\u670d\u52a1\u5668\u3002\u4e3a\u4e86\u4f7f\u6587\u4ef6\u540c\u6b65\u670d\u52a1\u5668\u8fdb\u7a0b\u548c\u4e1a\u52a1\u8fdb\u7a0b\u89e3\u8026\uff0cNocalhost \u5c06\u6587\u4ef6\u540c\u6b65\u670d\u52a1\u5668\u8fd0\u884c\u5728\u4e00\u4e2a\u72ec\u7acb\u7684 sidecar \u5bb9\u5668\u4e2d\uff0c\u8be5\u5bb9\u5668\u4e0e\u4e1a\u52a1\u5bb9\u5668\u6302\u8f7d\u76f8\u540c\u7684\u540c\u6b65\u76ee\u5f55\uff0c\u56e0\u6b64\uff0c\u540c\u6b65\u5230 sidecar \u5bb9\u5668\u4e2d\u7684\u6e90\u4ee3\u7801\u5728\u4e1a\u52a1\u5bb9\u5668\u4e2d\u4e5f\u53ef\u4ee5\u8bbf\u95ee\u3002 \u8f6c\u53d1\u4e00\u4e2a\u672c\u5730\u7aef\u53e3\u5230\u6587\u4ef6\u540c\u6b65\u670d\u52a1\u5668\u3002\u6587\u4ef6\u540c\u6b65\u670d\u52a1\u5668\u76d1\u542c\u5728\u5bb9\u5668\u91cc\u7684\u67d0\u4e2a\u7aef\u53e3\uff0c\u6211\u4eec\u5728\u672c\u5730\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee\uff0c\u6240\u4ee5 Nocalhost \u4f1a\u628a\u4e00\u4e2a\u672c\u5730\u968f\u673a\u7aef\u53e3\u8f6c\u53d1\u5230\u5bb9\u5668\u91cc\u6587\u4ef6\u540c\u6b65\u670d\u52a1\u5668\u76d1\u542c\u7684\u7aef\u53e3\u3002 \u542f\u52a8\u672c\u5730\u6587\u4ef6\u540c\u6b65\u5ba2\u6237\u7aef\u3002\u6587\u4ef6\u540c\u6b65\u5ba2\u6237\u7aef\u542f\u52a8\u540e\u4f1a\u901a\u8fc7\u4e0a\u4e00\u6b65\u8f6c\u53d1\u7684\u672c\u5730\u968f\u673a\u7aef\u53e3\u548c\u6587\u4ef6\u540c\u6b65\u670d\u52a1\u5668\u5efa\u7acb\u901a\u4fe1\uff0c\u4e4b\u540e\u4fbf\u4f1a\u5f00\u59cb\u8fdb\u884c\u6587\u4ef6\u7684\u540c\u6b65\u3002 \u6253\u5f00\u8fdc\u7a0b\u7ec8\u7aef\u3002\u5728\u5bb9\u5668\u66ff\u6362\u6210\u529f\u4e4b\u540e\uff0cNocalhost \u4f1a\u81ea\u52a8\u6253\u5f00\u4e00\u4e2a\u8fdb\u5165\u5230\u8fdc\u7a0b\u5bb9\u5668\u7684\u7ec8\u7aef\uff0c\u901a\u8fc7\u8be5\u7ec8\u7aef\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u540c\u6b65\u5230\u5bb9\u5668\u91cc\u5230\u6e90\u4ee3\u7801\u76f4\u63a5\u8fd0\u884c\u8d77\u6765\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u8fdb\u5165\u5f00\u53d1\u6a21\u5f0f\u4ee5\u540e\uff0c\u5f00\u53d1\u5bb9\u5668\u5e76\u4e0d\u4f1a\u8fd0\u884c\u539f\u6765\u7684\u4e1a\u52a1\u8fdb\u7a0b\uff0c\u6b64\u65f6\u96c6\u7fa4\u4e2d\u8bbf\u95ee\u8be5\u5de5\u4f5c\u8d1f\u8f7d\u7684\u6d41\u91cf\u90fd\u5c06\u5931\u8d25\uff0c\u6211\u4eec\u9700\u8981\u5728\u5f00\u53d1\u5bb9\u5668\u91cc\u628a\u4e1a\u52a1\u8fdb\u7a0b\u8fd0\u884c\u8d77\u6765\u3002\u7531\u4e8e Nocalhost \u4f1a\u5b9e\u65f6\u5730\u628a\u672c\u5730\u7684\u6e90\u7801\u6539\u52a8\u540c\u6b65\u5230\u5f00\u53d1\u5bb9\u5668\u4e2d\uff0c\u5f53\u6211\u4eec\u5728\u672c\u5730\u6539\u5b8c\u4ee3\u7801\u4e4b\u540e\uff0c\u5728\u5f00\u53d1\u5bb9\u5668\u91cc\u5c06\u4ee3\u7801\u7f16\u8bd1\u6784\u5efa\u540e\u8fd0\u884c\u8d77\u6765\uff0c\u96c6\u7fa4\u4e2d\u4fbf\u80fd\u770b\u5230\u6539\u52a8\u5df2\u7ecf\u751f\u6548\uff0c\u5982\u4e0b\u56fe\uff1a","title":"Replace DevMode"},{"location":"guides/develop/service-vpn/","text":"VPN \u4ee3\u7406\u6a21\u5f0f \u00b6 Nocalhost \u5df2\u7ecf\u652f\u6301 VPN \u529f\u80fd\uff0c\u5982\u679c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4ee5\u7b80\u5355\u7684\u65b9\u5f0f\u542f\u52a8\u5e76\u4e14\u5bf9 K8S \u8d44\u6e90\uff08\u4f8b\u5982 PVC\uff0cSecret\uff0cCM \u7b49\uff09\u7684\u4f9d\u8d56\u7a0b\u5ea6\u8f83\u5c0f\u3002\u90a3\u4e48\uff0c\u4f7f\u7528\u6d41\u91cf\u4ee3\u7406\u6a21\u5f0f\u8fdb\u5165\u5f00\u53d1\u6a21\u5f0f\u975e\u5e38\u9002\u5408\u3002 \u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0cNocalhost \u5c06\u4e3a\u60a8\u63d0\u4f9b\u672c\u5730 K8S \u7f51\u7edc\u73af\u5883\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 K8S DNS \u8bbf\u95ee K8S \u670d\u52a1\uff08\u4f8b\u5982\u76f4\u63a5\u901a\u8fc7 SVC \u540d\u79f0\u76f4\u63a5\u8bbf\u95ee K8S \u670d\u52a1\uff09\uff0cPOD IP\uff0cSVC IP \u7b49\u3002 \u540c\u65f6\uff0cNocalhost \u5c06\u62e6\u622a\u6307\u5b9a\u670d\u52a1\u7684\u6240\u6709\u5165\u7ad9\u6d41\u91cf\uff0c\u5e76\u5c06\u5176\u8f6c\u53d1\u5230\u672c\u5730\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u5728\u672c\u5730\u542f\u52a8\u4e1a\u52a1\u4ee3\u7801\u8fdb\u884c\u5f00\u53d1\u548c\u8c03\u8bd5\u3002 \u7279\u5f81 \u00b6 \u4f7f\u7528 K8S DNS \u8bbf\u95ee\u672c\u5730\u8ba1\u7b97\u673a\u4e0a\u7684\u8fdc\u7a0b\u670d\u52a1\u3002 \u62e6\u622a\u7279\u6b8a\u670d\u52a1\u7684\u6240\u6709\u5165\u53e3\u6d41\u91cf\uff0c\u7136\u540e\u5c06\u5176\u8f6c\u53d1\u5230\u672c\u5730\u670d\u52a1\u3002 \u652f\u6301\u591a\u4e2a\u534f\u8bae\uff0c\u4f8b\u5982 TCP\uff0cUDP\uff0cICMP \u7b49\u3002 \u652f\u6301\u591a\u4e2a\u5e73\u53f0\uff0c\u4f8b\u5982 Windows\uff0cMacOS\uff0cLinux \u7b49\u3002 \u5efa\u7b51\u5b66 \u00b6 \u50cf\u4e0b\u9762\u7684\u56fe\u7247\u4e00\u6837\uff0c\u5728\u540c\u4e00\u96c6\u7fa4\u548c\u540d\u79f0\u7a7a\u95f4 \u5f00\u53d1\u4eba\u5458 1 \u62e6\u622a\u670d\u52a1 3\u3002 \u5f00\u53d1\u4eba\u5458 2 \u62e6\u622a\u670d\u52a1 4\u3002 \u670d\u52a1 3 \u6240\u6709\u5165\u7ad9\u6d41\u91cf\u5c06\u8f6c\u53d1\u7ed9\u5f00\u53d1\u4eba\u5458 1 Thought Pod Acrivermanager\u3002 \u670d\u52a1 4 \u6240\u6709\u5165\u7ad9\u6d41\u91cf\u5c06\u8f6c\u53d1\u7ed9\u5f00\u53d1\u4eba\u5458 2 Thought Pod Acrivermanager\u3002 \u5f00\u53d1\u4eba\u5458 1 \u53ef\u4ee5\u8bbf\u95ee\u7fa4\u96c6\u53e6\u4e00\u4e2a\u670d\u52a1\u601d\u60f3 pod \u6d41\u52a8\u7ba1\u7406\u5668\u3002 \u5f00\u53d1\u4eba\u5458 2 \u53ef\u4ee5\u8bbf\u95ee\u7fa4\u96c6\u53e6\u4e00\u4e2a\u670d\u52a1\u601d\u60f3 pod \u6d41\u52a8\u7ba1\u7406\u5668\u3002 \u5f00\u53d1\u4eba\u5458 1 \u548c\u5f00\u53d1\u4eba\u5458 2 \u53ef\u4ee5\u901a\u8fc7\u5185\u90e8 IP\uff08 Magic \uff09\u76f8\u4e92\u8bbf\u95ee\u3002 \u5982\u4f55\u4f7f\u7528\u5b83 \u00b6 \u8f93\u5165 VPN \u4ee3\u7406\u6a21\u5f0f \u00b6 \u5728\u7a97\u6237\u4e0a\uff0c\u60a8\u5c06\u770b\u5230\u4e00\u4e2a\u5e26\u6709\u5168\u5c4f\u7684\u63d0\u793a\uff0c\u8bf7\u8bb0\u4f4f\u9009\u62e9\u662f \u5728 Linux/MacOS \u4e0a\uff0c\u60a8\u9700\u8981\u8f93\u5165 sudo \u5bc6\u7801\u4ee5\u5141\u8bb8 NHCTL \u521b\u5efa\u865a\u62df\u7f51\u7edc\u8bbe\u5907 \u6f14\u793a \u00b6","title":"VPN proxy"},{"location":"guides/develop/service-vpn/#vpn","text":"Nocalhost \u5df2\u7ecf\u652f\u6301 VPN \u529f\u80fd\uff0c\u5982\u679c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4ee5\u7b80\u5355\u7684\u65b9\u5f0f\u542f\u52a8\u5e76\u4e14\u5bf9 K8S \u8d44\u6e90\uff08\u4f8b\u5982 PVC\uff0cSecret\uff0cCM \u7b49\uff09\u7684\u4f9d\u8d56\u7a0b\u5ea6\u8f83\u5c0f\u3002\u90a3\u4e48\uff0c\u4f7f\u7528\u6d41\u91cf\u4ee3\u7406\u6a21\u5f0f\u8fdb\u5165\u5f00\u53d1\u6a21\u5f0f\u975e\u5e38\u9002\u5408\u3002 \u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0cNocalhost \u5c06\u4e3a\u60a8\u63d0\u4f9b\u672c\u5730 K8S \u7f51\u7edc\u73af\u5883\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 K8S DNS \u8bbf\u95ee K8S \u670d\u52a1\uff08\u4f8b\u5982\u76f4\u63a5\u901a\u8fc7 SVC \u540d\u79f0\u76f4\u63a5\u8bbf\u95ee K8S \u670d\u52a1\uff09\uff0cPOD IP\uff0cSVC IP \u7b49\u3002 \u540c\u65f6\uff0cNocalhost \u5c06\u62e6\u622a\u6307\u5b9a\u670d\u52a1\u7684\u6240\u6709\u5165\u7ad9\u6d41\u91cf\uff0c\u5e76\u5c06\u5176\u8f6c\u53d1\u5230\u672c\u5730\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u5728\u672c\u5730\u542f\u52a8\u4e1a\u52a1\u4ee3\u7801\u8fdb\u884c\u5f00\u53d1\u548c\u8c03\u8bd5\u3002","title":"VPN \u4ee3\u7406\u6a21\u5f0f"},{"location":"guides/develop/service-vpn/#_1","text":"\u4f7f\u7528 K8S DNS \u8bbf\u95ee\u672c\u5730\u8ba1\u7b97\u673a\u4e0a\u7684\u8fdc\u7a0b\u670d\u52a1\u3002 \u62e6\u622a\u7279\u6b8a\u670d\u52a1\u7684\u6240\u6709\u5165\u53e3\u6d41\u91cf\uff0c\u7136\u540e\u5c06\u5176\u8f6c\u53d1\u5230\u672c\u5730\u670d\u52a1\u3002 \u652f\u6301\u591a\u4e2a\u534f\u8bae\uff0c\u4f8b\u5982 TCP\uff0cUDP\uff0cICMP \u7b49\u3002 \u652f\u6301\u591a\u4e2a\u5e73\u53f0\uff0c\u4f8b\u5982 Windows\uff0cMacOS\uff0cLinux \u7b49\u3002","title":"\u7279\u5f81"},{"location":"guides/develop/service-vpn/#_2","text":"\u50cf\u4e0b\u9762\u7684\u56fe\u7247\u4e00\u6837\uff0c\u5728\u540c\u4e00\u96c6\u7fa4\u548c\u540d\u79f0\u7a7a\u95f4 \u5f00\u53d1\u4eba\u5458 1 \u62e6\u622a\u670d\u52a1 3\u3002 \u5f00\u53d1\u4eba\u5458 2 \u62e6\u622a\u670d\u52a1 4\u3002 \u670d\u52a1 3 \u6240\u6709\u5165\u7ad9\u6d41\u91cf\u5c06\u8f6c\u53d1\u7ed9\u5f00\u53d1\u4eba\u5458 1 Thought Pod Acrivermanager\u3002 \u670d\u52a1 4 \u6240\u6709\u5165\u7ad9\u6d41\u91cf\u5c06\u8f6c\u53d1\u7ed9\u5f00\u53d1\u4eba\u5458 2 Thought Pod Acrivermanager\u3002 \u5f00\u53d1\u4eba\u5458 1 \u53ef\u4ee5\u8bbf\u95ee\u7fa4\u96c6\u53e6\u4e00\u4e2a\u670d\u52a1\u601d\u60f3 pod \u6d41\u52a8\u7ba1\u7406\u5668\u3002 \u5f00\u53d1\u4eba\u5458 2 \u53ef\u4ee5\u8bbf\u95ee\u7fa4\u96c6\u53e6\u4e00\u4e2a\u670d\u52a1\u601d\u60f3 pod \u6d41\u52a8\u7ba1\u7406\u5668\u3002 \u5f00\u53d1\u4eba\u5458 1 \u548c\u5f00\u53d1\u4eba\u5458 2 \u53ef\u4ee5\u901a\u8fc7\u5185\u90e8 IP\uff08 Magic \uff09\u76f8\u4e92\u8bbf\u95ee\u3002","title":"\u5efa\u7b51\u5b66"},{"location":"guides/develop/service-vpn/#_3","text":"","title":"\u5982\u4f55\u4f7f\u7528\u5b83"},{"location":"guides/develop/service-vpn/#vpn_1","text":"\u5728\u7a97\u6237\u4e0a\uff0c\u60a8\u5c06\u770b\u5230\u4e00\u4e2a\u5e26\u6709\u5168\u5c4f\u7684\u63d0\u793a\uff0c\u8bf7\u8bb0\u4f4f\u9009\u62e9\u662f \u5728 Linux/MacOS \u4e0a\uff0c\u60a8\u9700\u8981\u8f93\u5165 sudo \u5bc6\u7801\u4ee5\u5141\u8bb8 NHCTL \u521b\u5efa\u865a\u62df\u7f51\u7edc\u8bbe\u5907","title":"\u8f93\u5165 VPN \u4ee3\u7406\u6a21\u5f0f"},{"location":"guides/develop/service-vpn/#_4","text":"","title":"\u6f14\u793a"},{"location":"guides/develop/service/","text":"Nocalhost \u7684\u5f00\u53d1 \u00b6 Nocalhost \u5141\u8bb8\u60a8\u76f4\u63a5\u5728 Kubernetes \u7fa4\u96c6\u5185\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u3002 \u4f7f\u7528\u7fa4\u96c6\u68c0\u67e5\u5458 \u00b6 Nocalhost \u5efa\u7b51\u7269\u7fa4\u96c6\u68c0\u67e5\u5458\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u7fa4\u96c6\u68c0\u67e5\u5668\u5728 Kubernetes \u7fa4\u96c6\u4e2d\u6d4f\u89c8\u8d44\u6e90\uff0c\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u5e76\u9009\u62e9\u8981\u5f00\u53d1\u548c\u8c03\u8bd5\u7684\u5de5\u4f5c\u8d1f\u8f7d\u3002 \u8d44\u6e90\u72b6\u6001 \u00b6 Nocalhost \u4f7f\u7528\u4ee5\u4e0b\u56fe\u6807\u6765\u63cf\u8ff0\u96c6\u7fa4\u68c0\u67e5\u5458\u4e2d\u4e0d\u540c Kubernetes \u8d44\u6e90\u7684\u72b6\u6001\u3002 Resource Status Icon Description Cluster Active \u8fde\u63a5\u5230\u7fa4\u96c6 Inactive \u65e0\u6cd5\u8fde\u63a5\u5230\u7fa4\u96c6 DevSpace Normal \u666e\u901a\u7684DevSpace/Namespace Read Only \u53ef\u8bfb\u7684DevSpace/Namespace\uff0c\u65e0\u6cd5\u64cd\u4f5c Application Active \u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u64cd\u4f5c Inactive \u5e94\u7528\u7a0b\u5e8f\u4e0d\u6d3b\u52a8\uff0c\u65e0\u6cd5\u64cd\u4f5c Loading \u5b89\u88c5\u6216\u5378\u8f7d Development Mode Start DevMode \u5de5\u4f5c\u8d1f\u8f7d\u5728Devmode\u4e2d End DevMode \u7ed3\u675fDevMode Others \u5176\u4ed6\u542f\u7528\u4e86DevMode DevMode and Port-Forwarding \u5728\u542f\u7528DevMode\u548cport-forwarding\u4e2d DevMode and Port-Forwarding, enabled by others \u5176\u4ed6\u5c06\u5de5\u4f5c\u8d1f\u8f7d\u542f\u7528\u5230DevMode\u548cport-forwarding Nocalhost Configs Normal \u6b64\u5de5\u4f5c\u8d1f\u8f7d\u5177\u6709Nocalhost\u914d\u7f6e Warning Nocalhost\u914d\u7f6e\u4e3a\u7a7a Workload Status Not Ready \u6b64\u5de5\u4f5c\u8d1f\u8f7d\u8fd8\u6ca1\u6709\u51c6\u5907\u597d\uff0c\u4f8b\u5982\u90e8\u7f72 Running \u8fd9\u4e2a\u5de5\u4f5c\u8d1f\u8f7d\u6b63\u5728\u8fd0\u884c Failed \u6b64\u5de5\u4f5c\u8d1f\u8f7d\u672a\u80fd\u8fd0\u884c Unknown \u6b64\u5de5\u4f5c\u8d1f\u8f7d\u72b6\u6001\u672a\u77e5 \u8fdb\u5165 DevMode \u4e4b\u524d \u00b6 \u5728 DevMode \u4e4b\u524d\uff0c\u60a8\u9700\u8981\u5904\u7406\u4e00\u4e9b\u914d\u7f6e\u3002 \u6e90\u4ee3\u7801\u76ee\u5f55 \u00b6 \u5728\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u544a\u8bc9 Nocalhost \u6e90\u4ee3\u7801\u7684\u4f4d\u7f6e\uff0c\u56e0\u6b64 Nocalhost \u53ef\u4ee5\u5c06\u6e90\u4ee3\u7801\u6587\u4ef6\u540c\u6b65\u5230\u8fdc\u7a0b\u5bb9\u5668\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7 Nocalhost \u4ece GIT \u5b58\u50a8\u5e93\u4e2d\u6307\u5b9a\u672c\u5730\u76ee\u5f55\u6216\u514b\u9686\u6e90\u4ee3\u7801\u3002 You can Associate Local Directory before entering DevMode. Alternatively, Nocalhost will check the directory path. If you do not have an associated directory, Nocalhost will pop the selection menu to ask you to `specify the source directory. You can Open Local Directory or Clone from Git Repo . \u5408\u5e76\u672c\u5730\u76ee\u5f55 \u00b6 \u60a8\u53ef\u4ee5\u5728\u8f93\u5165 DevMode \u4e4b\u524d\u5c06\u672c\u5730\u6e90\u4ee3\u7801\u76ee\u5f55\u4e0e\u5de5\u4f5c\u8d1f\u8f7d\u76f8\u5173\u8054\u3002\u5173\u8054\u6b64\u76ee\u5f55\u540e\uff0cNocalhost \u5c06\u5728\u6570\u636e\u5e93\u4e2d\u4fdd\u5b58\u6b64\u76ee\u5f55\u8def\u5f84\u3002 \u5f53\u60a8\u8f93\u5165 DevMode \u65f6\uff0cNocalhost \u5c06\u4f7f\u7528\u6b64\u8def\u5f84\u76ee\u5f55\uff0c\u800c\u4e0d\u662f\u8981\u6c42\u8f93\u5165\u3002 Steps: Select the workload Right-click and select the Associate Local DIR Choose the local directory and confirm the selection Cross IDE If you have associated the directory in one IDE already, once you develop the same workload in the other IDE, Nocalhost will still use the directory path set before. For example, when a workload is associated with a directory in VS Code, then switch to IDEA. Nocalhost will firstly use the directory you associated in VS Code until you associate again. \u6253\u5f00\u672c\u5730\u76ee\u5f55 \u00b6 \u60a8\u53ef\u4ee5\u9009\u62e9\u4efb\u4f55\u672c\u5730\u76ee\u5f55\u5e76\u786e\u8ba4\u9009\u62e9\u3002Nocalhost \u5c06\u4fdd\u5b58\u6570\u636e\u5e93\u4e2d\u7684\u76ee\u5f55\u8def\u5f84\u3002 GIT \u5b58\u50a8\u5e93\u7684\u514b\u9686 \u00b6 Limitation \u5982\u679c\u60a8\u5df2\u7ecf\u5173\u8054\u6216\u6253\u5f00\u4e86\u76ee\u5f55\uff0c\u5219Nocalhost\u4e0d\u4f1a\u4eceGIT\u4e2d\u514b\u9686\u6e90\u4ee3\u7801\u3002 Nocalhost \u53ef\u4ee5\u5e2e\u52a9\u60a8\u4ece IDE \u5185\u7684 GIT \u5b58\u50a8\u5e93\u4e2d\u514b\u9686\u6e90\u4ee3\u7801\u3002 \u5982\u679c\u60a8\u9009\u62e9 Clone from Git Repository , Nocalhost \u5c06\u5c1d\u8bd5\u6839\u636e dev.giturl \u90e8\u5206\u4ece URL \u4e2d\u514b\u9686\u6e90\u4ee3\u7801\uff0c\u6216\u8981\u6c42\u60a8\u8f93\u5165 GIT URL\u3002 Auto-associate Nocalhost\u5c06\u5728\u514b\u9686\u4ee3\u7801\u540e\u81ea\u52a8\u5c06\u76ee\u5f55\u4e0e\u514b\u9686\u76ee\u5f55\u76f8\u5173\u8054\u3002 \u5f00\u53d1\u5bb9\u5668 \u00b6 \u4f7f\u7528\u5f00\u53d1\u5bb9\u5668\u8f93\u5165 DevMode \u65f6\uff0cNocalhost \u5c06\u66ff\u6362\u5de5\u4f5c\u8d1f\u8f7d\u5bb9\u5668\u3002 Nocalhost \u5c06\u52a0\u8f7d Nocalhost \u914d\u7f6e\u7684 container[*].dev \u90e8\u5206\u3002 \u5f00\u53d1\u6620\u50cf \u00b6 Nocalhost \u5728\u8f93\u5165 DevMode \u4e4b\u524d\u9700\u8981\u77e5\u9053\u8981\u4f7f\u7528\u54ea\u4e2a development image \u3002 Nocalhost \u5c06\u4f7f\u7528 dev.image \u4e2d\u5b9a\u4e49\u7684\u6620\u50cf\u6216\u8981\u6c42\u60a8\u8f93\u5165\u4e00\u4e2a\u6620\u50cf\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u6211\u4eec\u63d0\u4f9b\u7684 Docker \u6620\u50cf\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55 development image \u7684 \u81ea\u5b9a\u4e49\u6620\u50cf . Image Pull \u5bb9\u5668\u6620\u50cf\u5c06\u7531Kubernetes\u5904\u7406\uff0c \u9605\u8bfb\u66f4\u591a\u4ee5\u4e86\u89e3Kubernetes\u6620\u50cf\u7ba1\u7406 . \u5f00\u59cb\u5f00\u53d1\u6a21\u5f0f \u00b6 \u9009\u62e9\u5de5\u4f5c\u91cf \u00b6 \u6269\u5c55\u7fa4\u96c6\u68c0\u67e5\u5458 \u9009\u62e9\u8981\u5f00\u53d1\u7684\u5de5\u4f5c\u8d1f\u8f7d\u5e76\u5355\u51fb Start DevMode \u8981\u4e48 Start DevMode(Duplicate) \u5982\u679c\u60a8\u5728\u6b64\u5de5\u4f5c\u8d1f\u8f7d\u4e2d\u6709\u591a\u4e2a\u5bb9\u5668\uff0c\u8bf7\u9009\u62e9\u4e00\u4e2a\u5bb9\u5668 Container \u5982\u679c\u5de5\u4f5c\u8d1f\u8f7d\u4e2d\u6709\u591a\u4e2a\u5bb9\u5668\uff0c\u5219\u53ea\u80fd\u9009\u62e9\u4e00\u4e2a\u5bb9\u5668\u4ee5\u8f93\u5165DevMode\u3002 DevMode \u8fc7\u7a0b \u00b6 \u8fdb\u5165 DevMode \u65f6\uff0cNocalhost \u5c06\u505a\u4ee5\u4e0b\u4e8b\u60c5\uff1a \u66ff\u6362 Pods \u6839\u636e\u4f60\u7684 replacing port \u914d\u7f6e \u8f6c\u53d1\u7aef\u53e3 \u6839\u636e\u4f60\u7684 port-forwarding \u914d\u7f6e \u540c\u6b65\u6587\u4ef6\u66f4\u6539 \u6839\u636e dev.sync \u90e8\u5206\u7684\u672c\u5730\u9879\u76ee\u76ee\u5f55\u548c Kubernetes Pod \u5728\u672c\u8282\u4e4b\u95f4 \u6253\u5f00\u7ec8\u7aef \u5728\u5bb9\u5668\u542f\u52a8\u540e\uff0c\u5c31\u5728 IDE \u5185\u3002\u6253\u5f00\u7684\u5de5\u4f5c\u76ee\u5f55\u662f\u6839\u636e\u60a8\u7684 dev.workdir (The Remote Directory for File Synchronization)\u90e8\u5206\u7684\u3002 \u7ec8\u7aef\u4f1a\u8bdd\u5f00\u59cb\u540e\uff0c\u60a8\u5c31\u53ef\u4ee5\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\u5e76\u5728\u5bb9\u5668\u5185\u90e8\u5de5\u4f5c\u3002 \u8fdc\u7a0b\u7ec8\u7aef\u4f1a\u8bdd\u5f00\u59cb root@ratings-5dfbc89c59-r7wg5:/home/nocalhost-dev# \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 \u8fdc\u7a0b\u8fd0\u884c \u6839\u636e dev.command \u90e8\u5206\u8fd0\u884c\u6240\u6709\u547d\u4ee4\u3002 \u5728 Kubernetes \u7fa4\u96c6\u4e2d\u8fdb\u884c\u7f16\u7801 \u00b6 \u786e\u4fdd\u5728\u5f00\u53d1\u4e4b\u524d\u5df2\u7ecf\u5b8c\u6210\u4e86\u4ee5\u4e0b\u5185\u5bb9\uff1a \u5728\u5bb9\u5668\u5185\u542f\u52a8\u8fdb\u7a0b\u6216\u4f7f\u7528 \u8fdc\u7a0b\u8fd0\u884c \u8fd0\u884c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u60a8\u914d\u7f6e\u7684\u7aef\u53e3\u5411\u524d\u542f\u52a8\u5df2\u6210\u529f\u542f\u52a8\u6216\u914d\u7f6e IDE \u4e2d\u7684\u7aef\u53e3\u9a8c\u8bc1 \u72b6\u6001\u680f \u00b6 Nocalhost \u5c06\u76d1\u89c6\u672c\u5730\u6587\u4ef6\u66f4\u6539\u5e76\u5c06\u66f4\u6539\u4e0e\u8fdc\u7a0b\u5bb9\u5668\u540c\u6b65\u3002 \u60a8\u53ef\u4ee5\u68c0\u67e5 IDE \u72b6\u6001\u680f\u4e2d\u7684\u540c\u6b65\u72b6\u6001\u3002 \u65ad\u5f00\u5e76\u91cd\u65b0\u8fde\u63a5 \u00b6 \u5982\u679c\u6587\u4ef6\u540c\u6b65\u5df2\u65ad\u5f00\u8fde\u63a5\uff0c\u5219\u72b6\u6001\u5c06\u66f4\u6539\u4e3a Nocalhost sidecar disconnected . \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ea\u9700\u5355\u51fb\u72b6\u6001\u680f\u5373\u53ef\uff0cNocalhost \u5c06\u91cd\u65b0\u8fde\u63a5\u6587\u4ef6\u540c\u6b65\u3002 \u6253\u5f00\u9879\u76ee \u00b6 \u5982\u679c\u60a8\u5173\u95ed\u5f00\u53d1\u7684 IDE \u7a97\u53e3\u5e76\u5e0c\u671b\u518d\u6b21\u91cd\u65b0\u6253\u5f00\u5b83\u3002 \u53ea\u9700\u53f3\u952e\u5355\u51fb DevMode \u4e2d\u7684\u5de5\u4f5c\u91cf\uff0c\u7136\u540e\u9009\u62e9 Open Project . DevMode Only Open Project \u4ec5\u5728\u5f00\u53d1\u6a21\u5f0f\u4e0b\u5de5\u4f5c\u3002 \u7ed3\u675f DevMode \u00b6 \u5b8c\u6210\u5f00\u53d1\u540e\uff0c\u60a8\u73b0\u5728\u53ef\u4ee5\u7ed3\u675f DevMode\u3002 \u5982\u4f55\uff1f \u00b6 VS Code: \u5355\u51fb\u56fe\u6807 JetBrains: \u53f3\u952e\u5355\u51fb DevMode \u4e2d\u7684\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u7136\u540e\u9009\u62e9 End DevMode \u8fc7\u7a0b \u00b6 \u7ed3\u675f DevMode \u65f6\uff0cNocalhost \u8fd0\u884c\u4ee5\u4e0b\u8fc7\u7a0b\uff1a \u505c\u6b62\u6587\u4ef6\u540c\u6b65\u548c\u7aef\u53e3\u9a8c\u8bc1\uff08\u5982\u679c\u6709\uff09 \u505c\u6b62 Devcontainer \u5220\u9664\u5f53\u524d\u7248\u672c\u7684 POD \u91cd\u7f6e POD - \u91cd\u65b0\u521b\u5efa\u5e76\u542f\u52a8\u539f\u59cb\u7248\u672c\u7684 POD \u5176\u4ed6\u6709\u7528\u7684\u529f\u80fd \u00b6 \u91cd\u542f Pod \u00b6 Nocalhost \u53ef\u4ee5\u5e2e\u52a9\u60a8\u901a\u8fc7 Reset Pod \u5c06\u5176\u539f\u59cb\u7248\u672c\u7684\u4efb\u4f55 Pod \u5377\u8d77\u6765\u3002 \u4f8b\u5982\uff0c\u91cd\u7f6e productpage \u90e8\u7f72\uff0c\u60a8\u5e94\u8be5\u5728\u4e0b\u9762\u770b\u5230\u7c7b\u4f3c\u7684\u6d88\u606f\uff1a Stopping port forward Annotation nocalhost.origin.spec.json found, use it Deleting current revision... Recreating original revision... Service productpage has been reset. \u8c03\u6574 Manifest \u00b6 Nocalhost \u5177\u6709\u5185\u7f6e\u7684\u6e05\u5355\u7f16\u8f91\u5668\uff0c\u53ef\u8ba9\u60a8\u7f16\u8f91\u548c\u5e94\u7528 IDE \u5185\u7684 Kubernetes \u6e05\u5355\u3002 \u4fee\u6539\u540e\uff0cNocalhost \u53ef\u4ee5\u76f4\u63a5\u5e94\u7528\u65b0\u6e05\u5355\u3002 \u7f16\u8f91\u5e76\u5e94\u7528 \u00b6 DevMode \u5982\u679c\u5de5\u4f5c\u8d1f\u8f7d\u5728DevMode\u4e2d\uff0c\u5219\u65e0\u6cd5\u7f16\u8f91\u6e05\u5355\u3002 \u5220\u9664 \u00b6 \u5373\u5c06\u63a8\u51fa \u6e05\u9664 PVC \u00b6 \u6587\u6863\u5373\u5c06\u5230\u6765","title":"develop-service"},{"location":"guides/develop/service/#nocalhost","text":"Nocalhost \u5141\u8bb8\u60a8\u76f4\u63a5\u5728 Kubernetes \u7fa4\u96c6\u5185\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u3002","title":"Nocalhost \u7684\u5f00\u53d1"},{"location":"guides/develop/service/#_1","text":"Nocalhost \u5efa\u7b51\u7269\u7fa4\u96c6\u68c0\u67e5\u5458\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u7fa4\u96c6\u68c0\u67e5\u5668\u5728 Kubernetes \u7fa4\u96c6\u4e2d\u6d4f\u89c8\u8d44\u6e90\uff0c\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u5e76\u9009\u62e9\u8981\u5f00\u53d1\u548c\u8c03\u8bd5\u7684\u5de5\u4f5c\u8d1f\u8f7d\u3002","title":"\u4f7f\u7528\u7fa4\u96c6\u68c0\u67e5\u5458"},{"location":"guides/develop/service/#_2","text":"Nocalhost \u4f7f\u7528\u4ee5\u4e0b\u56fe\u6807\u6765\u63cf\u8ff0\u96c6\u7fa4\u68c0\u67e5\u5458\u4e2d\u4e0d\u540c Kubernetes \u8d44\u6e90\u7684\u72b6\u6001\u3002 Resource Status Icon Description Cluster Active \u8fde\u63a5\u5230\u7fa4\u96c6 Inactive \u65e0\u6cd5\u8fde\u63a5\u5230\u7fa4\u96c6 DevSpace Normal \u666e\u901a\u7684DevSpace/Namespace Read Only \u53ef\u8bfb\u7684DevSpace/Namespace\uff0c\u65e0\u6cd5\u64cd\u4f5c Application Active \u5e94\u7528\u7a0b\u5e8f\u80fd\u591f\u64cd\u4f5c Inactive \u5e94\u7528\u7a0b\u5e8f\u4e0d\u6d3b\u52a8\uff0c\u65e0\u6cd5\u64cd\u4f5c Loading \u5b89\u88c5\u6216\u5378\u8f7d Development Mode Start DevMode \u5de5\u4f5c\u8d1f\u8f7d\u5728Devmode\u4e2d End DevMode \u7ed3\u675fDevMode Others \u5176\u4ed6\u542f\u7528\u4e86DevMode DevMode and Port-Forwarding \u5728\u542f\u7528DevMode\u548cport-forwarding\u4e2d DevMode and Port-Forwarding, enabled by others \u5176\u4ed6\u5c06\u5de5\u4f5c\u8d1f\u8f7d\u542f\u7528\u5230DevMode\u548cport-forwarding Nocalhost Configs Normal \u6b64\u5de5\u4f5c\u8d1f\u8f7d\u5177\u6709Nocalhost\u914d\u7f6e Warning Nocalhost\u914d\u7f6e\u4e3a\u7a7a Workload Status Not Ready \u6b64\u5de5\u4f5c\u8d1f\u8f7d\u8fd8\u6ca1\u6709\u51c6\u5907\u597d\uff0c\u4f8b\u5982\u90e8\u7f72 Running \u8fd9\u4e2a\u5de5\u4f5c\u8d1f\u8f7d\u6b63\u5728\u8fd0\u884c Failed \u6b64\u5de5\u4f5c\u8d1f\u8f7d\u672a\u80fd\u8fd0\u884c Unknown \u6b64\u5de5\u4f5c\u8d1f\u8f7d\u72b6\u6001\u672a\u77e5","title":"\u8d44\u6e90\u72b6\u6001"},{"location":"guides/develop/service/#devmode","text":"\u5728 DevMode \u4e4b\u524d\uff0c\u60a8\u9700\u8981\u5904\u7406\u4e00\u4e9b\u914d\u7f6e\u3002","title":"\u8fdb\u5165 DevMode \u4e4b\u524d"},{"location":"guides/develop/service/#_3","text":"\u5728\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u544a\u8bc9 Nocalhost \u6e90\u4ee3\u7801\u7684\u4f4d\u7f6e\uff0c\u56e0\u6b64 Nocalhost \u53ef\u4ee5\u5c06\u6e90\u4ee3\u7801\u6587\u4ef6\u540c\u6b65\u5230\u8fdc\u7a0b\u5bb9\u5668\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7 Nocalhost \u4ece GIT \u5b58\u50a8\u5e93\u4e2d\u6307\u5b9a\u672c\u5730\u76ee\u5f55\u6216\u514b\u9686\u6e90\u4ee3\u7801\u3002 You can Associate Local Directory before entering DevMode. Alternatively, Nocalhost will check the directory path. If you do not have an associated directory, Nocalhost will pop the selection menu to ask you to `specify the source directory. You can Open Local Directory or Clone from Git Repo .","title":"\u6e90\u4ee3\u7801\u76ee\u5f55"},{"location":"guides/develop/service/#_4","text":"\u60a8\u53ef\u4ee5\u5728\u8f93\u5165 DevMode \u4e4b\u524d\u5c06\u672c\u5730\u6e90\u4ee3\u7801\u76ee\u5f55\u4e0e\u5de5\u4f5c\u8d1f\u8f7d\u76f8\u5173\u8054\u3002\u5173\u8054\u6b64\u76ee\u5f55\u540e\uff0cNocalhost \u5c06\u5728\u6570\u636e\u5e93\u4e2d\u4fdd\u5b58\u6b64\u76ee\u5f55\u8def\u5f84\u3002 \u5f53\u60a8\u8f93\u5165 DevMode \u65f6\uff0cNocalhost \u5c06\u4f7f\u7528\u6b64\u8def\u5f84\u76ee\u5f55\uff0c\u800c\u4e0d\u662f\u8981\u6c42\u8f93\u5165\u3002 Steps: Select the workload Right-click and select the Associate Local DIR Choose the local directory and confirm the selection Cross IDE If you have associated the directory in one IDE already, once you develop the same workload in the other IDE, Nocalhost will still use the directory path set before. For example, when a workload is associated with a directory in VS Code, then switch to IDEA. Nocalhost will firstly use the directory you associated in VS Code until you associate again.","title":"\u5408\u5e76\u672c\u5730\u76ee\u5f55"},{"location":"guides/develop/service/#_5","text":"\u60a8\u53ef\u4ee5\u9009\u62e9\u4efb\u4f55\u672c\u5730\u76ee\u5f55\u5e76\u786e\u8ba4\u9009\u62e9\u3002Nocalhost \u5c06\u4fdd\u5b58\u6570\u636e\u5e93\u4e2d\u7684\u76ee\u5f55\u8def\u5f84\u3002","title":"\u6253\u5f00\u672c\u5730\u76ee\u5f55"},{"location":"guides/develop/service/#git","text":"Limitation \u5982\u679c\u60a8\u5df2\u7ecf\u5173\u8054\u6216\u6253\u5f00\u4e86\u76ee\u5f55\uff0c\u5219Nocalhost\u4e0d\u4f1a\u4eceGIT\u4e2d\u514b\u9686\u6e90\u4ee3\u7801\u3002 Nocalhost \u53ef\u4ee5\u5e2e\u52a9\u60a8\u4ece IDE \u5185\u7684 GIT \u5b58\u50a8\u5e93\u4e2d\u514b\u9686\u6e90\u4ee3\u7801\u3002 \u5982\u679c\u60a8\u9009\u62e9 Clone from Git Repository , Nocalhost \u5c06\u5c1d\u8bd5\u6839\u636e dev.giturl \u90e8\u5206\u4ece URL \u4e2d\u514b\u9686\u6e90\u4ee3\u7801\uff0c\u6216\u8981\u6c42\u60a8\u8f93\u5165 GIT URL\u3002 Auto-associate Nocalhost\u5c06\u5728\u514b\u9686\u4ee3\u7801\u540e\u81ea\u52a8\u5c06\u76ee\u5f55\u4e0e\u514b\u9686\u76ee\u5f55\u76f8\u5173\u8054\u3002","title":"GIT \u5b58\u50a8\u5e93\u7684\u514b\u9686"},{"location":"guides/develop/service/#_6","text":"\u4f7f\u7528\u5f00\u53d1\u5bb9\u5668\u8f93\u5165 DevMode \u65f6\uff0cNocalhost \u5c06\u66ff\u6362\u5de5\u4f5c\u8d1f\u8f7d\u5bb9\u5668\u3002 Nocalhost \u5c06\u52a0\u8f7d Nocalhost \u914d\u7f6e\u7684 container[*].dev \u90e8\u5206\u3002","title":"\u5f00\u53d1\u5bb9\u5668"},{"location":"guides/develop/service/#_7","text":"Nocalhost \u5728\u8f93\u5165 DevMode \u4e4b\u524d\u9700\u8981\u77e5\u9053\u8981\u4f7f\u7528\u54ea\u4e2a development image \u3002 Nocalhost \u5c06\u4f7f\u7528 dev.image \u4e2d\u5b9a\u4e49\u7684\u6620\u50cf\u6216\u8981\u6c42\u60a8\u8f93\u5165\u4e00\u4e2a\u6620\u50cf\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528\u6211\u4eec\u63d0\u4f9b\u7684 Docker \u6620\u50cf\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55 development image \u7684 \u81ea\u5b9a\u4e49\u6620\u50cf . Image Pull \u5bb9\u5668\u6620\u50cf\u5c06\u7531Kubernetes\u5904\u7406\uff0c \u9605\u8bfb\u66f4\u591a\u4ee5\u4e86\u89e3Kubernetes\u6620\u50cf\u7ba1\u7406 .","title":"\u5f00\u53d1\u6620\u50cf"},{"location":"guides/develop/service/#_8","text":"","title":"\u5f00\u59cb\u5f00\u53d1\u6a21\u5f0f"},{"location":"guides/develop/service/#_9","text":"\u6269\u5c55\u7fa4\u96c6\u68c0\u67e5\u5458 \u9009\u62e9\u8981\u5f00\u53d1\u7684\u5de5\u4f5c\u8d1f\u8f7d\u5e76\u5355\u51fb Start DevMode \u8981\u4e48 Start DevMode(Duplicate) \u5982\u679c\u60a8\u5728\u6b64\u5de5\u4f5c\u8d1f\u8f7d\u4e2d\u6709\u591a\u4e2a\u5bb9\u5668\uff0c\u8bf7\u9009\u62e9\u4e00\u4e2a\u5bb9\u5668 Container \u5982\u679c\u5de5\u4f5c\u8d1f\u8f7d\u4e2d\u6709\u591a\u4e2a\u5bb9\u5668\uff0c\u5219\u53ea\u80fd\u9009\u62e9\u4e00\u4e2a\u5bb9\u5668\u4ee5\u8f93\u5165DevMode\u3002","title":"\u9009\u62e9\u5de5\u4f5c\u91cf"},{"location":"guides/develop/service/#devmode_1","text":"\u8fdb\u5165 DevMode \u65f6\uff0cNocalhost \u5c06\u505a\u4ee5\u4e0b\u4e8b\u60c5\uff1a \u66ff\u6362 Pods \u6839\u636e\u4f60\u7684 replacing port \u914d\u7f6e \u8f6c\u53d1\u7aef\u53e3 \u6839\u636e\u4f60\u7684 port-forwarding \u914d\u7f6e \u540c\u6b65\u6587\u4ef6\u66f4\u6539 \u6839\u636e dev.sync \u90e8\u5206\u7684\u672c\u5730\u9879\u76ee\u76ee\u5f55\u548c Kubernetes Pod \u5728\u672c\u8282\u4e4b\u95f4 \u6253\u5f00\u7ec8\u7aef \u5728\u5bb9\u5668\u542f\u52a8\u540e\uff0c\u5c31\u5728 IDE \u5185\u3002\u6253\u5f00\u7684\u5de5\u4f5c\u76ee\u5f55\u662f\u6839\u636e\u60a8\u7684 dev.workdir (The Remote Directory for File Synchronization)\u90e8\u5206\u7684\u3002 \u7ec8\u7aef\u4f1a\u8bdd\u5f00\u59cb\u540e\uff0c\u60a8\u5c31\u53ef\u4ee5\u542f\u52a8\u5e94\u7528\u7a0b\u5e8f\u5e76\u5728\u5bb9\u5668\u5185\u90e8\u5de5\u4f5c\u3002 \u8fdc\u7a0b\u7ec8\u7aef\u4f1a\u8bdd\u5f00\u59cb root@ratings-5dfbc89c59-r7wg5:/home/nocalhost-dev# \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 \u8fdc\u7a0b\u8fd0\u884c \u6839\u636e dev.command \u90e8\u5206\u8fd0\u884c\u6240\u6709\u547d\u4ee4\u3002","title":"DevMode \u8fc7\u7a0b"},{"location":"guides/develop/service/#kubernetes","text":"\u786e\u4fdd\u5728\u5f00\u53d1\u4e4b\u524d\u5df2\u7ecf\u5b8c\u6210\u4e86\u4ee5\u4e0b\u5185\u5bb9\uff1a \u5728\u5bb9\u5668\u5185\u542f\u52a8\u8fdb\u7a0b\u6216\u4f7f\u7528 \u8fdc\u7a0b\u8fd0\u884c \u8fd0\u884c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u60a8\u914d\u7f6e\u7684\u7aef\u53e3\u5411\u524d\u542f\u52a8\u5df2\u6210\u529f\u542f\u52a8\u6216\u914d\u7f6e IDE \u4e2d\u7684\u7aef\u53e3\u9a8c\u8bc1","title":"\u5728 Kubernetes \u7fa4\u96c6\u4e2d\u8fdb\u884c\u7f16\u7801"},{"location":"guides/develop/service/#_10","text":"Nocalhost \u5c06\u76d1\u89c6\u672c\u5730\u6587\u4ef6\u66f4\u6539\u5e76\u5c06\u66f4\u6539\u4e0e\u8fdc\u7a0b\u5bb9\u5668\u540c\u6b65\u3002 \u60a8\u53ef\u4ee5\u68c0\u67e5 IDE \u72b6\u6001\u680f\u4e2d\u7684\u540c\u6b65\u72b6\u6001\u3002","title":"\u72b6\u6001\u680f"},{"location":"guides/develop/service/#_11","text":"\u5982\u679c\u6587\u4ef6\u540c\u6b65\u5df2\u65ad\u5f00\u8fde\u63a5\uff0c\u5219\u72b6\u6001\u5c06\u66f4\u6539\u4e3a Nocalhost sidecar disconnected . \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ea\u9700\u5355\u51fb\u72b6\u6001\u680f\u5373\u53ef\uff0cNocalhost \u5c06\u91cd\u65b0\u8fde\u63a5\u6587\u4ef6\u540c\u6b65\u3002","title":"\u65ad\u5f00\u5e76\u91cd\u65b0\u8fde\u63a5"},{"location":"guides/develop/service/#_12","text":"\u5982\u679c\u60a8\u5173\u95ed\u5f00\u53d1\u7684 IDE \u7a97\u53e3\u5e76\u5e0c\u671b\u518d\u6b21\u91cd\u65b0\u6253\u5f00\u5b83\u3002 \u53ea\u9700\u53f3\u952e\u5355\u51fb DevMode \u4e2d\u7684\u5de5\u4f5c\u91cf\uff0c\u7136\u540e\u9009\u62e9 Open Project . DevMode Only Open Project \u4ec5\u5728\u5f00\u53d1\u6a21\u5f0f\u4e0b\u5de5\u4f5c\u3002","title":"\u6253\u5f00\u9879\u76ee"},{"location":"guides/develop/service/#devmode_2","text":"\u5b8c\u6210\u5f00\u53d1\u540e\uff0c\u60a8\u73b0\u5728\u53ef\u4ee5\u7ed3\u675f DevMode\u3002","title":"\u7ed3\u675f DevMode"},{"location":"guides/develop/service/#_13","text":"VS Code: \u5355\u51fb\u56fe\u6807 JetBrains: \u53f3\u952e\u5355\u51fb DevMode \u4e2d\u7684\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u7136\u540e\u9009\u62e9 End DevMode","title":"\u5982\u4f55\uff1f"},{"location":"guides/develop/service/#_14","text":"\u7ed3\u675f DevMode \u65f6\uff0cNocalhost \u8fd0\u884c\u4ee5\u4e0b\u8fc7\u7a0b\uff1a \u505c\u6b62\u6587\u4ef6\u540c\u6b65\u548c\u7aef\u53e3\u9a8c\u8bc1\uff08\u5982\u679c\u6709\uff09 \u505c\u6b62 Devcontainer \u5220\u9664\u5f53\u524d\u7248\u672c\u7684 POD \u91cd\u7f6e POD - \u91cd\u65b0\u521b\u5efa\u5e76\u542f\u52a8\u539f\u59cb\u7248\u672c\u7684 POD","title":"\u8fc7\u7a0b"},{"location":"guides/develop/service/#_15","text":"","title":"\u5176\u4ed6\u6709\u7528\u7684\u529f\u80fd"},{"location":"guides/develop/service/#pod","text":"Nocalhost \u53ef\u4ee5\u5e2e\u52a9\u60a8\u901a\u8fc7 Reset Pod \u5c06\u5176\u539f\u59cb\u7248\u672c\u7684\u4efb\u4f55 Pod \u5377\u8d77\u6765\u3002 \u4f8b\u5982\uff0c\u91cd\u7f6e productpage \u90e8\u7f72\uff0c\u60a8\u5e94\u8be5\u5728\u4e0b\u9762\u770b\u5230\u7c7b\u4f3c\u7684\u6d88\u606f\uff1a Stopping port forward Annotation nocalhost.origin.spec.json found, use it Deleting current revision... Recreating original revision... Service productpage has been reset.","title":"\u91cd\u542f Pod"},{"location":"guides/develop/service/#manifest","text":"Nocalhost \u5177\u6709\u5185\u7f6e\u7684\u6e05\u5355\u7f16\u8f91\u5668\uff0c\u53ef\u8ba9\u60a8\u7f16\u8f91\u548c\u5e94\u7528 IDE \u5185\u7684 Kubernetes \u6e05\u5355\u3002 \u4fee\u6539\u540e\uff0cNocalhost \u53ef\u4ee5\u76f4\u63a5\u5e94\u7528\u65b0\u6e05\u5355\u3002","title":"\u8c03\u6574 Manifest"},{"location":"guides/develop/service/#_16","text":"DevMode \u5982\u679c\u5de5\u4f5c\u8d1f\u8f7d\u5728DevMode\u4e2d\uff0c\u5219\u65e0\u6cd5\u7f16\u8f91\u6e05\u5355\u3002","title":"\u7f16\u8f91\u5e76\u5e94\u7528"},{"location":"guides/develop/service/#_17","text":"\u5373\u5c06\u63a8\u51fa","title":"\u5220\u9664"},{"location":"guides/develop/service/#pvc","text":"\u6587\u6863\u5373\u5c06\u5230\u6765","title":"\u6e05\u9664 PVC"},{"location":"practice/kubesphere/","text":"1. Preparation \u00b6 Since KubeSphere must deploy on the specific Kubernetes namespaces, a standalone Kubernetes cluster is required. You can KubeSphere on a private cluster, like Docker Desktop, minikube, and so on. Kubernetes cluster hosting on public cloud platform (GKE, AWS EKS, AKS ...) would be fine as well. 2. Installation \u00b6 Run the following commands on a Kubernetes cluster: kubectl apply -f https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/kubesphere-installer.yaml kubectl apply -f https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/cluster-configuration.yaml After installation, access http://127.0.0.1:30880 with browser, and you will see KubeSphere Dashboard. Log in with admin as username, and P@88w0rd as password. 3. Development \u00b6 There are several services deployed in namespace kubesphere-system . I will take service ks-apiserver as an example to demonstrate how to develop KubeSphere service with Nocalhost. First of all, install Goland with Nocalhost plugin. Then, add Kubernetes cluster with KubeSphere installed by Nocalhost plugin. Next, find deployment ks-apiserver from the tree of Nocalhost plugin. Right click it, and click Dev Config on menu. Copy and paste the following configure to the file opened just now. name: ks-apiserver serviceType: deployment containers: - name: ks-apiserver dev: gitUrl: https://github.com/kubesphere/kubesphere.git image: codingcorp-docker.pkg.coding.net/nocalhost/dev-images/golang:1.16 shell: \"\" workDir: /home/nocalhost-dev storageClass: \"\" resources: null persistentVolumeDirs: [] command: build: [] run: - go - run - /home/nocalhost-dev/cmd/ks-apiserver/apiserver.go debug: - dlv - --headless - --log - --listen - :2345 - --api-version - \"2\" - --accept-multiclient - debug - /home/nocalhost-dev/cmd/ks-apiserver/apiserver.go hotReloadRun: [] hotReloadDebug: [] debug: remoteDebugPort: 2345 useDevContainer: false sync: null env: [] envFrom: null portForward: [] For more details about the configure file, see Config Reference . Save the file. Finally, right click deployment ks-apiserver and click Start DevMode on menu. After DevMode started, you can just start run or debug by clicking Run/Debug on Goland project. Enjoy your development of KubeSphere services.","title":"Develop KubeSphere with Nocalhost"},{"location":"practice/kubesphere/#1-preparation","text":"Since KubeSphere must deploy on the specific Kubernetes namespaces, a standalone Kubernetes cluster is required. You can KubeSphere on a private cluster, like Docker Desktop, minikube, and so on. Kubernetes cluster hosting on public cloud platform (GKE, AWS EKS, AKS ...) would be fine as well.","title":"1. Preparation"},{"location":"practice/kubesphere/#2-installation","text":"Run the following commands on a Kubernetes cluster: kubectl apply -f https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/kubesphere-installer.yaml kubectl apply -f https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/cluster-configuration.yaml After installation, access http://127.0.0.1:30880 with browser, and you will see KubeSphere Dashboard. Log in with admin as username, and P@88w0rd as password.","title":"2. Installation"},{"location":"practice/kubesphere/#3-development","text":"There are several services deployed in namespace kubesphere-system . I will take service ks-apiserver as an example to demonstrate how to develop KubeSphere service with Nocalhost. First of all, install Goland with Nocalhost plugin. Then, add Kubernetes cluster with KubeSphere installed by Nocalhost plugin. Next, find deployment ks-apiserver from the tree of Nocalhost plugin. Right click it, and click Dev Config on menu. Copy and paste the following configure to the file opened just now. name: ks-apiserver serviceType: deployment containers: - name: ks-apiserver dev: gitUrl: https://github.com/kubesphere/kubesphere.git image: codingcorp-docker.pkg.coding.net/nocalhost/dev-images/golang:1.16 shell: \"\" workDir: /home/nocalhost-dev storageClass: \"\" resources: null persistentVolumeDirs: [] command: build: [] run: - go - run - /home/nocalhost-dev/cmd/ks-apiserver/apiserver.go debug: - dlv - --headless - --log - --listen - :2345 - --api-version - \"2\" - --accept-multiclient - debug - /home/nocalhost-dev/cmd/ks-apiserver/apiserver.go hotReloadRun: [] hotReloadDebug: [] debug: remoteDebugPort: 2345 useDevContainer: false sync: null env: [] envFrom: null portForward: [] For more details about the configure file, see Config Reference . Save the file. Finally, right click deployment ks-apiserver and click Start DevMode on menu. After DevMode started, you can just start run or debug by clicking Run/Debug on Goland project. Enjoy your development of KubeSphere services.","title":"3. Development"},{"location":"practice/cloud/ali-ack/","text":"\u963f\u91cc\u5df4\u5df4\u4e91 ack \u00b6 Requirements \u7531 kubeconfig \u8fde\u63a5 \u00b6 \u5e38\u95ee\u95ee\u9898 \u00b6","title":"\u963f\u91cc\u4e91"},{"location":"practice/cloud/ali-ack/#ack","text":"Requirements","title":"\u963f\u91cc\u5df4\u5df4\u4e91 ack"},{"location":"practice/cloud/ali-ack/#kubeconfig","text":"","title":"\u7531 kubeconfig \u8fde\u63a5"},{"location":"practice/cloud/ali-ack/#_1","text":"","title":"\u5e38\u95ee\u95ee\u9898"},{"location":"practice/cloud/amazon-eks/","text":"Amazon EKS \u00b6 Note ::: Connect by KubeConfig \u00b6 FAQ \u00b6","title":"Amazon EKS"},{"location":"practice/cloud/amazon-eks/#amazon-eks","text":"Note :::","title":"Amazon EKS"},{"location":"practice/cloud/amazon-eks/#connect-by-kubeconfig","text":"","title":"Connect by KubeConfig"},{"location":"practice/cloud/amazon-eks/#faq","text":"","title":"FAQ"},{"location":"practice/cloud/google-gke/","text":"Google GKE \u00b6 Note ::: Connect by KubeConfig \u00b6 FAQ \u00b6","title":"Google GKE"},{"location":"practice/cloud/google-gke/#google-gke","text":"Note :::","title":"Google GKE"},{"location":"practice/cloud/google-gke/#connect-by-kubeconfig","text":"","title":"Connect by KubeConfig"},{"location":"practice/cloud/google-gke/#faq","text":"","title":"FAQ"},{"location":"practice/cloud/k8s-compatible/","text":"Kubernetes \u517c\u5bb9 \u00b6 Caution \u73b0\u5728\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u4f7f\u7528\u4e0d\u540c\u7684Kubernetes\u7fa4\u96c6\u8fdb\u884c\u6218\u6597\uff0c\u6d4b\u8bd5\u7ed3\u679c\u6b63\u5728\u66f4\u65b0\u3002\u5982\u679c\u60a8\u5728\u4f7f\u7528Nocalhost\u65f6\u9047\u5230\u95ee\u9898\uff0c\u8bf7\u968f\u65f6\u4e0e\u6211\u4eec\u8054\u7cfb\u3002 \u672c\u5730\u7684 Kubernetes \u7fa4\u96c6 \u00b6 Product Version Kubernetes Version Testing Result Minikube 1.22 1.21.2 passed Docker Desktop 3.5.2 (3.5.2.18) 1.21.2 passed K3s 1.21.2 MicroK8s 1.21.2 K3d 4.4.7 1.21.2 passed \u6258\u7ba1 Kubernetes \u7fa4\u96c6\uff08\u516c\u5171\u4e91\uff09 \u00b6 Company Kubernetes Version Testing Result Tutorial Tencent TKE Alibaba Cloud Huawei CCE Qing Cloud Rancher RKE Rancher K3s Google GKE Microsoft Azure Amazon EKS Kubernetes \u5e73\u53f0 \u00b6 Product Version Kubernetes Version Testing Result KubeSphere","title":"K8\u517c\u5bb9"},{"location":"practice/cloud/k8s-compatible/#kubernetes","text":"Caution \u73b0\u5728\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u4f7f\u7528\u4e0d\u540c\u7684Kubernetes\u7fa4\u96c6\u8fdb\u884c\u6218\u6597\uff0c\u6d4b\u8bd5\u7ed3\u679c\u6b63\u5728\u66f4\u65b0\u3002\u5982\u679c\u60a8\u5728\u4f7f\u7528Nocalhost\u65f6\u9047\u5230\u95ee\u9898\uff0c\u8bf7\u968f\u65f6\u4e0e\u6211\u4eec\u8054\u7cfb\u3002","title":"Kubernetes \u517c\u5bb9"},{"location":"practice/cloud/k8s-compatible/#kubernetes_1","text":"Product Version Kubernetes Version Testing Result Minikube 1.22 1.21.2 passed Docker Desktop 3.5.2 (3.5.2.18) 1.21.2 passed K3s 1.21.2 MicroK8s 1.21.2 K3d 4.4.7 1.21.2 passed","title":"\u672c\u5730\u7684 Kubernetes \u7fa4\u96c6"},{"location":"practice/cloud/k8s-compatible/#kubernetes_2","text":"Company Kubernetes Version Testing Result Tutorial Tencent TKE Alibaba Cloud Huawei CCE Qing Cloud Rancher RKE Rancher K3s Google GKE Microsoft Azure Amazon EKS","title":"\u6258\u7ba1 Kubernetes \u7fa4\u96c6\uff08\u516c\u5171\u4e91\uff09"},{"location":"practice/cloud/k8s-compatible/#kubernetes_3","text":"Product Version Kubernetes Version Testing Result KubeSphere","title":"Kubernetes \u5e73\u53f0"},{"location":"practice/cloud/ms-azure/","text":"Microsoft Azure \u00b6 Note ::: Connect by KubeConfig \u00b6 FAQ \u00b6","title":"Microsoft Azure"},{"location":"practice/cloud/ms-azure/#microsoft-azure","text":"Note :::","title":"Microsoft Azure"},{"location":"practice/cloud/ms-azure/#connect-by-kubeconfig","text":"","title":"Connect by KubeConfig"},{"location":"practice/cloud/ms-azure/#faq","text":"","title":"FAQ"},{"location":"practice/cloud/rancher-rke/","text":"Rancher RKE & K3s \u00b6 Note ::: Connect by KubeConfig \u00b6 FAQ \u00b6","title":"Rancher RKE & K3s"},{"location":"practice/cloud/rancher-rke/#rancher-rke-k3s","text":"Note :::","title":"Rancher RKE &amp; K3s"},{"location":"practice/cloud/rancher-rke/#connect-by-kubeconfig","text":"","title":"Connect by KubeConfig"},{"location":"practice/cloud/rancher-rke/#faq","text":"","title":"FAQ"},{"location":"practice/cloud/tencent-tke/","text":"Tencent TKE \u00b6 Note ::: Connect by KubeConfig \u00b6 FAQ \u00b6","title":"Tencent TKE"},{"location":"practice/cloud/tencent-tke/#tencent-tke","text":"Note :::","title":"Tencent TKE"},{"location":"practice/cloud/tencent-tke/#connect-by-kubeconfig","text":"","title":"Connect by KubeConfig"},{"location":"practice/cloud/tencent-tke/#faq","text":"","title":"FAQ"},{"location":"practice/pre-release/kubesphere/","tags":["Kubernetes","KubeSphere","Development"],"text":"Introduction \u00b6 This article walks you through using Nocalhost to seamlessly connect your local development machine to a remote Kubernetes cluster, allowing you to use your favourite IDE to develop and debug KubeSphere . Giving you the ability to comfortably develop and debug your remote apps with your existing skills. This article covers: Deploy the KubeSphere to the remote Kubernetes cluster Developing and debugging KubeSphere service in Kubernetes Prerequisites \u00b6 Prepare an available Kubernetes cluster in your workstation. You can use any Kubernetes clusters that you have namespace admin privilege. GoLand IDE 2020.03+ (I am using GoLand 2021.2 in this article) Install Nocalhost JetBrains plugin Install Go 1.13 or later Deploy KubeSphere \u00b6 You can follow Minimal KubeSphere on Kubernetes for deployment. Develop \u00b6","title":"kubesphere"},{"location":"practice/pre-release/kubesphere/#introduction","text":"This article walks you through using Nocalhost to seamlessly connect your local development machine to a remote Kubernetes cluster, allowing you to use your favourite IDE to develop and debug KubeSphere . Giving you the ability to comfortably develop and debug your remote apps with your existing skills. This article covers: Deploy the KubeSphere to the remote Kubernetes cluster Developing and debugging KubeSphere service in Kubernetes","title":"Introduction"},{"location":"practice/pre-release/kubesphere/#prerequisites","text":"Prepare an available Kubernetes cluster in your workstation. You can use any Kubernetes clusters that you have namespace admin privilege. GoLand IDE 2020.03+ (I am using GoLand 2021.2 in this article) Install Nocalhost JetBrains plugin Install Go 1.13 or later","title":"Prerequisites"},{"location":"practice/pre-release/kubesphere/#deploy-kubesphere","text":"You can follow Minimal KubeSphere on Kubernetes for deployment.","title":"Deploy KubeSphere"},{"location":"practice/pre-release/kubesphere/#develop","text":"","title":"Develop"},{"location":"reference/nh-config/","text":"Nocalhost \u914d\u7f6e\u89c4\u683c \u00b6 # Specify config properties # type: object # default value: {} # required configProperties : # config file version # type: string # default value: null # required version : v2 # env file name, substitution variable for this file # type: string # default value: null # optional envFile : env.dev application : # Application name # type: string(dns1123) # default value: null # required # nhctl param: [NAME] # uniq name : coding-agile # Application k8s manifest type # type: select\uff0coptions\uff1ahelmGit/helmRepo/rawManifest/rawManifestLocal/helmLocal # default value: null # required # nhctl param: --type,-t manifestType : rawManifest # Set default application version for helmRepo # type: string # deafult value: latest # optional helmVersion : 0.0.1 # helmGit: chart path: relative path of git repo root. # helmLocal: chart path: relative path of local helm chart path. # helmRepo: no meaning # rawManifestGit: manifest files path: multi relative paths of git repo root # rawManifestLocal: manifest files path: multi relative paths of local application path # kustomizeGit: kustomize file path: relative path of git repo # kustomizeLocal: kustomize file path: multi relative paths of local application path # type: string[] # default value: [\".\"] # required resourcePath : [] # helmGit: no meaning. # helmRepo: no meaning. # rawManifestGit: ignored manifest path: multi relative paths of git repo root. # rawManifestLocal: ignored manifest path: multi relative paths of local application path. # helmLocal: no meaning. # type: string[] # default value: [\".\"] # optional ignoredPath : [] # The jobs to be executed before application's installation. # type: object[] # default value: [] # optional onPreInstall : # Job yaml file, the relative path of the repo root # type: string # required - path : \"job-1.yaml\" # Order of execution of job, The smaller the value, the first to execute # type: integer # default value: 0 # optional weight : -1 - path : \"job-2.yaml\" weight : 5 # Overwrite helm values.yaml # type: object[] # default value: [] # optional helmValues : - key : DOMAIN value : ${DOMAIN:-www.coding.com} - key : DEBUG value : ${DEBUG:-true} # Inject environment variable for all workload # type: object[] # default value: [] # optional env : - name : DEBUG value : ${DEBUG:-true} - name : DOMAIN value : \"www.coding.com\" # Use envFile to inject environment variable for all workload # If specify env and envFrom at the same time, then use intersection of them, and use env key as primary # type: object[] # default value: [] # optional envFrom : envFile : - path : dev.env - path : dev.env # The Applicaion's micro services # type: object[] # default value: [] # optional services : # Name of service, the name of workload in cluster # type: string # default value: null # required - name : e-coding # The Kubernetes Workloads type corresponding to the service # type: select, options: deployment/statefulset/pod/job/cronjob/daemonset case insensitive # default value: deployment # required serviceType : deployment dependLabelSelector : # Dependent Pods label selector (The service will not start until the Pods selected by selector being ready.) # type: string[] # default value: [] # optional pods : - \"name=mariadb\" - \"app.kubernetes.io/name=mariadb\" # Dependent Jobs label selector (The service will not start until the Jobs selected by selector completed.) # type: string[] # default value: [] # optional jobs : - \"job-name=init-job\" - \"app.kubernetes.io/name=init-job\" containers : # When the Pod has multiple containers, specify the container name. # type: string # default value: \"\" # optional - name : coding # Specify installation parameters # type: object # default value: {} # optional install : # Inject environment variable for container when installed # type: object[] # default value: [] # optional env : - name : DEBUG value : \"true\" - name : DOMAIN value : \"www.coding.com\" # Use envFile to inject environment variable for container when installed # If specify env and envFrom at the same time, then use intersection of them, and use env key as primary # type: object[] # default value: [] # optional envFrom : envFile : - path : dev.env - path : dev.env # Ports to be forwarded to local when workload has been installed # localPort:remotePort # type: string[] # default value: [] # optional portForward : - 3306:3306 # Specify development parameters # type: object # default value: {} # required dev : # The git repository clone url of the service # type: string # default value: null # required gitUrl : xxx-job # DevContainer Image of the micro service # type: string # default value: null # required image : java:8-jdk # The default shell of DevContainer # type: string # default value: \"/bin/sh\" # optional shell : \"bash\" # The work directory of DevContainer # type: string # default value: \"/home/nocalhost-dev\" # optional workDir : \"/root/nocalhost-dev\" # Specify resources requests and limits for DevContainer, same format to Kubernetes's resources (Not currently implemented) # type: object # default value: {} # optional resources : limits : cpu : \"1\" memory : 1Gi requests : cpu : \"0.5\" memory : 512Mi # Storage of persistence volume # type: string # default value: null # optional storageClass : \"cbs\" # Dirs to be persisted in DevContainer # type: string[] # default value: [\"/home/nocalhost-dev\"] # optional persistentVolumeDirs : # Dir to be persisted in DevContainer # type: string # default value: null # required - path : \"/root\" # Capability of the dir # type: string # default value: 10Gi # optional capacity : 100Gi command : # Run command of the service # default value: [\"\"] # optional run : [ \"./gradlew\" , \"bootRun\" ] # Debug command of the service # type: string[] # default value: [\"\"] # optional debug : [ \"./gradlew\" , \"bootRun\" , \"--debug-jvm\" ] # Specify debug parameter # type: object # default value: {} # optional debug : # Specify remote debug port # type: int # default value: null # optional remoteDebugPort : 5005 # Use .dev-container of VSCode to specify DevContainer Image (Not currently implemented) # type: string # default value: \"\" # optional useDevContainer : false # Specify file synchronization when enter development mode # type: object # default value: {} # optional sync : # The synchronization file mode of the service (Not currently implemented) # \"send\" specifies one-way synchronization to the container, \"sendreceive\" specifies two-way synchronization # type: select\uff0csend/sendreceive # default value: \"send\" # optional type : send # List of files and directories to be synchronized to DevContainer # type: string[] # default value: [\".\"] # optional filePattern : - \"./src\" - \"./pkg/fff\" # List of ignored files and directories to be synchronized to DevContainer # type: string[] # default value: [] # optional ignoreFilePattern : - \".git\" - \"./build\" # Specify dev mode environment parameters # type: object[] # default value: {} # optional env : - name : DEBUG value : \"true\" - name : DOMAIN value : \"www.coding.com\" # Use env file to specify dev mode environment parameters # type: object # default value: {} # optional envFrom : envFile : - path : dev.env - path : dev.env # Ports to be forwarded to local when enter devMode # localPort:remotePort # type: string[] # default value: [] # optional portForward : - 3306:3306","title":"\u914d\u7f6e\u53c2\u8003"},{"location":"reference/nh-config/#nocalhost","text":"# Specify config properties # type: object # default value: {} # required configProperties : # config file version # type: string # default value: null # required version : v2 # env file name, substitution variable for this file # type: string # default value: null # optional envFile : env.dev application : # Application name # type: string(dns1123) # default value: null # required # nhctl param: [NAME] # uniq name : coding-agile # Application k8s manifest type # type: select\uff0coptions\uff1ahelmGit/helmRepo/rawManifest/rawManifestLocal/helmLocal # default value: null # required # nhctl param: --type,-t manifestType : rawManifest # Set default application version for helmRepo # type: string # deafult value: latest # optional helmVersion : 0.0.1 # helmGit: chart path: relative path of git repo root. # helmLocal: chart path: relative path of local helm chart path. # helmRepo: no meaning # rawManifestGit: manifest files path: multi relative paths of git repo root # rawManifestLocal: manifest files path: multi relative paths of local application path # kustomizeGit: kustomize file path: relative path of git repo # kustomizeLocal: kustomize file path: multi relative paths of local application path # type: string[] # default value: [\".\"] # required resourcePath : [] # helmGit: no meaning. # helmRepo: no meaning. # rawManifestGit: ignored manifest path: multi relative paths of git repo root. # rawManifestLocal: ignored manifest path: multi relative paths of local application path. # helmLocal: no meaning. # type: string[] # default value: [\".\"] # optional ignoredPath : [] # The jobs to be executed before application's installation. # type: object[] # default value: [] # optional onPreInstall : # Job yaml file, the relative path of the repo root # type: string # required - path : \"job-1.yaml\" # Order of execution of job, The smaller the value, the first to execute # type: integer # default value: 0 # optional weight : -1 - path : \"job-2.yaml\" weight : 5 # Overwrite helm values.yaml # type: object[] # default value: [] # optional helmValues : - key : DOMAIN value : ${DOMAIN:-www.coding.com} - key : DEBUG value : ${DEBUG:-true} # Inject environment variable for all workload # type: object[] # default value: [] # optional env : - name : DEBUG value : ${DEBUG:-true} - name : DOMAIN value : \"www.coding.com\" # Use envFile to inject environment variable for all workload # If specify env and envFrom at the same time, then use intersection of them, and use env key as primary # type: object[] # default value: [] # optional envFrom : envFile : - path : dev.env - path : dev.env # The Applicaion's micro services # type: object[] # default value: [] # optional services : # Name of service, the name of workload in cluster # type: string # default value: null # required - name : e-coding # The Kubernetes Workloads type corresponding to the service # type: select, options: deployment/statefulset/pod/job/cronjob/daemonset case insensitive # default value: deployment # required serviceType : deployment dependLabelSelector : # Dependent Pods label selector (The service will not start until the Pods selected by selector being ready.) # type: string[] # default value: [] # optional pods : - \"name=mariadb\" - \"app.kubernetes.io/name=mariadb\" # Dependent Jobs label selector (The service will not start until the Jobs selected by selector completed.) # type: string[] # default value: [] # optional jobs : - \"job-name=init-job\" - \"app.kubernetes.io/name=init-job\" containers : # When the Pod has multiple containers, specify the container name. # type: string # default value: \"\" # optional - name : coding # Specify installation parameters # type: object # default value: {} # optional install : # Inject environment variable for container when installed # type: object[] # default value: [] # optional env : - name : DEBUG value : \"true\" - name : DOMAIN value : \"www.coding.com\" # Use envFile to inject environment variable for container when installed # If specify env and envFrom at the same time, then use intersection of them, and use env key as primary # type: object[] # default value: [] # optional envFrom : envFile : - path : dev.env - path : dev.env # Ports to be forwarded to local when workload has been installed # localPort:remotePort # type: string[] # default value: [] # optional portForward : - 3306:3306 # Specify development parameters # type: object # default value: {} # required dev : # The git repository clone url of the service # type: string # default value: null # required gitUrl : xxx-job # DevContainer Image of the micro service # type: string # default value: null # required image : java:8-jdk # The default shell of DevContainer # type: string # default value: \"/bin/sh\" # optional shell : \"bash\" # The work directory of DevContainer # type: string # default value: \"/home/nocalhost-dev\" # optional workDir : \"/root/nocalhost-dev\" # Specify resources requests and limits for DevContainer, same format to Kubernetes's resources (Not currently implemented) # type: object # default value: {} # optional resources : limits : cpu : \"1\" memory : 1Gi requests : cpu : \"0.5\" memory : 512Mi # Storage of persistence volume # type: string # default value: null # optional storageClass : \"cbs\" # Dirs to be persisted in DevContainer # type: string[] # default value: [\"/home/nocalhost-dev\"] # optional persistentVolumeDirs : # Dir to be persisted in DevContainer # type: string # default value: null # required - path : \"/root\" # Capability of the dir # type: string # default value: 10Gi # optional capacity : 100Gi command : # Run command of the service # default value: [\"\"] # optional run : [ \"./gradlew\" , \"bootRun\" ] # Debug command of the service # type: string[] # default value: [\"\"] # optional debug : [ \"./gradlew\" , \"bootRun\" , \"--debug-jvm\" ] # Specify debug parameter # type: object # default value: {} # optional debug : # Specify remote debug port # type: int # default value: null # optional remoteDebugPort : 5005 # Use .dev-container of VSCode to specify DevContainer Image (Not currently implemented) # type: string # default value: \"\" # optional useDevContainer : false # Specify file synchronization when enter development mode # type: object # default value: {} # optional sync : # The synchronization file mode of the service (Not currently implemented) # \"send\" specifies one-way synchronization to the container, \"sendreceive\" specifies two-way synchronization # type: select\uff0csend/sendreceive # default value: \"send\" # optional type : send # List of files and directories to be synchronized to DevContainer # type: string[] # default value: [\".\"] # optional filePattern : - \"./src\" - \"./pkg/fff\" # List of ignored files and directories to be synchronized to DevContainer # type: string[] # default value: [] # optional ignoreFilePattern : - \".git\" - \"./build\" # Specify dev mode environment parameters # type: object[] # default value: {} # optional env : - name : DEBUG value : \"true\" - name : DOMAIN value : \"www.coding.com\" # Use env file to specify dev mode environment parameters # type: object # default value: {} # optional envFrom : envFile : - path : dev.env - path : dev.env # Ports to be forwarded to local when enter devMode # localPort:remotePort # type: string[] # default value: [] # optional portForward : - 3306:3306","title":"Nocalhost \u914d\u7f6e\u89c4\u683c"},{"location":"server/deploy-in-kubesphere-en/","text":"Quick Deployment of Nocalhost Server in KubeSphere \u00b6 KubeSphere is an application-centered multi-tenant container platform built on Kubernetes. It provides full stack IT automatic operation and simplifies the workflow of DevOps for enterprises. Kubesphere provides a user-friendly operation interface, so even the users without relevant experience can easily use it. Moreover, it provides a Helm-based application market, enabling users to easily install various Kubernetes applications through the graphical interface. This section introduces how to quickly deploy Nocalhost Server in Kubesphere, which provides a platform to assist the R & D team to manage the deployment of Nocalhost applications. Preliminaries \u00b6 Install KubeSphere \u00b6 There are two ways to install KubeSphere, install on Linux (see Install KubeSphere on Linux ) and install on the existing Kubernetes (see Install KubeSphere on Kubernetes ). Initiate App Store in KubeSphere \u00b6 Please see KubeSphere App Store Install Nocalhost Server \u00b6 Install from App Store in KubeSphere 3.2 \u00b6 Nocalhost server has been integrated in App store in Kubesphere 3.2, so you can access App Store and deploy the application in the regular way . Install through App Repository in KubeSphere 3.x \u00b6 In KubeSphere 3.x, you can deploy applications through App Repository. The instructions are as follows: Step 1: Add App Store \u00b6 First, log in KubeSphere with the enterprise administration account and enter a enterprise space. In your enterprise space, select\u300cApp Repository\u300dunder\u300cApp Management\u300d, then click \u300cAdd\u300don the page. On the pop-up window, set the name of repository to nocalhost and the URL of the app repository to https://nocalhost-helm.pkg.coding.net/nocalhost/nocalhost . Click \u300cverify\u300dto verify the URL, and then click \u300cOK\u300d after successful verification. \u26a0\ufe0f Pay attention: The URL must be pasted with the full link including https:// , otherwise the verification will fail. The app repository will be displayed in the list after it has been imported successfully, as shown below. Info To get more information about adding private repository , please see Import Helm Repository ::: Step 2: Deploy App from App Templates \u00b6 Enter the project in which you want to deploy Nocalhost Server. If no project is available, you can click \u300cProject\u300din the left column and click \u300cCreate\u300dto create a new project in the enterprise space. Assume that a project named nocalhost-server has been created. Enter the project page, click \u300cApplication\u300dunder \u300cApplication Workload\u300din the left column. Then you can click \u300cCreate\u300dto create a new application. Select \u300cFrom app templates\u300don the pop-up window. Info Install from App Store: Select applications that are built-in or uploaded separately in Helm Chart form. Install from App Templates: Select applications from private repositories and application pool in enterprise space. ::: Select the imported private app repository nocalhost from the list, then Nocalhost Server Helm Chart will be shown as below: Check \u300cApp Information\u300dand\u300cChart File\u300d, and select a version from the version list. Then click \u300cDeploy\u300d. Enter the app \u300cName\u300d, then check the app \u300cVersion\u300dand the deployment \u300cPosition\u300d. Click \u300cNext\u300d On\u300cApp Setting\u300dpage, you can edit the list file or just directly click \u300cInstall\u300d. We suggest to set service.type to ClusterIP to ensure the installation will not be affected by Kubernetes network environment. Of course, you can choose NodePort or LoadBalancer service type to expose Nocalhost Server according to your needs (Server sets no restrictions on this). Finally, wait for Nocalhost Server to create and initiate the application. You can see the application status in\u300cApplications\u300das below (the page may need to be refreshed). Step 3: Expose Nocalhost Server Service \u00b6 Click \u300cService\u300dunder \u300cApp Workload\u300din the left column. Select nocalhost-web on the page and select\u300cEdit external access\u300dfrom the drop-down menu on the right. Select a proper \u300cAccess method\u300dfor the current cloud network environment on the pop-up window and then click \u300cOK\u300dto apply it. Assume that we keep using ClusterIP access method and will use kubectl port-forward for Nocalhost Server in the following. \u276f kubectl -n nocalhost-server port-forward service/nocalhost-web 8080 :80 \u26a0\ufe0f Pay Attention: Please replace the nocalhost-server above with the Namespace of the Nocahost application you actually deployed. Using Nocalhost Server \u00b6 After Port Forward, use http://localhost:8080 to open Nocalhost Server Dashboar. Log in the admin@admin.com account with the password 123456 . Create Cluster \u00b6 Nocalhost Server is used to assist the team to manage the development environment. Therefore, we need to add the cluster first. Click \u300cCluster\u300din the left column of Nocalhost Server Dashboard, and then click \u300cAdd cluster\u300don the page. On the pop-up windows, enter \u300cCluster Name\u300dand the kubeconfig file which contains **cluster-admin** permmision for kubectl. After that, click \u300cOK\u300d. Danger The kubeconfig files that can be imported does not yet support the user proof of type exec . If you want to use this type, it is recommended to generate another ServiceAccount with sufficient permissions and then use its corresponding kubeconfig. ::: There are many ways to get the target cluster kubeconfig. For example, you can return to KubeSphere and enter the cluster page to get the kubeconfig file. Note that if the application using kubeconfig file is deployed outside the current cluster, you need to modify clusters:cluster:server to the server address of the exposed Kubernetes API. You can see the following cluster information page after it is added successfully. Create DevSpace \u00b6 Enter\u300cDevSpace\u300dand click \u300cCreate DevSpace\u300don the page. Click\u300cCreate seperate DevSpace\u300don the pop-up window. Tip To get more information about \u300cMeshSpace\u300d , please see Manage MeshSpace ::: Enter \u300cDevSpace Name\u300d(here we use demo ) on the pop-up window. Select \u300cCluster\u300dand\u300cOwner\u300d, then set \u300cOther Settings\u300das needed. After that, this seperate DevSpace will be displayed on\u300cDevSpace\u300dpage as below. Create bookinfo Demo App \u00b6 Next step is to create some deployable applications for the team. Enter\u300cApp\u300dpage and click \u300cAdd App\u300d Enter \u300cApp Name\u300don the pop-up window and fill in other information. Select Git as \u300cInstallation Source\u300d Enter https://github.com/nocalhost/bookinfo.git in\u300cGit Repo adress\u300d Select Manifest as \u300cManifest Type\u300d Leave\u300cApp Config File\u300dblank. It will use config.yaml by default. Enter manifest/templates in\u300cGit Repo relative path\u300d Tip Please see the complete bookinfo on Github and learn more details about config files. ::: Create User and Share DevSpace \u00b6 At last, we create a sample user to demonstrate how to share DevSpace. Enter\u300cUser\u300dpage and click \u300cAdd user\u300d, then fill in the required user information on the pop-up window. Click \u300cFinish\u300dafter that. Return to DevSpace and select demo that we just created. Click the brush icon to enter\u300cShared Users\u300dpage in \u300cEdit DevSpace\u300d, then click \u300cAdd Sharing\u300d Select users as needed. Note that please select the default Cooperator as permission type, the other Viewer only enables users to view DevSpace. Now, we have finished configuration on Nocalhost Server Dashboard. We will use the Nocalhost plug-in on IDE to deploy the application in the following part. Deploy bookinfo \u00b6 Here we use VS Code to deploy applications. First, you need to Install Nocalhost Plug-In in VS Code or Install Nocalhost Pulg-In in JetBrains \u3002 Open the plug-in dashboard in VS Code and click + to build the connection of clusters. Enter the address of Nocalhost Server and log in with the test user account we created before. If everything goes well, you will find the demo(nh1btih) we previously created in Nocalhost Server Dashboard. Click the rocket icon on the right side of demo , and the application list will be loaded at the top of the VS Code. You can find the bookinfo that we added before. Select this app, then the deployment of Nocalhost application in the demo space will be initated (you can just select the default branch to install). You can see the following log and pop-up window after installation. At the same time, you can open Workload to see the specific deployment information on Nocalhost plug-in dashboard. From now on, you can enter DevMode in regular way and experience a more convenient cloud native microservice development process!","title":"Quick Deployment of Nocalhost Server in KubeSphere"},{"location":"server/deploy-in-kubesphere-en/#quick-deployment-of-nocalhost-server-in-kubesphere","text":"KubeSphere is an application-centered multi-tenant container platform built on Kubernetes. It provides full stack IT automatic operation and simplifies the workflow of DevOps for enterprises. Kubesphere provides a user-friendly operation interface, so even the users without relevant experience can easily use it. Moreover, it provides a Helm-based application market, enabling users to easily install various Kubernetes applications through the graphical interface. This section introduces how to quickly deploy Nocalhost Server in Kubesphere, which provides a platform to assist the R & D team to manage the deployment of Nocalhost applications.","title":"Quick Deployment of Nocalhost Server in KubeSphere"},{"location":"server/deploy-in-kubesphere-en/#preliminaries","text":"","title":"Preliminaries"},{"location":"server/deploy-in-kubesphere-en/#install-kubesphere","text":"There are two ways to install KubeSphere, install on Linux (see Install KubeSphere on Linux ) and install on the existing Kubernetes (see Install KubeSphere on Kubernetes ).","title":"Install KubeSphere"},{"location":"server/deploy-in-kubesphere-en/#initiate-app-store-in-kubesphere","text":"Please see KubeSphere App Store","title":"Initiate App Store in KubeSphere"},{"location":"server/deploy-in-kubesphere-en/#install-nocalhost-server","text":"","title":"Install Nocalhost Server"},{"location":"server/deploy-in-kubesphere-en/#install-from-app-store-in-kubesphere-32","text":"Nocalhost server has been integrated in App store in Kubesphere 3.2, so you can access App Store and deploy the application in the regular way .","title":"Install from App Store in KubeSphere 3.2"},{"location":"server/deploy-in-kubesphere-en/#install-through-app-repository-in-kubesphere-3x","text":"In KubeSphere 3.x, you can deploy applications through App Repository. The instructions are as follows:","title":"Install through App Repository in KubeSphere 3.x"},{"location":"server/deploy-in-kubesphere-en/#step-1-add-app-store","text":"First, log in KubeSphere with the enterprise administration account and enter a enterprise space. In your enterprise space, select\u300cApp Repository\u300dunder\u300cApp Management\u300d, then click \u300cAdd\u300don the page. On the pop-up window, set the name of repository to nocalhost and the URL of the app repository to https://nocalhost-helm.pkg.coding.net/nocalhost/nocalhost . Click \u300cverify\u300dto verify the URL, and then click \u300cOK\u300d after successful verification. \u26a0\ufe0f Pay attention: The URL must be pasted with the full link including https:// , otherwise the verification will fail. The app repository will be displayed in the list after it has been imported successfully, as shown below. Info To get more information about adding private repository , please see Import Helm Repository :::","title":"Step 1: Add App Store"},{"location":"server/deploy-in-kubesphere-en/#step-2-deploy-app-from-app-templates","text":"Enter the project in which you want to deploy Nocalhost Server. If no project is available, you can click \u300cProject\u300din the left column and click \u300cCreate\u300dto create a new project in the enterprise space. Assume that a project named nocalhost-server has been created. Enter the project page, click \u300cApplication\u300dunder \u300cApplication Workload\u300din the left column. Then you can click \u300cCreate\u300dto create a new application. Select \u300cFrom app templates\u300don the pop-up window. Info Install from App Store: Select applications that are built-in or uploaded separately in Helm Chart form. Install from App Templates: Select applications from private repositories and application pool in enterprise space. ::: Select the imported private app repository nocalhost from the list, then Nocalhost Server Helm Chart will be shown as below: Check \u300cApp Information\u300dand\u300cChart File\u300d, and select a version from the version list. Then click \u300cDeploy\u300d. Enter the app \u300cName\u300d, then check the app \u300cVersion\u300dand the deployment \u300cPosition\u300d. Click \u300cNext\u300d On\u300cApp Setting\u300dpage, you can edit the list file or just directly click \u300cInstall\u300d. We suggest to set service.type to ClusterIP to ensure the installation will not be affected by Kubernetes network environment. Of course, you can choose NodePort or LoadBalancer service type to expose Nocalhost Server according to your needs (Server sets no restrictions on this). Finally, wait for Nocalhost Server to create and initiate the application. You can see the application status in\u300cApplications\u300das below (the page may need to be refreshed).","title":"Step 2: Deploy App from App Templates"},{"location":"server/deploy-in-kubesphere-en/#step-3-expose-nocalhost-server-service","text":"Click \u300cService\u300dunder \u300cApp Workload\u300din the left column. Select nocalhost-web on the page and select\u300cEdit external access\u300dfrom the drop-down menu on the right. Select a proper \u300cAccess method\u300dfor the current cloud network environment on the pop-up window and then click \u300cOK\u300dto apply it. Assume that we keep using ClusterIP access method and will use kubectl port-forward for Nocalhost Server in the following. \u276f kubectl -n nocalhost-server port-forward service/nocalhost-web 8080 :80 \u26a0\ufe0f Pay Attention: Please replace the nocalhost-server above with the Namespace of the Nocahost application you actually deployed.","title":"Step 3: Expose Nocalhost Server Service"},{"location":"server/deploy-in-kubesphere-en/#using-nocalhost-server","text":"After Port Forward, use http://localhost:8080 to open Nocalhost Server Dashboar. Log in the admin@admin.com account with the password 123456 .","title":"Using Nocalhost Server"},{"location":"server/deploy-in-kubesphere-en/#create-cluster","text":"Nocalhost Server is used to assist the team to manage the development environment. Therefore, we need to add the cluster first. Click \u300cCluster\u300din the left column of Nocalhost Server Dashboard, and then click \u300cAdd cluster\u300don the page. On the pop-up windows, enter \u300cCluster Name\u300dand the kubeconfig file which contains **cluster-admin** permmision for kubectl. After that, click \u300cOK\u300d. Danger The kubeconfig files that can be imported does not yet support the user proof of type exec . If you want to use this type, it is recommended to generate another ServiceAccount with sufficient permissions and then use its corresponding kubeconfig. ::: There are many ways to get the target cluster kubeconfig. For example, you can return to KubeSphere and enter the cluster page to get the kubeconfig file. Note that if the application using kubeconfig file is deployed outside the current cluster, you need to modify clusters:cluster:server to the server address of the exposed Kubernetes API. You can see the following cluster information page after it is added successfully.","title":"Create Cluster"},{"location":"server/deploy-in-kubesphere-en/#create-devspace","text":"Enter\u300cDevSpace\u300dand click \u300cCreate DevSpace\u300don the page. Click\u300cCreate seperate DevSpace\u300don the pop-up window. Tip To get more information about \u300cMeshSpace\u300d , please see Manage MeshSpace ::: Enter \u300cDevSpace Name\u300d(here we use demo ) on the pop-up window. Select \u300cCluster\u300dand\u300cOwner\u300d, then set \u300cOther Settings\u300das needed. After that, this seperate DevSpace will be displayed on\u300cDevSpace\u300dpage as below.","title":"Create DevSpace"},{"location":"server/deploy-in-kubesphere-en/#create-bookinfo-demo-app","text":"Next step is to create some deployable applications for the team. Enter\u300cApp\u300dpage and click \u300cAdd App\u300d Enter \u300cApp Name\u300don the pop-up window and fill in other information. Select Git as \u300cInstallation Source\u300d Enter https://github.com/nocalhost/bookinfo.git in\u300cGit Repo adress\u300d Select Manifest as \u300cManifest Type\u300d Leave\u300cApp Config File\u300dblank. It will use config.yaml by default. Enter manifest/templates in\u300cGit Repo relative path\u300d Tip Please see the complete bookinfo on Github and learn more details about config files. :::","title":"Create bookinfo Demo App"},{"location":"server/deploy-in-kubesphere-en/#create-user-and-share-devspace","text":"At last, we create a sample user to demonstrate how to share DevSpace. Enter\u300cUser\u300dpage and click \u300cAdd user\u300d, then fill in the required user information on the pop-up window. Click \u300cFinish\u300dafter that. Return to DevSpace and select demo that we just created. Click the brush icon to enter\u300cShared Users\u300dpage in \u300cEdit DevSpace\u300d, then click \u300cAdd Sharing\u300d Select users as needed. Note that please select the default Cooperator as permission type, the other Viewer only enables users to view DevSpace. Now, we have finished configuration on Nocalhost Server Dashboard. We will use the Nocalhost plug-in on IDE to deploy the application in the following part.","title":"Create User and Share DevSpace"},{"location":"server/deploy-in-kubesphere-en/#deploy-bookinfo","text":"Here we use VS Code to deploy applications. First, you need to Install Nocalhost Plug-In in VS Code or Install Nocalhost Pulg-In in JetBrains \u3002 Open the plug-in dashboard in VS Code and click + to build the connection of clusters. Enter the address of Nocalhost Server and log in with the test user account we created before. If everything goes well, you will find the demo(nh1btih) we previously created in Nocalhost Server Dashboard. Click the rocket icon on the right side of demo , and the application list will be loaded at the top of the VS Code. You can find the bookinfo that we added before. Select this app, then the deployment of Nocalhost application in the demo space will be initated (you can just select the default branch to install). You can see the following log and pop-up window after installation. At the same time, you can open Workload to see the specific deployment information on Nocalhost plug-in dashboard. From now on, you can enter DevMode in regular way and experience a more convenient cloud native microservice development process!","title":"Deploy bookinfo"},{"location":"server/deploy-in-kubesphere/","text":"\u5728 KubeSphere \u4e2d\u5feb\u901f\u90e8\u7f72 Nocalhost Server \u00b6 KubeSphere \u662f\u5728 Kubernetes \u4e4b\u4e0a\u6784\u5efa\u7684\u4ee5\u5e94\u7528\u4e3a\u4e2d\u5fc3\u7684\u591a\u79df\u6237\u5bb9\u5668\u5e73\u53f0\uff0c\u63d0\u4f9b\u5168\u6808\u7684 IT \u81ea\u52a8\u5316\u8fd0\u7ef4\u7684\u80fd\u529b\uff0c\u7b80\u5316\u4f01\u4e1a\u7684 DevOps \u5de5\u4f5c\u6d41\u3002 \u200b KubeSphere \u63d0\u4f9b\u4e86\u8fd0\u7ef4\u53cb\u597d\u7684\u5411\u5bfc\u5f0f\u64cd\u4f5c\u754c\u9762\uff0c\u5373\u4fbf\u662f Kubernetes \u7ecf\u9a8c\u5e76\u4e0d\u4e30\u5bcc\u7684\u7528\u6237\uff0c\u4e5f\u80fd\u76f8\u5bf9\u8f7b\u677e\u7684\u4e0a\u624b\u5f00\u59cb\u7ba1\u7406\u548c\u4f7f\u7528\u3002\u5b83\u63d0\u4f9b\u4e86\u57fa\u4e8e Helm \u7684\u5e94\u7528\u5e02\u573a\uff0c\u53ef\u4ee5\u5728\u56fe\u5f62\u5316\u754c\u9762\u4e0b\u975e\u5e38\u8f7b\u677e\u5730\u5b89\u88c5\u5404\u79cd Kubernetes \u5e94\u7528\u3002 \u200b \u672c\u6587\u5c06\u4ecb\u7ecd\u5982\u4f55\u5728 KubeSphere \u4e2d\u5feb\u901f\u90e8\u7f72 Nocalhost Server \uff0c\u7528\u4e8e\u63d0\u4f9b\u4e00\u4e2a\u5e2e\u52a9\u7814\u53d1\u56e2\u961f\u7edf\u4e00\u7ba1\u7406 Nocalhost \u5e94\u7528\u90e8\u7f72\u7684\u7ba1\u7406\u5e73\u53f0\u3002 \u200b \u524d\u63d0\u6761\u4ef6 \u00b6 \u5b89\u88c5 KubeSphere \u00b6 \u5b89\u88c5 KubeSphere \u6709\u4e24\u79cd\u65b9\u6cd5\u3002\u4e00\u662f\u5728 Linux \u4e0a\u76f4\u63a5\u5b89\u88c5\uff0c\u53ef\u4ee5\u53c2\u8003\u6587\u6863\uff1a \u5728 Linux \u5b89\u88c5 KubeSphere \uff1b \u4e8c\u662f\u5728\u5df2\u6709 Kubernetes \u4e2d\u5b89\u88c5\uff0c\u53ef\u4ee5\u53c2\u8003\u6587\u6863\uff1a \u5728 Kubernetes \u5b89\u88c5 KubeSphere \u3002 \u200b \u5728 KubeSphere \u4e2d\u542f\u7528\u5e94\u7528\u5546\u5e97 \u00b6 \u5728 KubeSphere \u4e2d\u542f\u7528\u5e94\u7528\u5546\u5e97\u53ef\u4ee5\u53c2\u8003\u6587\u6863\uff1a KubeSphere \u5e94\u7528\u5546\u5e97 \u3002 \u5b89\u88c5 Nocalhost Server \u00b6 \u5728 KubeSphere 3.2 \u4e2d\u4ece\u5e94\u7528\u5546\u5e97\u5b89\u88c5 \u00b6 Nocalhost Server \u5df2\u7ecf\u96c6\u6210\u5728\u4e86 KubeSphere 3.2 \u7684\u5e94\u7528\u5546\u5e97\u4e2d\u4e86\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5e94\u7528\u5546\u5e97\u5e76\u6309 \u5e38\u89c4\u65b9\u5f0f \u8fdb\u884c\u5e94\u7528\u90e8\u7f72\u3002 \u5728 KubeSphere 3.x \u4e2d\u901a\u8fc7\u5e94\u7528\u4ed3\u5e93\u5b89\u88c5 \u00b6 \u5728 KubeSphere 3.x \u4e2d\uff0c\u60a8\u53ef\u4ee5 \u901a\u8fc7\u5e94\u7528\u4ed3\u5e93\u6765\u90e8\u7f72\u5e94\u7528 \uff0c\u4e0b\u9762\u5206\u6b65\u4ecb\u7ecd\u5177\u4f53\u7684\u64cd\u4f5c\u8fc7\u7a0b\u3002 \u6b65\u9aa4 1\uff1a\u6dfb\u52a0\u5e94\u7528\u5546\u5e97 \u00b6 \u9996\u5148\uff0c\u4f7f\u7528\u5177\u5907\u4f01\u4e1a\u7a7a\u95f4\u7ba1\u7406\u6743\u9650\u7684\u8d26\u53f7\u767b\u9646 KubeSphere \u5e76\u8fdb\u5165\u60a8\u9009\u5b9a\u7684\u4e00\u4e2a\u4f01\u4e1a\u7a7a\u95f4\uff0c\u5728\u60a8\u7684\u4f01\u4e1a\u7a7a\u95f4\u4e2d\uff0c\u8fdb\u5165\u300c\u5e94\u7528\u7ba1\u7406\u300d\u4e0b\u7684\u300c\u5e94\u7528\u4ed3\u5e93\u300d\u9875\u9762\uff0c\u5e76\u70b9\u51fb\u300c\u6dfb\u52a0\u4ed3\u5e93\u300d\u3002 \u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\uff0c\u53ef\u5c06\u5e94\u7528\u4ed3\u5e93\u540d\u79f0\u8bbe\u7f6e\u4e3a nocalhost \uff0c\u5c06\u5e94\u7528\u4ed3\u5e93\u7684 URL \u8bbe\u7f6e\u4e3a https://nocalhost-helm.pkg.coding.net/nocalhost/nocalhost \uff0c\u70b9\u51fb\u300c\u9a8c\u8bc1\u300d\u5bf9 URL \u8fdb\u884c\u9a8c\u8bc1\uff0c\u9a8c\u8bc1\u901a\u8fc7\u540e\u518d\u70b9\u51fb\u300c\u786e\u5b9a\u300d\u3002 \u26a0\ufe0f \u6ce8\u610f\uff1aURL \u5fc5\u987b\u8d34\u5168\u94fe\u63a5\uff0c\u4e0d\u80fd\u7f3a\u5931 https:// \u8fd9\u90e8\u5206\uff0c\u5426\u5219\u4f1a\u9a8c\u8bc1\u5931\u8d25 \u5e94\u7528\u4ed3\u5e93\u5bfc\u5165\u6210\u529f\u540e\u4f1a\u663e\u793a\u5728\u5982\u4e0b\u56fe\u6240\u793a\u7684\u5217\u8868\u4e2d\u3002 Info \u6709\u5173\u6dfb\u52a0\u79c1\u6709\u4ed3\u5e93\u65f6\u7684\u66f4\u591a\u53c2\u6570\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u5bfc\u5165 Helm \u4ed3\u5e93 \u3002 ::: \u6b65\u9aa4 2\uff1a\u4ece\u5e94\u7528\u6a21\u7248\u90e8\u7f72\u5e94\u7528 \u00b6 \u8fdb\u5165\u60a8\u9009\u5b9a\u7684\u7528\u4e8e\u90e8\u7f72 Nocalhost Server \u7684\u9879\u76ee\uff0c\u5982\u679c\u8fd8\u6ca1\u6709\u53ef\u7528\u9879\u76ee\uff0c\u53ef\u4ee5\u76f4\u63a5\u6253\u5f00\u4f01\u4e1a\u7a7a\u95f4\u9875\u9762\u4e2d\u7684\u300c\u9879\u76ee\u300d\u680f\u76ee\uff0c\u300c\u521b\u5efa\u300d\u4e00\u4e2a\u65b0\u7684\u9879\u76ee\u3002 \u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a nocalhost-server \u7684\u9879\u76ee\uff0c\u8fdb\u5165\u9879\u76ee\u754c\u9762\uff0c\u8fdb\u5165\u300c\u5e94\u7528\u8d1f\u8f7d\u300d\u4e0b\u7684\u300c\u5e94\u7528\u300d\u9875\u9762\uff0c\u518d\u70b9\u51fb\u300c\u521b\u5efa\u300d\u65b0\u5e94\u7528\u3002 \u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\u9009\u62e9\u300c\u4ece\u5e94\u7528\u6a21\u677f\u300d\u521b\u5efa\u3002 Info \u4ece\u5e94\u7528\u5546\u5e97 \uff1a\u9009\u62e9\u5185\u7f6e\u7684\u5e94\u7528\u548c\u4ee5 Helm Chart \u5f62\u5f0f\u5355\u72ec\u4e0a\u4f20\u7684\u5e94\u7528\u3002 \u4ece\u5e94\u7528\u6a21\u677f \uff1a\u4ece\u79c1\u6709\u5e94\u7528\u4ed3\u5e93\u548c\u4f01\u4e1a\u7a7a\u95f4\u5e94\u7528\u6c60\u9009\u62e9\u5e94\u7528\u3002 \u200b \u4ece\u4e0b\u62c9\u5217\u8868\u4e2d\u9009\u62e9\u4e4b\u524d\u6dfb\u52a0\u7684\u79c1\u6709\u5e94\u7528\u4ed3\u5e93 nocalhost \uff0c\u53ef\u4ee5\u770b\u5230\u4ed3\u5e93\u4e2d\u7684 Nocalhost Server Helm Chart \u5982\u4e0b\u663e\u793a\u3002 \u200b \u60a8\u53ef\u4ee5\u67e5\u770b\u300c\u5e94\u7528\u4fe1\u606f\u300d\u548c\u300cChart \u6587\u4ef6\u300d\uff0c\u5728\u7248\u672c\u4e0b\u62c9\u5217\u8868\u4e2d\u9009\u62e9\u7248\u672c\uff0c\u7136\u540e\u70b9\u51fb\u300c\u90e8\u7f72\u300d\u3002 \u200b \u8bbe\u7f6e\u5e94\u7528\u300c\u540d\u79f0\u300d\uff0c\u786e\u8ba4\u5e94\u7528\u300c\u7248\u672c\u300d\u548c\u90e8\u7f72\u300c\u4f4d\u7f6e\u300d\uff0c\u70b9\u51fb\u300c\u4e0b\u4e00\u6b65\u300d\u3002 \u200b \u5728\u300c\u5e94\u7528\u8bbe\u7f6e\u300d\u6807\u7b7e\u9875\uff0c\u60a8\u53ef\u4ee5\u624b\u52a8\u7f16\u8f91\u6e05\u5355\u6587\u4ef6\u6216\u76f4\u63a5\u70b9\u51fb\u300c\u5b89\u88c5\u300d\u3002\u5efa\u8bae\u628a service.type \u8bbe\u7f6e\u4e3a ClusterIP \uff0c\u4ee5\u786e\u4fdd\u5b89\u88c5\u4e0d\u53d7 Kubernetes \u7f51\u7edc\u73af\u5883\u5f71\u54cd\u3002\u5f53\u7136\uff0c\u60a8\u5b8c\u5168\u53ef\u4ee5\u7ed3\u5408\u81ea\u8eab\u7814\u53d1\u73af\u5883\u6765\u9009\u62e9\u4f7f\u7528 NodePort \u6216 LoadBalancer \u670d\u52a1\u7c7b\u578b\u6765\u66b4\u9732 Nocalhost Server\uff08Server \u672c\u8eab\u5bf9\u6b64\u5e76\u65e0\u9650\u5236\uff09\u3002 \u200b \u6700\u540e\u7b49\u5f85 Nocalhost Server \u521b\u5efa\u5b8c\u6210\u5e76\u5f00\u59cb\u8fd0\u884c\uff0c\u53ef\u4ee5\u5728\u300c\u5e94\u7528\u300d\u4e2d\u770b\u5230\u5982\u4e0b\u5e94\u7528\u72b6\u6001\uff08\u53ef\u80fd\u9700\u8981\u5237\u65b0\u4e00\u4e0b\u9875\u9762\uff09\u3002 \u200b \u6b65\u9aa4 3\uff1a\u66b4\u9732 Nocalhost Server \u670d\u52a1 \u00b6 \u8fdb\u5165\u300c\u5e94\u7528\u8d1f\u8f7d\u300d\u4e0b\u7684\u300c\u670d\u52a1\u300d\u9875\u9762\uff0c\u9009\u62e9 nocalhost-web \u670d\u52a1\uff0c\u5728\u6700\u53f3\u4fa7\u7684\u62c9\u4e0b\u83dc\u5355\u4e2d\u9009\u62e9\u300c\u7f16\u8f91\u5916\u90e8\u8bbf\u95ee\u300d\u3002 \u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\u9009\u62e9\u5408\u9002\u5f53\u524d\u4e91\u7aef\u7f51\u7edc\u73af\u5883\u7684\u5916\u7f51\u300c\u8bbf\u95ee\u65b9\u5f0f\u300d\uff0c\u7136\u540e\u70b9\u51fb\u300c\u786e\u5b9a\u300d\u5373\u53ef\u5e94\u7528\u670d\u52a1\u914d\u7f6e\u3002 \u672c\u6587\u5047\u8bbe\u6211\u4eec\u4ecd\u7136\u4fdd\u6301 ClusterIP \u7684\u8bbf\u95ee\u65b9\u5f0f\uff0c\u901a\u8fc7 kubectl port-forward \u6765\u8fdb\u884c\u540e\u7eed\u7684 Nocalhost Server \u4f7f\u7528\u3002 \u276f kubectl -n nocalhost-server port-forward service/nocalhost-web 8080 :80 \u26a0\ufe0f \u6ce8\u610f\uff1a\u8fd9\u91cc\u7684 nocalhost-server \u8bf7\u66ff\u6362\u4e3a\u60a8\u5b9e\u9645\u4f7f\u7528\u7684\u90e8\u7f72\u4e86 Nocalhost \u5e94\u7528\u7684 Namespace \u4f7f\u7528 Nocalhost Server \u00b6 \u5b8c\u6210 Port Forward \u540e\u53ef\u4f7f\u7528 http://localhost:8080 \u6765\u6253\u5f00 Nocalhost Server Dashboard \u9875\u9762\uff1b\u4f7f\u7528 admin@admin.com \u53ca\u5bc6\u7801 123456 \u8fdb\u884c\u767b\u9646\u3002 \u200b \u521b\u5efa\u96c6\u7fa4 \u00b6 Nocalhost Server \u591a\u7528\u4e8e\u7ba1\u7406\u6574\u4e2a\u56e2\u961f\u7684 Nocalhost \u7814\u53d1\u73af\u5883\uff0c\u56e0\u6b64\u6211\u4eec\u9996\u5148\u9700\u8981\u6dfb\u52a0\u53ef\u8fdb\u884c\u7ba1\u7406\u7684\u96c6\u7fa4\u3002 \u200b \u5728 Nocalhost Server Dashboard \u4e2d\u9009\u62e9\u5de6\u4fa7\u83dc\u5355\u5217\u8868\u4e2d\u7684\u300c\u96c6\u7fa4\u300d\uff0c\u8fdb\u5165\u9875\u9762\u540e\u9009\u62e9\u300c\u6dfb\u52a0\u96c6\u7fa4\u300d\u3002 \u200b \u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\u8f93\u5165\u300c\u96c6\u7fa4\u540d\u79f0\u300d\uff0c\u5e76\u5f55\u5165 kubectl \u53ef\u7528\u7684\u3001 \u5177\u5907 ** **cluster-admin** \u6743\u9650**\u7684 kubeconfig \u6587\u4ef6\u540e\u300c\u786e\u8ba4\u300d\u3002 \u200b Danger \u76ee\u524d\u53ef\u5bfc\u5165\u7684 kubeconfig \u6587\u4ef6\u5185\u5bb9\u8fd8\u4e0d\u652f\u6301 exec \u7c7b\u578b\u7684\u7528\u6237\u51ed\u8bc1\uff0c\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f\u8fd9\u91cc\u51ed\u8bc1\uff0c\u5efa\u8bae\u60a8\u53e6\u5916\u751f\u6210\u4e00\u4e2a\u5177\u6709\u8db3\u591f\u6743\u9650\u7684 ServiceAccount \u5e76\u4f7f\u7528\u5176\u5bf9\u5e94\u7684 kubeconfig\u3002 \u8fd9\u91cc\u6709\u591a\u79cd\u65b9\u5f0f\u83b7\u53d6\u76ee\u6807\u96c6\u7fa4\u7684 kubeconfig\uff0c\u4f8b\u5982\u60a8\u53ef\u4ee5\u8fd4\u56de KubeSphere \u5e76\u8fdb\u5165\u96c6\u7fa4\u9875\u9762\uff0c\u83b7\u53d6\u5f53\u524d\u96c6\u7fa4\u7684 kubeconfig \u6587\u4ef6\u3002\u6ce8\u610f\uff0c\u5982\u679c\u4f7f\u7528 kubeconfig \u6587\u4ef6\u7684\u5e94\u7528\u90e8\u7f72\u5728\u5f53\u524d\u96c6\u7fa4\u5916\uff0c\u60a8\u9700\u8981\u5c06 clusters:cluster:server \u53c2\u6570\u7684\u503c\u4fee\u6539\u4e3a**\u5bf9\u5916\u66b4\u9732\u7684 Kubernetes API \u670d\u52a1\u5668\u5730\u5740**\u3002 \u200b \u6dfb\u52a0\u6210\u529f\u540e\uff0c\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u7684\u96c6\u7fa4\u4fe1\u606f\u9875\u9762\u3002 \u521b\u5efa\u5f00\u53d1\u7a7a\u95f4\uff08DevSpace\uff09 \u00b6 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8fdb\u5165\u300c\u5f00\u53d1\u7a7a\u95f4\u300d\u9875\u9762\uff0c\u9009\u62e9\u300c\u521b\u5efa\u5f00\u53d1\u7a7a\u95f4\u300d\uff0c\u5e76\u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\u9009\u62e9\u300c\u521b\u5efa\u9694\u79bb\u5f00\u53d1\u7a7a\u95f4\u300d\u3002 ::: \u5173\u4e8e\u300c\u5171\u4eab\u5f00\u53d1\u7a7a\u95f4\u300d\uff0c\u5373 MeshSpace\uff0c\u53ef\u53c2\u8003 Manage MeshSpace \u8fd9\u7bc7\u5b98\u65b9\u4ecb\u7ecd\u3002 ::: \u200b \u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\uff0c\u53ef\u4ee5\u586b\u5199\u300c\u5f00\u53d1\u7a7a\u95f4\u540d\u79f0\u300d\uff08\u8fd9\u91cc\u8bbe\u7f6e\u4e3a demo \uff09\uff0c\u9009\u62e9\u300c\u96c6\u7fa4\u300d\u548c\u5176\u300c\u6240\u6709\u8005\u300d\uff0c\u5e76\u6309\u9700\u8fdb\u884c\u300c\u5176\u5b83\u8bbe\u7f6e\u300d\u3002 \u521b\u5efa\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u5728\u300c\u5f00\u53d1\u7a7a\u95f4\u300d\u9875\u9762\u770b\u5230\u5df2\u521b\u5efa\u7684\u9694\u79bb\u5f00\u53d1\u7a7a\u95f4\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u200b \u521b\u5efa bookinfo \u6837\u4f8b\u5e94\u7528 \u00b6 \u4e0b\u4e00\u6b65\u6211\u4eec\u5f00\u59cb\u4e3a\u56e2\u961f\u521b\u5efa\u4e00\u4e9b\u53ef\u90e8\u7f72\u7684\u5e94\u7528\uff0c\u5148\u8fdb\u5165\u300c\u5e94\u7528\u300d\u9875\u9762\uff0c\u9009\u62e9\u300c\u6dfb\u52a0\u5e94\u7528\u300d\u3002 \u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\u586b\u5199\u300c\u5e94\u7528\u540d\u79f0\u300d\uff0c\u540c\u65f6\u6211\u4eec\u7ee7\u7eed\u586b\u5199\u5176\u5b83\u4fe1\u606f\uff1a \u9009\u62e9 Git \u4f5c\u4e3a\u300c\u5b89\u88c5\u6765\u6e90\u300d \u8f93\u5165 https://github.com/nocalhost/bookinfo.git \u4f5c\u4e3a\u300cGit \u4ed3\u5e93\u5730\u5740\u300d \u9009\u62e9 Manifest \u4f5c\u4e3a\u300cManifest \u7c7b\u578b\u300d \u300c\u5e94\u7528\u914d\u7f6e\u6587\u4ef6\u300d\u7559\u7a7a\uff0c\u5373\u4f7f\u7528 config.yaml \u300cGit \u4ed3\u5e93\u7684\u76f8\u5bf9\u8def\u5f84\u300d\u586b\u5165 manifest/templates Tip \u53ef\u8bbf\u95ee GitHub \u67e5\u770b\u5b8c\u6574\u7684 bookinfo \u6837\u4f8b\u5e94\u7528\u4ed3\u5e93\uff0c\u4e86\u89e3\u8be6\u7ec6\u7684\u914d\u7f6e\u6587\u4ef6\u7ec6\u8282\u3002 \u200b \u521b\u5efa\u7528\u6237\u5e76\u5171\u4eab\u5f00\u53d1\u7a7a\u95f4 \u00b6 \u6700\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u6837\u4f8b\u7528\u6237\u6765\u6f14\u793a\u5982\u679c\u5171\u4eab\u5f00\u53d1\u7a7a\u95f4\u3002\u8fdb\u5165\u5230\u300c\u7528\u6237\u300d\u9875\u9762\u540e\uff0c\u70b9\u51fb\u300c\u6dfb\u52a0\u7528\u6237\u300d\uff0c\u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\u586b\u5165\u5fc5\u987b\u7684\u7528\u6237\u4fe1\u606f\u540e\u300c\u5b8c\u6210\u300d\u6dfb\u52a0\u3002 \u200b \u7136\u540e\u6211\u4eec\u56de\u5230\u5f00\u53d1\u7a7a\u95f4\uff0c\u9009\u62e9\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u7684 demo \u7a7a\u95f4\uff0c\u70b9\u51fb\u753b\u7b14\u56fe\u6807\u8fdb\u5165\u300c\u7f16\u8f91\u5f00\u53d1\u7a7a\u95f4\u300d\u7684\u300c\u5171\u4eab\u7528\u6237\u300d\u6807\u7b7e\u9875\uff0c\u5f00\u59cb\u300c\u6dfb\u52a0\u5171\u4eab\u300d\u3002 \u200b \u9009\u62e9\u9700\u8981\u6dfb\u52a0\u7684\u7528\u6237\uff0c\u5e76\u6ce8\u610f\u9009\u62e9\u9ed8\u8ba4\u7684 Cooperator \u534f\u4f5c\u8005\u6743\u9650\uff0c\u53e6\u4e00\u4e2a Viewer \u89c2\u5bdf\u8005\u6743\u9650\u7684\u7528\u6237\u53ea\u80fd\u6d4f\u89c8\u5f00\u53d1\u7a7a\u95f4\u3002 \u81f3\u6b64\uff0c\u6211\u4eec\u5728 Nocalhost Server Dashboard \u4e2d\u7684\u914d\u7f6e\u5c31\u544a\u4e00\u6bb5\u843d\uff0c\u4e0b\u9762\u5c06\u8fdb\u5165 IDE \u5229\u7528 Nocalhost \u63d2\u4ef6\u6267\u884c\u5e94\u7528\u7684\u90e8\u7f72\u3002 \u200b \u6267\u884c bookinfo \u5e94\u7528\u90e8\u7f72 \u00b6 \u8fd9\u91cc\u6211\u4eec\u5c06\u4f7f\u7528 VS Code \u6267\u884c\u5e94\u7528\u7684\u90e8\u7f72\uff0c\u9996\u5148\u9700\u8981 \u5728 VS Code \u4e2d\u5b89\u88c5 Nocalhost \u63d2\u4ef6 \u3002 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 JetBrains \u53ca\u5176 Nocalhost \u63d2\u4ef6 \u3002 \u5728 VS Code \u4e2d\u6253\u5f00 Nocalhost \u63d2\u4ef6\u9762\u677f\uff0c\u70b9\u51fb + \u53f7\u521b\u5efa\u96c6\u7fa4\u8fde\u63a5\uff0c\u586b\u5165 Nocalhost Server \u5730\u5740\uff0c\u5e76\u4f7f\u7528\u524d\u9762\u521b\u5efa\u7684\u666e\u901a\u7528\u6237 test \u7684\u7528\u6237\u540d\u53ca\u5bc6\u7801\u8fdb\u884c\u767b\u5f55\u3002 \u521b\u5efa\u6210\u529f\u53ef\u4ee5\u770b\u5230\u4e4b\u524d\u5728 Nocalhost Server Dashboard \u4e2d\u521b\u5efa\u7684\u5f00\u53d1\u7a7a\u95f4 demo(nh1btih) \u3002 \u70b9\u51fb demo \u7a7a\u95f4\u53f3\u4fa7\u7684\u706b\u7bad\u56fe\u6807\uff0c\u4f1a\u5728 VS Code \u7f16\u8f91\u5668\u9876\u90e8\u52a0\u8f7d\u5e94\u7528\u5217\u8868\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u53ef\u4ee5\u770b\u5230\u4e4b\u524d\u6dfb\u52a0\u7684 bookinfo \u5e94\u7528\u3002 \u200b \u9009\u62e9\u8be5\u5e94\u7528\u5373\u4f1a\u542f\u52a8\u5728 demo \u7a7a\u95f4\u4e2d\u7684 Nocalhost \u5e94\u7528\u90e8\u7f72\u8fc7\u7a0b\uff08\u9009\u62e9\u5e94\u7528\u6e90\u7684\u9ed8\u8ba4\u5206\u652f\u8fdb\u884c\u5b89\u88c5\u5373\u53ef\uff09\uff0c\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u4f1a\u51fa\u73b0\u5982\u4e0b\u65e5\u5fd7\u548c\u5f39\u7a97\u63d0\u793a\uff1a \u540c\u65f6\u5728 Nocalhost \u63d2\u4ef6\u9762\u677f\u4e2d\u4e5f\u53ef\u4ee5\u5c55\u5f00 Workload \u770b\u5230\u5177\u4f53\u7684\u90e8\u7f72\u5185\u5bb9\u3002 \u518d\u5f80\u540e\u5c31\u53ef\u4ee5\u4f9d\u7167 Nocalhost \u5e38\u89c4\u65b9\u5f0f \u8fdb\u5165\u5f00\u53d1\u6a21\u5f0f \uff0c\u4f53\u9a8c\u66f4\u4fbf\u6377\u7684\u4e91\u539f\u751f\u5fae\u670d\u52a1\u5f00\u53d1\u8fc7\u7a0b\uff01","title":"kubesphere\u91cc\u90e8\u7f72"},{"location":"server/deploy-in-kubesphere/#kubesphere-nocalhost-server","text":"KubeSphere \u662f\u5728 Kubernetes \u4e4b\u4e0a\u6784\u5efa\u7684\u4ee5\u5e94\u7528\u4e3a\u4e2d\u5fc3\u7684\u591a\u79df\u6237\u5bb9\u5668\u5e73\u53f0\uff0c\u63d0\u4f9b\u5168\u6808\u7684 IT \u81ea\u52a8\u5316\u8fd0\u7ef4\u7684\u80fd\u529b\uff0c\u7b80\u5316\u4f01\u4e1a\u7684 DevOps \u5de5\u4f5c\u6d41\u3002 \u200b KubeSphere \u63d0\u4f9b\u4e86\u8fd0\u7ef4\u53cb\u597d\u7684\u5411\u5bfc\u5f0f\u64cd\u4f5c\u754c\u9762\uff0c\u5373\u4fbf\u662f Kubernetes \u7ecf\u9a8c\u5e76\u4e0d\u4e30\u5bcc\u7684\u7528\u6237\uff0c\u4e5f\u80fd\u76f8\u5bf9\u8f7b\u677e\u7684\u4e0a\u624b\u5f00\u59cb\u7ba1\u7406\u548c\u4f7f\u7528\u3002\u5b83\u63d0\u4f9b\u4e86\u57fa\u4e8e Helm \u7684\u5e94\u7528\u5e02\u573a\uff0c\u53ef\u4ee5\u5728\u56fe\u5f62\u5316\u754c\u9762\u4e0b\u975e\u5e38\u8f7b\u677e\u5730\u5b89\u88c5\u5404\u79cd Kubernetes \u5e94\u7528\u3002 \u200b \u672c\u6587\u5c06\u4ecb\u7ecd\u5982\u4f55\u5728 KubeSphere \u4e2d\u5feb\u901f\u90e8\u7f72 Nocalhost Server \uff0c\u7528\u4e8e\u63d0\u4f9b\u4e00\u4e2a\u5e2e\u52a9\u7814\u53d1\u56e2\u961f\u7edf\u4e00\u7ba1\u7406 Nocalhost \u5e94\u7528\u90e8\u7f72\u7684\u7ba1\u7406\u5e73\u53f0\u3002 \u200b","title":"\u5728 KubeSphere \u4e2d\u5feb\u901f\u90e8\u7f72 Nocalhost Server"},{"location":"server/deploy-in-kubesphere/#_1","text":"","title":"\u524d\u63d0\u6761\u4ef6"},{"location":"server/deploy-in-kubesphere/#kubesphere","text":"\u5b89\u88c5 KubeSphere \u6709\u4e24\u79cd\u65b9\u6cd5\u3002\u4e00\u662f\u5728 Linux \u4e0a\u76f4\u63a5\u5b89\u88c5\uff0c\u53ef\u4ee5\u53c2\u8003\u6587\u6863\uff1a \u5728 Linux \u5b89\u88c5 KubeSphere \uff1b \u4e8c\u662f\u5728\u5df2\u6709 Kubernetes \u4e2d\u5b89\u88c5\uff0c\u53ef\u4ee5\u53c2\u8003\u6587\u6863\uff1a \u5728 Kubernetes \u5b89\u88c5 KubeSphere \u3002 \u200b","title":"\u5b89\u88c5 KubeSphere"},{"location":"server/deploy-in-kubesphere/#kubesphere_1","text":"\u5728 KubeSphere \u4e2d\u542f\u7528\u5e94\u7528\u5546\u5e97\u53ef\u4ee5\u53c2\u8003\u6587\u6863\uff1a KubeSphere \u5e94\u7528\u5546\u5e97 \u3002","title":"\u5728 KubeSphere \u4e2d\u542f\u7528\u5e94\u7528\u5546\u5e97"},{"location":"server/deploy-in-kubesphere/#nocalhost-server","text":"","title":"\u5b89\u88c5 Nocalhost Server"},{"location":"server/deploy-in-kubesphere/#kubesphere-32","text":"Nocalhost Server \u5df2\u7ecf\u96c6\u6210\u5728\u4e86 KubeSphere 3.2 \u7684\u5e94\u7528\u5546\u5e97\u4e2d\u4e86\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5e94\u7528\u5546\u5e97\u5e76\u6309 \u5e38\u89c4\u65b9\u5f0f \u8fdb\u884c\u5e94\u7528\u90e8\u7f72\u3002","title":"\u5728 KubeSphere 3.2 \u4e2d\u4ece\u5e94\u7528\u5546\u5e97\u5b89\u88c5"},{"location":"server/deploy-in-kubesphere/#kubesphere-3x","text":"\u5728 KubeSphere 3.x \u4e2d\uff0c\u60a8\u53ef\u4ee5 \u901a\u8fc7\u5e94\u7528\u4ed3\u5e93\u6765\u90e8\u7f72\u5e94\u7528 \uff0c\u4e0b\u9762\u5206\u6b65\u4ecb\u7ecd\u5177\u4f53\u7684\u64cd\u4f5c\u8fc7\u7a0b\u3002","title":"\u5728 KubeSphere 3.x \u4e2d\u901a\u8fc7\u5e94\u7528\u4ed3\u5e93\u5b89\u88c5"},{"location":"server/deploy-in-kubesphere/#1","text":"\u9996\u5148\uff0c\u4f7f\u7528\u5177\u5907\u4f01\u4e1a\u7a7a\u95f4\u7ba1\u7406\u6743\u9650\u7684\u8d26\u53f7\u767b\u9646 KubeSphere \u5e76\u8fdb\u5165\u60a8\u9009\u5b9a\u7684\u4e00\u4e2a\u4f01\u4e1a\u7a7a\u95f4\uff0c\u5728\u60a8\u7684\u4f01\u4e1a\u7a7a\u95f4\u4e2d\uff0c\u8fdb\u5165\u300c\u5e94\u7528\u7ba1\u7406\u300d\u4e0b\u7684\u300c\u5e94\u7528\u4ed3\u5e93\u300d\u9875\u9762\uff0c\u5e76\u70b9\u51fb\u300c\u6dfb\u52a0\u4ed3\u5e93\u300d\u3002 \u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\uff0c\u53ef\u5c06\u5e94\u7528\u4ed3\u5e93\u540d\u79f0\u8bbe\u7f6e\u4e3a nocalhost \uff0c\u5c06\u5e94\u7528\u4ed3\u5e93\u7684 URL \u8bbe\u7f6e\u4e3a https://nocalhost-helm.pkg.coding.net/nocalhost/nocalhost \uff0c\u70b9\u51fb\u300c\u9a8c\u8bc1\u300d\u5bf9 URL \u8fdb\u884c\u9a8c\u8bc1\uff0c\u9a8c\u8bc1\u901a\u8fc7\u540e\u518d\u70b9\u51fb\u300c\u786e\u5b9a\u300d\u3002 \u26a0\ufe0f \u6ce8\u610f\uff1aURL \u5fc5\u987b\u8d34\u5168\u94fe\u63a5\uff0c\u4e0d\u80fd\u7f3a\u5931 https:// \u8fd9\u90e8\u5206\uff0c\u5426\u5219\u4f1a\u9a8c\u8bc1\u5931\u8d25 \u5e94\u7528\u4ed3\u5e93\u5bfc\u5165\u6210\u529f\u540e\u4f1a\u663e\u793a\u5728\u5982\u4e0b\u56fe\u6240\u793a\u7684\u5217\u8868\u4e2d\u3002 Info \u6709\u5173\u6dfb\u52a0\u79c1\u6709\u4ed3\u5e93\u65f6\u7684\u66f4\u591a\u53c2\u6570\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 \u5bfc\u5165 Helm \u4ed3\u5e93 \u3002 :::","title":"\u6b65\u9aa4 1\uff1a\u6dfb\u52a0\u5e94\u7528\u5546\u5e97"},{"location":"server/deploy-in-kubesphere/#2","text":"\u8fdb\u5165\u60a8\u9009\u5b9a\u7684\u7528\u4e8e\u90e8\u7f72 Nocalhost Server \u7684\u9879\u76ee\uff0c\u5982\u679c\u8fd8\u6ca1\u6709\u53ef\u7528\u9879\u76ee\uff0c\u53ef\u4ee5\u76f4\u63a5\u6253\u5f00\u4f01\u4e1a\u7a7a\u95f4\u9875\u9762\u4e2d\u7684\u300c\u9879\u76ee\u300d\u680f\u76ee\uff0c\u300c\u521b\u5efa\u300d\u4e00\u4e2a\u65b0\u7684\u9879\u76ee\u3002 \u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a nocalhost-server \u7684\u9879\u76ee\uff0c\u8fdb\u5165\u9879\u76ee\u754c\u9762\uff0c\u8fdb\u5165\u300c\u5e94\u7528\u8d1f\u8f7d\u300d\u4e0b\u7684\u300c\u5e94\u7528\u300d\u9875\u9762\uff0c\u518d\u70b9\u51fb\u300c\u521b\u5efa\u300d\u65b0\u5e94\u7528\u3002 \u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\u9009\u62e9\u300c\u4ece\u5e94\u7528\u6a21\u677f\u300d\u521b\u5efa\u3002 Info \u4ece\u5e94\u7528\u5546\u5e97 \uff1a\u9009\u62e9\u5185\u7f6e\u7684\u5e94\u7528\u548c\u4ee5 Helm Chart \u5f62\u5f0f\u5355\u72ec\u4e0a\u4f20\u7684\u5e94\u7528\u3002 \u4ece\u5e94\u7528\u6a21\u677f \uff1a\u4ece\u79c1\u6709\u5e94\u7528\u4ed3\u5e93\u548c\u4f01\u4e1a\u7a7a\u95f4\u5e94\u7528\u6c60\u9009\u62e9\u5e94\u7528\u3002 \u200b \u4ece\u4e0b\u62c9\u5217\u8868\u4e2d\u9009\u62e9\u4e4b\u524d\u6dfb\u52a0\u7684\u79c1\u6709\u5e94\u7528\u4ed3\u5e93 nocalhost \uff0c\u53ef\u4ee5\u770b\u5230\u4ed3\u5e93\u4e2d\u7684 Nocalhost Server Helm Chart \u5982\u4e0b\u663e\u793a\u3002 \u200b \u60a8\u53ef\u4ee5\u67e5\u770b\u300c\u5e94\u7528\u4fe1\u606f\u300d\u548c\u300cChart \u6587\u4ef6\u300d\uff0c\u5728\u7248\u672c\u4e0b\u62c9\u5217\u8868\u4e2d\u9009\u62e9\u7248\u672c\uff0c\u7136\u540e\u70b9\u51fb\u300c\u90e8\u7f72\u300d\u3002 \u200b \u8bbe\u7f6e\u5e94\u7528\u300c\u540d\u79f0\u300d\uff0c\u786e\u8ba4\u5e94\u7528\u300c\u7248\u672c\u300d\u548c\u90e8\u7f72\u300c\u4f4d\u7f6e\u300d\uff0c\u70b9\u51fb\u300c\u4e0b\u4e00\u6b65\u300d\u3002 \u200b \u5728\u300c\u5e94\u7528\u8bbe\u7f6e\u300d\u6807\u7b7e\u9875\uff0c\u60a8\u53ef\u4ee5\u624b\u52a8\u7f16\u8f91\u6e05\u5355\u6587\u4ef6\u6216\u76f4\u63a5\u70b9\u51fb\u300c\u5b89\u88c5\u300d\u3002\u5efa\u8bae\u628a service.type \u8bbe\u7f6e\u4e3a ClusterIP \uff0c\u4ee5\u786e\u4fdd\u5b89\u88c5\u4e0d\u53d7 Kubernetes \u7f51\u7edc\u73af\u5883\u5f71\u54cd\u3002\u5f53\u7136\uff0c\u60a8\u5b8c\u5168\u53ef\u4ee5\u7ed3\u5408\u81ea\u8eab\u7814\u53d1\u73af\u5883\u6765\u9009\u62e9\u4f7f\u7528 NodePort \u6216 LoadBalancer \u670d\u52a1\u7c7b\u578b\u6765\u66b4\u9732 Nocalhost Server\uff08Server \u672c\u8eab\u5bf9\u6b64\u5e76\u65e0\u9650\u5236\uff09\u3002 \u200b \u6700\u540e\u7b49\u5f85 Nocalhost Server \u521b\u5efa\u5b8c\u6210\u5e76\u5f00\u59cb\u8fd0\u884c\uff0c\u53ef\u4ee5\u5728\u300c\u5e94\u7528\u300d\u4e2d\u770b\u5230\u5982\u4e0b\u5e94\u7528\u72b6\u6001\uff08\u53ef\u80fd\u9700\u8981\u5237\u65b0\u4e00\u4e0b\u9875\u9762\uff09\u3002 \u200b","title":"\u6b65\u9aa4 2\uff1a\u4ece\u5e94\u7528\u6a21\u7248\u90e8\u7f72\u5e94\u7528"},{"location":"server/deploy-in-kubesphere/#3-nocalhost-server","text":"\u8fdb\u5165\u300c\u5e94\u7528\u8d1f\u8f7d\u300d\u4e0b\u7684\u300c\u670d\u52a1\u300d\u9875\u9762\uff0c\u9009\u62e9 nocalhost-web \u670d\u52a1\uff0c\u5728\u6700\u53f3\u4fa7\u7684\u62c9\u4e0b\u83dc\u5355\u4e2d\u9009\u62e9\u300c\u7f16\u8f91\u5916\u90e8\u8bbf\u95ee\u300d\u3002 \u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\u9009\u62e9\u5408\u9002\u5f53\u524d\u4e91\u7aef\u7f51\u7edc\u73af\u5883\u7684\u5916\u7f51\u300c\u8bbf\u95ee\u65b9\u5f0f\u300d\uff0c\u7136\u540e\u70b9\u51fb\u300c\u786e\u5b9a\u300d\u5373\u53ef\u5e94\u7528\u670d\u52a1\u914d\u7f6e\u3002 \u672c\u6587\u5047\u8bbe\u6211\u4eec\u4ecd\u7136\u4fdd\u6301 ClusterIP \u7684\u8bbf\u95ee\u65b9\u5f0f\uff0c\u901a\u8fc7 kubectl port-forward \u6765\u8fdb\u884c\u540e\u7eed\u7684 Nocalhost Server \u4f7f\u7528\u3002 \u276f kubectl -n nocalhost-server port-forward service/nocalhost-web 8080 :80 \u26a0\ufe0f \u6ce8\u610f\uff1a\u8fd9\u91cc\u7684 nocalhost-server \u8bf7\u66ff\u6362\u4e3a\u60a8\u5b9e\u9645\u4f7f\u7528\u7684\u90e8\u7f72\u4e86 Nocalhost \u5e94\u7528\u7684 Namespace","title":"\u6b65\u9aa4 3\uff1a\u66b4\u9732 Nocalhost Server \u670d\u52a1"},{"location":"server/deploy-in-kubesphere/#nocalhost-server_1","text":"\u5b8c\u6210 Port Forward \u540e\u53ef\u4f7f\u7528 http://localhost:8080 \u6765\u6253\u5f00 Nocalhost Server Dashboard \u9875\u9762\uff1b\u4f7f\u7528 admin@admin.com \u53ca\u5bc6\u7801 123456 \u8fdb\u884c\u767b\u9646\u3002 \u200b","title":"\u4f7f\u7528 Nocalhost Server"},{"location":"server/deploy-in-kubesphere/#_2","text":"Nocalhost Server \u591a\u7528\u4e8e\u7ba1\u7406\u6574\u4e2a\u56e2\u961f\u7684 Nocalhost \u7814\u53d1\u73af\u5883\uff0c\u56e0\u6b64\u6211\u4eec\u9996\u5148\u9700\u8981\u6dfb\u52a0\u53ef\u8fdb\u884c\u7ba1\u7406\u7684\u96c6\u7fa4\u3002 \u200b \u5728 Nocalhost Server Dashboard \u4e2d\u9009\u62e9\u5de6\u4fa7\u83dc\u5355\u5217\u8868\u4e2d\u7684\u300c\u96c6\u7fa4\u300d\uff0c\u8fdb\u5165\u9875\u9762\u540e\u9009\u62e9\u300c\u6dfb\u52a0\u96c6\u7fa4\u300d\u3002 \u200b \u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\u8f93\u5165\u300c\u96c6\u7fa4\u540d\u79f0\u300d\uff0c\u5e76\u5f55\u5165 kubectl \u53ef\u7528\u7684\u3001 \u5177\u5907 ** **cluster-admin** \u6743\u9650**\u7684 kubeconfig \u6587\u4ef6\u540e\u300c\u786e\u8ba4\u300d\u3002 \u200b Danger \u76ee\u524d\u53ef\u5bfc\u5165\u7684 kubeconfig \u6587\u4ef6\u5185\u5bb9\u8fd8\u4e0d\u652f\u6301 exec \u7c7b\u578b\u7684\u7528\u6237\u51ed\u8bc1\uff0c\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f\u8fd9\u91cc\u51ed\u8bc1\uff0c\u5efa\u8bae\u60a8\u53e6\u5916\u751f\u6210\u4e00\u4e2a\u5177\u6709\u8db3\u591f\u6743\u9650\u7684 ServiceAccount \u5e76\u4f7f\u7528\u5176\u5bf9\u5e94\u7684 kubeconfig\u3002 \u8fd9\u91cc\u6709\u591a\u79cd\u65b9\u5f0f\u83b7\u53d6\u76ee\u6807\u96c6\u7fa4\u7684 kubeconfig\uff0c\u4f8b\u5982\u60a8\u53ef\u4ee5\u8fd4\u56de KubeSphere \u5e76\u8fdb\u5165\u96c6\u7fa4\u9875\u9762\uff0c\u83b7\u53d6\u5f53\u524d\u96c6\u7fa4\u7684 kubeconfig \u6587\u4ef6\u3002\u6ce8\u610f\uff0c\u5982\u679c\u4f7f\u7528 kubeconfig \u6587\u4ef6\u7684\u5e94\u7528\u90e8\u7f72\u5728\u5f53\u524d\u96c6\u7fa4\u5916\uff0c\u60a8\u9700\u8981\u5c06 clusters:cluster:server \u53c2\u6570\u7684\u503c\u4fee\u6539\u4e3a**\u5bf9\u5916\u66b4\u9732\u7684 Kubernetes API \u670d\u52a1\u5668\u5730\u5740**\u3002 \u200b \u6dfb\u52a0\u6210\u529f\u540e\uff0c\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u7684\u96c6\u7fa4\u4fe1\u606f\u9875\u9762\u3002","title":"\u521b\u5efa\u96c6\u7fa4"},{"location":"server/deploy-in-kubesphere/#devspace","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8fdb\u5165\u300c\u5f00\u53d1\u7a7a\u95f4\u300d\u9875\u9762\uff0c\u9009\u62e9\u300c\u521b\u5efa\u5f00\u53d1\u7a7a\u95f4\u300d\uff0c\u5e76\u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\u9009\u62e9\u300c\u521b\u5efa\u9694\u79bb\u5f00\u53d1\u7a7a\u95f4\u300d\u3002 ::: \u5173\u4e8e\u300c\u5171\u4eab\u5f00\u53d1\u7a7a\u95f4\u300d\uff0c\u5373 MeshSpace\uff0c\u53ef\u53c2\u8003 Manage MeshSpace \u8fd9\u7bc7\u5b98\u65b9\u4ecb\u7ecd\u3002 ::: \u200b \u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\uff0c\u53ef\u4ee5\u586b\u5199\u300c\u5f00\u53d1\u7a7a\u95f4\u540d\u79f0\u300d\uff08\u8fd9\u91cc\u8bbe\u7f6e\u4e3a demo \uff09\uff0c\u9009\u62e9\u300c\u96c6\u7fa4\u300d\u548c\u5176\u300c\u6240\u6709\u8005\u300d\uff0c\u5e76\u6309\u9700\u8fdb\u884c\u300c\u5176\u5b83\u8bbe\u7f6e\u300d\u3002 \u521b\u5efa\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u5728\u300c\u5f00\u53d1\u7a7a\u95f4\u300d\u9875\u9762\u770b\u5230\u5df2\u521b\u5efa\u7684\u9694\u79bb\u5f00\u53d1\u7a7a\u95f4\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u200b","title":"\u521b\u5efa\u5f00\u53d1\u7a7a\u95f4\uff08DevSpace\uff09"},{"location":"server/deploy-in-kubesphere/#bookinfo","text":"\u4e0b\u4e00\u6b65\u6211\u4eec\u5f00\u59cb\u4e3a\u56e2\u961f\u521b\u5efa\u4e00\u4e9b\u53ef\u90e8\u7f72\u7684\u5e94\u7528\uff0c\u5148\u8fdb\u5165\u300c\u5e94\u7528\u300d\u9875\u9762\uff0c\u9009\u62e9\u300c\u6dfb\u52a0\u5e94\u7528\u300d\u3002 \u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\u586b\u5199\u300c\u5e94\u7528\u540d\u79f0\u300d\uff0c\u540c\u65f6\u6211\u4eec\u7ee7\u7eed\u586b\u5199\u5176\u5b83\u4fe1\u606f\uff1a \u9009\u62e9 Git \u4f5c\u4e3a\u300c\u5b89\u88c5\u6765\u6e90\u300d \u8f93\u5165 https://github.com/nocalhost/bookinfo.git \u4f5c\u4e3a\u300cGit \u4ed3\u5e93\u5730\u5740\u300d \u9009\u62e9 Manifest \u4f5c\u4e3a\u300cManifest \u7c7b\u578b\u300d \u300c\u5e94\u7528\u914d\u7f6e\u6587\u4ef6\u300d\u7559\u7a7a\uff0c\u5373\u4f7f\u7528 config.yaml \u300cGit \u4ed3\u5e93\u7684\u76f8\u5bf9\u8def\u5f84\u300d\u586b\u5165 manifest/templates Tip \u53ef\u8bbf\u95ee GitHub \u67e5\u770b\u5b8c\u6574\u7684 bookinfo \u6837\u4f8b\u5e94\u7528\u4ed3\u5e93\uff0c\u4e86\u89e3\u8be6\u7ec6\u7684\u914d\u7f6e\u6587\u4ef6\u7ec6\u8282\u3002 \u200b","title":"\u521b\u5efa bookinfo \u6837\u4f8b\u5e94\u7528"},{"location":"server/deploy-in-kubesphere/#_3","text":"\u6700\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u6837\u4f8b\u7528\u6237\u6765\u6f14\u793a\u5982\u679c\u5171\u4eab\u5f00\u53d1\u7a7a\u95f4\u3002\u8fdb\u5165\u5230\u300c\u7528\u6237\u300d\u9875\u9762\u540e\uff0c\u70b9\u51fb\u300c\u6dfb\u52a0\u7528\u6237\u300d\uff0c\u5728\u5f39\u51fa\u7684\u5bf9\u8bdd\u6846\u4e2d\u586b\u5165\u5fc5\u987b\u7684\u7528\u6237\u4fe1\u606f\u540e\u300c\u5b8c\u6210\u300d\u6dfb\u52a0\u3002 \u200b \u7136\u540e\u6211\u4eec\u56de\u5230\u5f00\u53d1\u7a7a\u95f4\uff0c\u9009\u62e9\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u7684 demo \u7a7a\u95f4\uff0c\u70b9\u51fb\u753b\u7b14\u56fe\u6807\u8fdb\u5165\u300c\u7f16\u8f91\u5f00\u53d1\u7a7a\u95f4\u300d\u7684\u300c\u5171\u4eab\u7528\u6237\u300d\u6807\u7b7e\u9875\uff0c\u5f00\u59cb\u300c\u6dfb\u52a0\u5171\u4eab\u300d\u3002 \u200b \u9009\u62e9\u9700\u8981\u6dfb\u52a0\u7684\u7528\u6237\uff0c\u5e76\u6ce8\u610f\u9009\u62e9\u9ed8\u8ba4\u7684 Cooperator \u534f\u4f5c\u8005\u6743\u9650\uff0c\u53e6\u4e00\u4e2a Viewer \u89c2\u5bdf\u8005\u6743\u9650\u7684\u7528\u6237\u53ea\u80fd\u6d4f\u89c8\u5f00\u53d1\u7a7a\u95f4\u3002 \u81f3\u6b64\uff0c\u6211\u4eec\u5728 Nocalhost Server Dashboard \u4e2d\u7684\u914d\u7f6e\u5c31\u544a\u4e00\u6bb5\u843d\uff0c\u4e0b\u9762\u5c06\u8fdb\u5165 IDE \u5229\u7528 Nocalhost \u63d2\u4ef6\u6267\u884c\u5e94\u7528\u7684\u90e8\u7f72\u3002 \u200b","title":"\u521b\u5efa\u7528\u6237\u5e76\u5171\u4eab\u5f00\u53d1\u7a7a\u95f4"},{"location":"server/deploy-in-kubesphere/#bookinfo_1","text":"\u8fd9\u91cc\u6211\u4eec\u5c06\u4f7f\u7528 VS Code \u6267\u884c\u5e94\u7528\u7684\u90e8\u7f72\uff0c\u9996\u5148\u9700\u8981 \u5728 VS Code \u4e2d\u5b89\u88c5 Nocalhost \u63d2\u4ef6 \u3002 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 JetBrains \u53ca\u5176 Nocalhost \u63d2\u4ef6 \u3002 \u5728 VS Code \u4e2d\u6253\u5f00 Nocalhost \u63d2\u4ef6\u9762\u677f\uff0c\u70b9\u51fb + \u53f7\u521b\u5efa\u96c6\u7fa4\u8fde\u63a5\uff0c\u586b\u5165 Nocalhost Server \u5730\u5740\uff0c\u5e76\u4f7f\u7528\u524d\u9762\u521b\u5efa\u7684\u666e\u901a\u7528\u6237 test \u7684\u7528\u6237\u540d\u53ca\u5bc6\u7801\u8fdb\u884c\u767b\u5f55\u3002 \u521b\u5efa\u6210\u529f\u53ef\u4ee5\u770b\u5230\u4e4b\u524d\u5728 Nocalhost Server Dashboard \u4e2d\u521b\u5efa\u7684\u5f00\u53d1\u7a7a\u95f4 demo(nh1btih) \u3002 \u70b9\u51fb demo \u7a7a\u95f4\u53f3\u4fa7\u7684\u706b\u7bad\u56fe\u6807\uff0c\u4f1a\u5728 VS Code \u7f16\u8f91\u5668\u9876\u90e8\u52a0\u8f7d\u5e94\u7528\u5217\u8868\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u53ef\u4ee5\u770b\u5230\u4e4b\u524d\u6dfb\u52a0\u7684 bookinfo \u5e94\u7528\u3002 \u200b \u9009\u62e9\u8be5\u5e94\u7528\u5373\u4f1a\u542f\u52a8\u5728 demo \u7a7a\u95f4\u4e2d\u7684 Nocalhost \u5e94\u7528\u90e8\u7f72\u8fc7\u7a0b\uff08\u9009\u62e9\u5e94\u7528\u6e90\u7684\u9ed8\u8ba4\u5206\u652f\u8fdb\u884c\u5b89\u88c5\u5373\u53ef\uff09\uff0c\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u4f1a\u51fa\u73b0\u5982\u4e0b\u65e5\u5fd7\u548c\u5f39\u7a97\u63d0\u793a\uff1a \u540c\u65f6\u5728 Nocalhost \u63d2\u4ef6\u9762\u677f\u4e2d\u4e5f\u53ef\u4ee5\u5c55\u5f00 Workload \u770b\u5230\u5177\u4f53\u7684\u90e8\u7f72\u5185\u5bb9\u3002 \u518d\u5f80\u540e\u5c31\u53ef\u4ee5\u4f9d\u7167 Nocalhost \u5e38\u89c4\u65b9\u5f0f \u8fdb\u5165\u5f00\u53d1\u6a21\u5f0f \uff0c\u4f53\u9a8c\u66f4\u4fbf\u6377\u7684\u4e91\u539f\u751f\u5fae\u670d\u52a1\u5f00\u53d1\u8fc7\u7a0b\uff01","title":"\u6267\u884c bookinfo \u5e94\u7528\u90e8\u7f72"},{"location":"server/deploy-server/","text":"\u5feb\u901f\u5f00\u59cb \u00b6 \u5173\u4e8e\u672c\u6307\u5357 Goal : \u5c06Nocalhost Sever\u90e8\u7f72\u5230Kubernetes\u7fa4\u96c6\u3002 Estimate time : 5 minutes Requirements : Any local or remote Kubernetes cluster (minikube, Docker Desktop, TKE, GKE, EKS, AKS, Rancher, ...). Allocate at least 4 GB of memory for single node clusters like Docker Desktop and minikube . RBAC must be enabled in above cluster Configured kubeconfig file that has namespace admin privilege Nocalhost IDE Plugin installed Kubernetes api-server can be accessed internal and external Helm 3+ 1. Add Helm Chart Repository \u00b6 helm repo add nocalhost \"https://nocalhost-helm.pkg.coding.net/nocalhost/nocalhost\" helm repo update 2. Install the Nocalhost Server \u00b6 helm install nocalhost nocalhost/nocalhost -n nocalhost --create-namespace No PVC The above deployment will create a pvc for mariadb . If you do not have pvc or without permission to create, you can use the --set mariadb.primary.persistence.enabled=false to deploy Nocalhost Server without creating pvc. 3. Waiting for Pods to be Ready \u00b6 You can check the pods status by kubectl or other Kubernetes tools. \u276f kubectl -n nocalhost get pods NAME READY STATUS RESTARTS AGE nocalhost-api-b48f7799d-wr4ps 1/1 Running 3 2m7s nocalhost-mariadb-0 1/1 Running 0 2m2s nocalhost-web-9dd659b8-s89f4 1/1 Running 0 2m7s 4. Port-Forwarding to Access Web Service \u00b6 Once the deployment completed, you need to manually port-forward the Nocalhost Web Service to local by using the following command. \u276f kubectl -n nocalhost port-forward service/nocalhost-web 8080:80 You can now access the nocalhost dashboard with http://127.0.0.1:8080 Default username and password to access web service Email : admin@admin.com Password : 123456 5. Add Dev Cluster \u00b6 Access the nocalhost dashboard, Cluster \u2192 Add Cluster . Copy the contents of the Admin kubeconfig and paste it into the input box.","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"server/deploy-server/#_1","text":"\u5173\u4e8e\u672c\u6307\u5357 Goal : \u5c06Nocalhost Sever\u90e8\u7f72\u5230Kubernetes\u7fa4\u96c6\u3002 Estimate time : 5 minutes Requirements : Any local or remote Kubernetes cluster (minikube, Docker Desktop, TKE, GKE, EKS, AKS, Rancher, ...). Allocate at least 4 GB of memory for single node clusters like Docker Desktop and minikube . RBAC must be enabled in above cluster Configured kubeconfig file that has namespace admin privilege Nocalhost IDE Plugin installed Kubernetes api-server can be accessed internal and external Helm 3+","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"server/deploy-server/#1-add-helm-chart-repository","text":"helm repo add nocalhost \"https://nocalhost-helm.pkg.coding.net/nocalhost/nocalhost\" helm repo update","title":"1. Add Helm Chart Repository"},{"location":"server/deploy-server/#2-install-the-nocalhost-server","text":"helm install nocalhost nocalhost/nocalhost -n nocalhost --create-namespace No PVC The above deployment will create a pvc for mariadb . If you do not have pvc or without permission to create, you can use the --set mariadb.primary.persistence.enabled=false to deploy Nocalhost Server without creating pvc.","title":"2. Install the Nocalhost Server"},{"location":"server/deploy-server/#3-waiting-for-pods-to-be-ready","text":"You can check the pods status by kubectl or other Kubernetes tools. \u276f kubectl -n nocalhost get pods NAME READY STATUS RESTARTS AGE nocalhost-api-b48f7799d-wr4ps 1/1 Running 3 2m7s nocalhost-mariadb-0 1/1 Running 0 2m2s nocalhost-web-9dd659b8-s89f4 1/1 Running 0 2m7s","title":"3. Waiting for Pods to be Ready"},{"location":"server/deploy-server/#4-port-forwarding-to-access-web-service","text":"Once the deployment completed, you need to manually port-forward the Nocalhost Web Service to local by using the following command. \u276f kubectl -n nocalhost port-forward service/nocalhost-web 8080:80 You can now access the nocalhost dashboard with http://127.0.0.1:8080 Default username and password to access web service Email : admin@admin.com Password : 123456","title":"4. Port-Forwarding to Access Web Service"},{"location":"server/deploy-server/#5-add-dev-cluster","text":"Access the nocalhost dashboard, Cluster \u2192 Add Cluster . Copy the contents of the Admin kubeconfig and paste it into the input box.","title":"5. Add Dev Cluster"},{"location":"server/manage-app/","text":"Manage Applications \u00b6","title":"\u7ba1\u7406\u5e94\u7528\u7a0b\u5e8f"},{"location":"server/manage-app/#manage-applications","text":"","title":"Manage Applications"},{"location":"server/manage-cluster/","text":"Manage Cluster \u00b6","title":"\u7ba1\u7406\u96c6\u7fa4"},{"location":"server/manage-cluster/#manage-cluster","text":"","title":"Manage Cluster"},{"location":"server/manage-devspace-iso/","text":"","title":"Isolated DevSpace"},{"location":"server/manage-devspace-mesh/","text":"Manage MeshSpace \u00b6 BaseSpace: Isolated DevSpace, corresponding to the Kubernetes namespace with the istio-injection=enabled label, the Istio sidecar will automatically inject to it. There is a complete set of services in the namespace, and these services are shared with the MeshSpace. MeshSpace: Corresponding to a Kubernetes namespace, which based on Istio Service Mesh. Share the services of the BaseSpace by specifying header routing and distribution. How to use? \u00b6 Prerequisites \u00b6 Istio 1.8+ has deployed in the cluster Application services can transparently transmit the specified header (for !!! example Jaeger Tracer transparently transmits uberctx-<key> by default) Steps \u00b6 Create an isolated DevSpace and turn on the Set as base DevSpace switch Deploy application services in the created BaseSpace Create a MeshSpace Select the service to be developed in the MeshSpace (services are the services in the BaseSpace , and the selection will be automatically copied to the MeshSpace for development by the system) Start the development How it works? \u00b6 In the BaseSpace, Istio sidecar automatic injection is enabled, and the traffic of application services is managed by the service mesh. In the MeshSpace, select the service that needs to be developed in a certain BaseSpace, and this service will be copied to the MeshSpace by the system, and configure the Istio Virtual Service routing rules in the BashSpace. The traffic with the specified header will be routed to the MeshSpace and received by the developed service (The header is automatically generated by the system or configure by custom when the user creates the MeshSpace). After the developed service has processed the request, the traffic sent out will be routed back to the BaseSpace by the service mesh and received by other back-end applications.","title":"\u7ba1\u7406 MeshSpace"},{"location":"server/manage-devspace-mesh/#manage-meshspace","text":"BaseSpace: Isolated DevSpace, corresponding to the Kubernetes namespace with the istio-injection=enabled label, the Istio sidecar will automatically inject to it. There is a complete set of services in the namespace, and these services are shared with the MeshSpace. MeshSpace: Corresponding to a Kubernetes namespace, which based on Istio Service Mesh. Share the services of the BaseSpace by specifying header routing and distribution.","title":"Manage MeshSpace"},{"location":"server/manage-devspace-mesh/#how-to-use","text":"","title":"How to use?"},{"location":"server/manage-devspace-mesh/#prerequisites","text":"Istio 1.8+ has deployed in the cluster Application services can transparently transmit the specified header (for !!! example Jaeger Tracer transparently transmits uberctx-<key> by default)","title":"Prerequisites"},{"location":"server/manage-devspace-mesh/#steps","text":"Create an isolated DevSpace and turn on the Set as base DevSpace switch Deploy application services in the created BaseSpace Create a MeshSpace Select the service to be developed in the MeshSpace (services are the services in the BaseSpace , and the selection will be automatically copied to the MeshSpace for development by the system) Start the development","title":"Steps"},{"location":"server/manage-devspace-mesh/#how-it-works","text":"In the BaseSpace, Istio sidecar automatic injection is enabled, and the traffic of application services is managed by the service mesh. In the MeshSpace, select the service that needs to be developed in a certain BaseSpace, and this service will be copied to the MeshSpace by the system, and configure the Istio Virtual Service routing rules in the BashSpace. The traffic with the specified header will be routed to the MeshSpace and received by the developed service (The header is automatically generated by the system or configure by custom when the user creates the MeshSpace). After the developed service has processed the request, the traffic sent out will be routed back to the BaseSpace by the service mesh and received by other back-end applications.","title":"How it works?"},{"location":"server/manage-user/","text":"Manage User \u00b6","title":"\u7ba1\u7406\u7528\u6237"},{"location":"server/manage-user/#manage-user","text":"","title":"Manage User"},{"location":"server/nh-dep/","text":"Nocalhost Dep \u00b6 Nocalhost Dep is a Webhook admission , which is used to handle service dependencies during application deployment. Service dependencies can be defined through services[*].dependLabelSelector in the Nocalhost configuration. Nocalhost Dep will inject an initContainer into the container when deploying an application. The initContainer will ensure that the services it depends on run successfully and then create the related container.","title":"Nocalhost Dep"},{"location":"server/nh-dep/#nocalhost-dep","text":"Nocalhost Dep is a Webhook admission , which is used to handle service dependencies during application deployment. Service dependencies can be defined through services[*].dependLabelSelector in the Nocalhost configuration. Nocalhost Dep will inject an initContainer into the container when deploying an application. The initContainer will ensure that the services it depends on run successfully and then create the related container.","title":"Nocalhost Dep"},{"location":"server/server-overview/","text":"\u6982\u8ff0 \u00b6 \u5728\u672c\u6587\u6863\u4e2d\uff0c\u6211\u4eec\u5c06\u89e3\u91ca Nocalhost \u670d\u52a1\u5668\u7684\u6838\u5fc3\u601d\u60f3\uff0c\u5e76\u9610\u660e\u9879\u76ee\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e00\u4e9b\u6280\u672f\u672f\u8bed\u3002 \u6982\u5ff5 \u00b6 \u96c6\u7fa4 \u00b6 Nocalhost \u96c6\u7fa4 \u901a\u5e38\u5bf9\u5e94\u4e8e Kubernetes \u7fa4\u96c6\u3002Nocalhost \u652f\u6301\u7ba1\u7406 TKE\uff0cGKE\uff0cMinikube \u7b49\u591a\u7fa4\u96c6\u3002 \u5728\u5b9e\u9645\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u7528\u6237\u4e0d\u9700\u8981\u77e5\u9053\u7fa4\u96c6\u7684\u6982\u5ff5\uff0c\u800c DevSpace \u4e0b\u7684\u7528\u6237\u64cd\u4f5c\u5b9e\u9645\u4e0a\u4f9d\u8d56\u4e8e\u7fa4\u96c6\u7684\u529f\u80fd\u3002 \u96c6\u7fa4\u7ba1\u7406 \u00b6 KubeConfig If you want to manage a Cluster\uff0cthen need to maintain a KubeConfig with the cluster's Cluster-Admin role. Cluster is generally used with DevSpace, if you need to manage Cluster, you refer to Manage Cluster DevSpace \u00b6 DevSpace \u662f Nocalhost \u7684\u6982\u5ff5\uff0c\u5b83\u4ee3\u8868\u4e86\u7531 Nocalhost \u7ba1\u7406\u7684\u9884\u5148\u5206\u914d\u7684\u5f00\u53d1\u7a7a\u95f4\u3002 \u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u5728 DevSpace \u5185\u90e8\u90e8\u7f72\uff0c\u5378\u8f7d\uff0c\u5f00\u53d1\u548c\u8c03\u8bd5\u5e94\u7528\u7a0b\u5e8f\u3002 \u5f00\u53d1\u7a7a\u95f4\u5f7c\u6b64\u9694\u79bb\u3002 Nocalhost also allow developers to share their DevSpaces with other developers for collaborative development. DevSpace \u7ba1\u7406 \u00b6 If you need to manage DevSpace , you can refer to Manage DevSpace \u5e94\u7528 \u00b6 Application is a concept of Nocalhost, it is mainly used to manage a set of manifest files you want to apply for local development, it supports both Kubernetes manifest and helm chart. In other words, these manifests usually contain all the k8s resources that your own application depends on. If possible, we should try to keep it to a minimum. Nocalhost supports three types of applications: Manifest Helm Kustomize Application can be used to create a DevSpace , we recommend using IDE plug-in directly to deploy your application, IDE plugin is worked on the DevSpace created by Application. In other words, after being assigned a DevSpace, the developer can easily develop on the IDE. After being assigned a DevSpace, you will get a KubeConfig to access this DevSpace, nhctl or plug-in can deploy the application based on the application's manifest file and KubeConfig . So DevSpace can actually be approximated as Application + Kubeconfig : \u5e94\u7528\u7a0b\u5e8f\u7ba1\u7406 \u00b6 If you need to manage Applications , you can refer to Manage Application \u670d\u52a1 \u00b6 Service is completely different from svc of Kubernetes. Service can be considered as an enhancement of application deployment and development. \u9605\u8bfb\u66f4\u591a\u4fe1\u606f\u4ee5\u4e86\u89e3\u5982\u4f55\u914d\u7f6e\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1 \u9605\u8bfb\u66f4\u591a\u4fe1\u606f\u4ee5\u4e86\u89e3\u5982\u4f55\u914d\u7f6e\u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72 Service Configs Service configurations are not necessary, only needs when essential. \u7528\u6237 \u00b6 User belongs to the independent concept of Nocalhost, it's different with user in Kubernetes. When you use Nocalhost Server and Nocalhost Plugins, User is used to identify your identity and access control to resources. There are two types of User in Nocalhost: Standard User and System Admin \u6807\u51c6\u7528\u6237 \u00b6 Can only log in IDE Plugin, users can develop under their own DevSpace. these DevSpace are all created by Administrator. User can only see their own DevSpace, and have all the permissions under these DevSpace, such as install, uninstall (deploy and destroy), enter DevMode and port-forwarding. Cannot log in to Nocalhost-Web, nor can they delete the DevSpace, or disassociate it from the DevSpace, which is very similar to the admin permission under a certain namespace of Kubernetes. \u7cfb\u7edf\u7ba1\u7406\u5458 \u00b6 Has the permission to access Nocalhost Server , and with all the permissions in Nocalhost Web, such as create and manage Application, Cluster, User, DevSpace, etc Have all the permissions of User , such as logging in at IDE plugins, develop in their own DevSpace list \u7528\u6237\u7ba1\u7406 \u00b6 If you need to manage User , you can refer to Manage User \u600e\u4e48\u8fd0\u884c\u7684 \u00b6 IDE \u63d2\u4ef6 \u00b6 nhctl \u00b6 Nocalhost-Web \u00b6 Nocalhost-API \u00b6 Nocalhost-Dep \u00b6","title":"\u670d\u52a1\u5668\u6982\u8ff0"},{"location":"server/server-overview/#_1","text":"\u5728\u672c\u6587\u6863\u4e2d\uff0c\u6211\u4eec\u5c06\u89e3\u91ca Nocalhost \u670d\u52a1\u5668\u7684\u6838\u5fc3\u601d\u60f3\uff0c\u5e76\u9610\u660e\u9879\u76ee\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e00\u4e9b\u6280\u672f\u672f\u8bed\u3002","title":"\u6982\u8ff0"},{"location":"server/server-overview/#_2","text":"","title":"\u6982\u5ff5"},{"location":"server/server-overview/#_3","text":"Nocalhost \u96c6\u7fa4 \u901a\u5e38\u5bf9\u5e94\u4e8e Kubernetes \u7fa4\u96c6\u3002Nocalhost \u652f\u6301\u7ba1\u7406 TKE\uff0cGKE\uff0cMinikube \u7b49\u591a\u7fa4\u96c6\u3002 \u5728\u5b9e\u9645\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u7528\u6237\u4e0d\u9700\u8981\u77e5\u9053\u7fa4\u96c6\u7684\u6982\u5ff5\uff0c\u800c DevSpace \u4e0b\u7684\u7528\u6237\u64cd\u4f5c\u5b9e\u9645\u4e0a\u4f9d\u8d56\u4e8e\u7fa4\u96c6\u7684\u529f\u80fd\u3002","title":"\u96c6\u7fa4"},{"location":"server/server-overview/#_4","text":"KubeConfig If you want to manage a Cluster\uff0cthen need to maintain a KubeConfig with the cluster's Cluster-Admin role. Cluster is generally used with DevSpace, if you need to manage Cluster, you refer to Manage Cluster","title":"\u96c6\u7fa4\u7ba1\u7406"},{"location":"server/server-overview/#devspace","text":"DevSpace \u662f Nocalhost \u7684\u6982\u5ff5\uff0c\u5b83\u4ee3\u8868\u4e86\u7531 Nocalhost \u7ba1\u7406\u7684\u9884\u5148\u5206\u914d\u7684\u5f00\u53d1\u7a7a\u95f4\u3002 \u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u5728 DevSpace \u5185\u90e8\u90e8\u7f72\uff0c\u5378\u8f7d\uff0c\u5f00\u53d1\u548c\u8c03\u8bd5\u5e94\u7528\u7a0b\u5e8f\u3002 \u5f00\u53d1\u7a7a\u95f4\u5f7c\u6b64\u9694\u79bb\u3002 Nocalhost also allow developers to share their DevSpaces with other developers for collaborative development.","title":"DevSpace"},{"location":"server/server-overview/#devspace_1","text":"If you need to manage DevSpace , you can refer to Manage DevSpace","title":"DevSpace \u7ba1\u7406"},{"location":"server/server-overview/#_5","text":"Application is a concept of Nocalhost, it is mainly used to manage a set of manifest files you want to apply for local development, it supports both Kubernetes manifest and helm chart. In other words, these manifests usually contain all the k8s resources that your own application depends on. If possible, we should try to keep it to a minimum. Nocalhost supports three types of applications: Manifest Helm Kustomize Application can be used to create a DevSpace , we recommend using IDE plug-in directly to deploy your application, IDE plugin is worked on the DevSpace created by Application. In other words, after being assigned a DevSpace, the developer can easily develop on the IDE. After being assigned a DevSpace, you will get a KubeConfig to access this DevSpace, nhctl or plug-in can deploy the application based on the application's manifest file and KubeConfig . So DevSpace can actually be approximated as Application + Kubeconfig :","title":"\u5e94\u7528"},{"location":"server/server-overview/#_6","text":"If you need to manage Applications , you can refer to Manage Application","title":"\u5e94\u7528\u7a0b\u5e8f\u7ba1\u7406"},{"location":"server/server-overview/#_7","text":"Service is completely different from svc of Kubernetes. Service can be considered as an enhancement of application deployment and development. \u9605\u8bfb\u66f4\u591a\u4fe1\u606f\u4ee5\u4e86\u89e3\u5982\u4f55\u914d\u7f6e\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1 \u9605\u8bfb\u66f4\u591a\u4fe1\u606f\u4ee5\u4e86\u89e3\u5982\u4f55\u914d\u7f6e\u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72 Service Configs Service configurations are not necessary, only needs when essential.","title":"\u670d\u52a1"},{"location":"server/server-overview/#_8","text":"User belongs to the independent concept of Nocalhost, it's different with user in Kubernetes. When you use Nocalhost Server and Nocalhost Plugins, User is used to identify your identity and access control to resources. There are two types of User in Nocalhost: Standard User and System Admin","title":"\u7528\u6237"},{"location":"server/server-overview/#_9","text":"Can only log in IDE Plugin, users can develop under their own DevSpace. these DevSpace are all created by Administrator. User can only see their own DevSpace, and have all the permissions under these DevSpace, such as install, uninstall (deploy and destroy), enter DevMode and port-forwarding. Cannot log in to Nocalhost-Web, nor can they delete the DevSpace, or disassociate it from the DevSpace, which is very similar to the admin permission under a certain namespace of Kubernetes.","title":"\u6807\u51c6\u7528\u6237"},{"location":"server/server-overview/#_10","text":"Has the permission to access Nocalhost Server , and with all the permissions in Nocalhost Web, such as create and manage Application, Cluster, User, DevSpace, etc Have all the permissions of User , such as logging in at IDE plugins, develop in their own DevSpace list","title":"\u7cfb\u7edf\u7ba1\u7406\u5458"},{"location":"server/server-overview/#_11","text":"If you need to manage User , you can refer to Manage User","title":"\u7528\u6237\u7ba1\u7406"},{"location":"server/server-overview/#_12","text":"","title":"\u600e\u4e48\u8fd0\u884c\u7684"},{"location":"server/server-overview/#ide","text":"","title":"IDE \u63d2\u4ef6"},{"location":"server/server-overview/#nhctl","text":"","title":"nhctl"},{"location":"server/server-overview/#nocalhost-web","text":"","title":"Nocalhost-Web"},{"location":"server/server-overview/#nocalhost-api","text":"","title":"Nocalhost-API"},{"location":"server/server-overview/#nocalhost-dep","text":"","title":"Nocalhost-Dep"},{"location":"server/upgrade/","text":"Upgrade \u00b6 Upgrade nocalhost server whit Helm Prerequisites \u00b6 Helm 3+ Add Helm Chart Repository \u00b6 helm repo add nocalhost \"https://nocalhost-helm.pkg.coding.net/nocalhost/nocalhost\" helm repo update Upgrade \u00b6 helm upgrade nocalhost nocalhost/nocalhost -n nocalhost Tip use the flag --reset-values when upgrade nocalhost, if you install nocalhost server with nhctl init","title":"\u670d\u52a1\u5668\u5347\u7ea7"},{"location":"server/upgrade/#upgrade","text":"Upgrade nocalhost server whit Helm","title":"Upgrade"},{"location":"server/upgrade/#prerequisites","text":"Helm 3+","title":"Prerequisites"},{"location":"server/upgrade/#add-helm-chart-repository","text":"helm repo add nocalhost \"https://nocalhost-helm.pkg.coding.net/nocalhost/nocalhost\" helm repo update","title":"Add Helm Chart Repository"},{"location":"server/upgrade/#upgrade_1","text":"helm upgrade nocalhost nocalhost/nocalhost -n nocalhost Tip use the flag --reset-values when upgrade nocalhost, if you install nocalhost server with nhctl init","title":"Upgrade"}]}